<% template script_charts ()

    setContentType("text/javascript;charset=utf-8");

%>

/* Javascript plotting library for jQuery, v. 0.7.
 *
 * Released under the MIT license by IOLA, December 2007.
 *
 */
/* Flot - Base */
/*! Javascript plotting library for jQuery, v. 0.7.
 *
 * Released under the MIT license by IOLA, December 2007.
 *
 */

// first an inline dependency, jquery.colorhelpers.js, we inline it here
// for convenience

/* Plugin for jQuery for working with colors.
 * 
 * Version 1.1.
 * 
 * Inspiration from jQuery color animation plugin by John Resig.
 *
 * Released under the MIT license by Ole Laursen, October 2009.
 *
 * Examples:
 *
 *   $.color.parse("#fff").scale('rgb', 0.25).add('a', -0.5).toString()
 *   var c = $.color.extract($("#mydiv"), 'background-color');
 *   console.log(c.r, c.g, c.b, c.a);
 *   $.color.make(100, 50, 25, 0.4).toString() // returns "rgba(100,50,25,0.4)"
 *
 * Note that .scale() and .add() return the same modified object
 * instead of making a new one.
 *
 * V. 1.1: Fix error handling so e.g. parsing an empty string does
 * produce a color rather than just crashing.
 */ 
(function(B){B.color={};B.color.make=function(F,E,C,D){var G={};G.r=F||0;G.g=E||0;G.b=C||0;G.a=D!=null?D:1;G.add=function(J,I){for(var H=0;H<J.length;++H){G[J.charAt(H)]+=I}return G.normalize()};G.scale=function(J,I){for(var H=0;H<J.length;++H){G[J.charAt(H)]*=I}return G.normalize()};G.toString=function(){if(G.a>=1){return"rgb("+[G.r,G.g,G.b].join(",")+")"}else{return"rgba("+[G.r,G.g,G.b,G.a].join(",")+")"}};G.normalize=function(){function H(J,K,I){return K<J?J:(K>I?I:K)}G.r=H(0,parseInt(G.r),255);G.g=H(0,parseInt(G.g),255);G.b=H(0,parseInt(G.b),255);G.a=H(0,G.a,1);return G};G.clone=function(){return B.color.make(G.r,G.b,G.g,G.a)};return G.normalize()};B.color.extract=function(D,C){var E;do{E=D.css(C).toLowerCase();if(E!=""&&E!="transparent"){break}D=D.parent()}while(!B.nodeName(D.get(0),"body"));if(E=="rgba(0, 0, 0, 0)"){E="transparent"}return B.color.parse(E)};B.color.parse=function(F){var E,C=B.color.make;if(E=/rgb\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*\)/.exec(F)){return C(parseInt(E[1],10),parseInt(E[2],10),parseInt(E[3],10))}if(E=/rgba\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]+(?:\.[0-9]+)?)\s*\)/.exec(F)){return C(parseInt(E[1],10),parseInt(E[2],10),parseInt(E[3],10),parseFloat(E[4]))}if(E=/rgb\(\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*\)/.exec(F)){return C(parseFloat(E[1])*2.55,parseFloat(E[2])*2.55,parseFloat(E[3])*2.55)}if(E=/rgba\(\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\s*\)/.exec(F)){return C(parseFloat(E[1])*2.55,parseFloat(E[2])*2.55,parseFloat(E[3])*2.55,parseFloat(E[4]))}if(E=/#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec(F)){return C(parseInt(E[1],16),parseInt(E[2],16),parseInt(E[3],16))}if(E=/#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/.exec(F)){return C(parseInt(E[1]+E[1],16),parseInt(E[2]+E[2],16),parseInt(E[3]+E[3],16))}var D=B.trim(F).toLowerCase();if(D=="transparent"){return C(255,255,255,0)}else{E=A[D]||[0,0,0];return C(E[0],E[1],E[2])}};var A={aqua:[0,255,255],azure:[240,255,255],beige:[245,245,220],black:[0,0,0],blue:[0,0,255],brown:[165,42,42],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgrey:[169,169,169],darkgreen:[0,100,0],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkviolet:[148,0,211],fuchsia:[255,0,255],gold:[255,215,0],green:[0,128,0],indigo:[75,0,130],khaki:[240,230,140],lightblue:[173,216,230],lightcyan:[224,255,255],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightyellow:[255,255,224],lime:[0,255,0],magenta:[255,0,255],maroon:[128,0,0],navy:[0,0,128],olive:[128,128,0],orange:[255,165,0],pink:[255,192,203],purple:[128,0,128],violet:[128,0,128],red:[255,0,0],silver:[192,192,192],white:[255,255,255],yellow:[255,255,0]}})(jQuery);

// the actual Flot code
(function($) {
    function Plot(placeholder, data_, options_, plugins) {
        // data is on the form:
        //   [ series1, series2 ... ]
        // where series is either just the data as [ [x1, y1], [x2, y2], ... ]
        // or { data: [ [x1, y1], [x2, y2], ... ], label: "some label", ... }
        
        var series = [],
            options = {
                // the color theme used for graphs
                colors: ["#edc240", "#afd8f8", "#cb4b4b", "#4da74d", "#9440ed"],
                legend: {
                    show: true,
                    noColumns: 1, // number of colums in legend table
                    labelFormatter: null, // fn: string -> string
                    labelBoxBorderColor: "#ccc", // border color for the little label boxes
                    container: null, // container (as jQuery object) to put legend in, null means default on top of graph
                    position: "ne", // position of default legend container within plot
                    margin: 5, // distance from grid edge to default legend container within plot
                    backgroundColor: null, // null means auto-detect
                    backgroundOpacity: 0.85 // set to 0 to avoid background
                },
                xaxis: {
                    show: null, // null = auto-detect, true = always, false = never
                    position: "bottom", // or "top"
                    mode: null, // null or "time"
                    font: null, // null (derived from CSS in placeholder) or object like { size: 11, style: "italic", weight: "bold", family: "sans-serif", variant: "small-caps" }
                    color: null, // base color, labels, ticks
                    tickColor: null, // possibly different color of ticks, e.g. "rgba(0,0,0,0.15)"
                    transform: null, // null or f: number -> number to transform axis
                    inverseTransform: null, // if transform is set, this should be the inverse function
                    min: null, // min. value to show, null means set automatically
                    max: null, // max. value to show, null means set automatically
                    autoscaleMargin: null, // margin in % to add if auto-setting min/max
                    ticks: null, // either [1, 3] or [[1, "a"], 3] or (fn: axis info -> ticks) or app. number of ticks for auto-ticks
                    tickFormatter: null, // fn: number -> string
                    labelWidth: null, // size of tick labels in pixels
                    labelHeight: null,
                    reserveSpace: null, // whether to reserve space even if axis isn't shown
                    tickLength: null, // size in pixels of ticks, or "full" for whole line
                    alignTicksWithAxis: null, // axis number or null for no sync
                    
                    // mode specific options
                    tickDecimals: null, // no. of decimals, null means auto
                    tickSize: null, // number or [number, "unit"]
                    minTickSize: null, // number or [number, "unit"]
                    monthNames: null, // list of names of months
                    timeformat: null, // format string to use
                    twelveHourClock: false // 12 or 24 time in time mode
                },
                yaxis: {
                    autoscaleMargin: 0.02,
                    position: "left" // or "right"
                },
                xaxes: [],
                yaxes: [],
                series: {
                    points: {
                        show: false,
                        radius: 3,
                        lineWidth: 2, // in pixels
                        fill: true,
                        fillColor: "#ffffff",
                        symbol: "circle" // or callback
                    },
                    lines: {
                        // we don't put in show: false so we can see
                        // whether lines were actively disabled 
                        lineWidth: 2, // in pixels
                        fill: false,
                        fillColor: null,
                        steps: false
                    },
                    bars: {
                        show: false,
                        lineWidth: 2, // in pixels
                        barWidth: 1, // in units of the x axis
                        fill: true,
                        fillColor: null,
                        align: "left", // "left", "right", or "center"
                        horizontal: false
                    },
                    shadowSize: 3
                },
                grid: {
                    show: true,
                    aboveData: false,
                    color: "#545454", // primary color used for outline and labels
                    backgroundColor: null, // null for transparent, else color
                    borderColor: null, // set if different from the grid color
                    tickColor: null, // color for the ticks, e.g. "rgba(0,0,0,0.15)"
                    margin: 0, // distance from the canvas edge to the grid
                    labelMargin: 5, // in pixels
                    axisMargin: 8, // in pixels
                    borderWidth: 2, // in pixels
                    minBorderMargin: null, // in pixels, null means taken from points radius
                    markings: null, // array of ranges or fn: axes -> array of ranges
                    markingsColor: "#f4f4f4",
                    markingsLineWidth: 2,
                    // interactive stuff
                    clickable: false,
                    hoverable: false,
                    autoHighlight: true, // highlight in case mouse is near
                    mouseActiveRadius: 10 // how far the mouse can be away to activate an item
                },
                interaction: {
                    redrawOverlayInterval: 1000/60 // time between updates, -1 means in same flow
                },
                hooks: {}
            },
        canvas = null,      // the canvas for the plot itself
        overlay = null,     // canvas for interactive stuff on top of plot
        eventHolder = null, // jQuery object that events should be bound to
        ctx = null, octx = null,
        xaxes = [], yaxes = [],
        plotOffset = { left: 0, right: 0, top: 0, bottom: 0},
        canvasWidth = 0, canvasHeight = 0,
        plotWidth = 0, plotHeight = 0,
        hooks = {
            processOptions: [],
            processRawData: [],
            processDatapoints: [],
            processOffset: [],
            drawBackground: [],
            drawSeries: [],
            draw: [],
            bindEvents: [],
            drawOverlay: [],
            shutdown: []
        },
        plot = this;

        // public functions
        plot.setData = setData;
        plot.setupGrid = setupGrid;
        plot.draw = draw;
        plot.getPlaceholder = function() { return placeholder; };
        plot.getCanvas = function() { return canvas; };
        plot.getPlotOffset = function() { return plotOffset; };
        plot.width = function () { return plotWidth; };
        plot.height = function () { return plotHeight; };
        plot.offset = function () {
            var o = eventHolder.offset();
            o.left += plotOffset.left;
            o.top += plotOffset.top;
            return o;
        };
        plot.getData = function () { return series; };
        plot.getAxes = function () {
            var res = {}, i;
            $.each(xaxes.concat(yaxes), function (_, axis) {
                if (axis)
                    res[axis.direction + (axis.n != 1 ? axis.n : "") + "axis"] = axis;
            });
            return res;
        };
        plot.getXAxes = function () { return xaxes; };
        plot.getYAxes = function () { return yaxes; };
        plot.c2p = canvasToAxisCoords;
        plot.p2c = axisToCanvasCoords;
        plot.getOptions = function () { return options; };
        plot.highlight = highlight;
        plot.unhighlight = unhighlight;
        plot.triggerRedrawOverlay = triggerRedrawOverlay;
        plot.pointOffset = function(point) {
            return {
                left: parseInt(xaxes[axisNumber(point, "x") - 1].p2c(+point.x) + plotOffset.left),
                top: parseInt(yaxes[axisNumber(point, "y") - 1].p2c(+point.y) + plotOffset.top)
            };
        };
        plot.shutdown = shutdown;
        plot.resize = function () {
            getCanvasDimensions();
            resizeCanvas(canvas);
            resizeCanvas(overlay);
        };

        // public attributes
        plot.hooks = hooks;
        
        // initialize
        initPlugins(plot);
        parseOptions(options_);
        setupCanvases();
        setData(data_);
        setupGrid();
        draw();
        bindEvents();


        function executeHooks(hook, args) {
            args = [plot].concat(args);
            for (var i = 0; i < hook.length; ++i)
                hook[i].apply(this, args);
        }

        function initPlugins() {
            for (var i = 0; i < plugins.length; ++i) {
                var p = plugins[i];
                p.init(plot);
                if (p.options)
                    $.extend(true, options, p.options);
            }
        }
        
        function parseOptions(opts) {
            var i;
            
            $.extend(true, options, opts);
            
            if (options.xaxis.color == null)
                options.xaxis.color = options.grid.color;
            if (options.yaxis.color == null)
                options.yaxis.color = options.grid.color;
            
            if (options.xaxis.tickColor == null) // backwards-compatibility
                options.xaxis.tickColor = options.grid.tickColor;
            if (options.yaxis.tickColor == null) // backwards-compatibility
                options.yaxis.tickColor = options.grid.tickColor;

            if (options.grid.borderColor == null)
                options.grid.borderColor = options.grid.color;
            if (options.grid.tickColor == null)
                options.grid.tickColor = $.color.parse(options.grid.color).scale('a', 0.22).toString();
            
            // fill in defaults in axes, copy at least always the
            // first as the rest of the code assumes it'll be there
            for (i = 0; i < Math.max(1, options.xaxes.length); ++i)
                options.xaxes[i] = $.extend(true, {}, options.xaxis, options.xaxes[i]);
            for (i = 0; i < Math.max(1, options.yaxes.length); ++i)
                options.yaxes[i] = $.extend(true, {}, options.yaxis, options.yaxes[i]);

            // backwards compatibility, to be removed in future
            if (options.xaxis.noTicks && options.xaxis.ticks == null)
                options.xaxis.ticks = options.xaxis.noTicks;
            if (options.yaxis.noTicks && options.yaxis.ticks == null)
                options.yaxis.ticks = options.yaxis.noTicks;
            if (options.x2axis) {
                options.xaxes[1] = $.extend(true, {}, options.xaxis, options.x2axis);
                options.xaxes[1].position = "top";
            }
            if (options.y2axis) {
                options.yaxes[1] = $.extend(true, {}, options.yaxis, options.y2axis);
                options.yaxes[1].position = "right";
            }
            if (options.grid.coloredAreas)
                options.grid.markings = options.grid.coloredAreas;
            if (options.grid.coloredAreasColor)
                options.grid.markingsColor = options.grid.coloredAreasColor;
            if (options.lines)
                $.extend(true, options.series.lines, options.lines);
            if (options.points)
                $.extend(true, options.series.points, options.points);
            if (options.bars)
                $.extend(true, options.series.bars, options.bars);
            if (options.shadowSize != null)
                options.series.shadowSize = options.shadowSize;

            // save options on axes for future reference
            for (i = 0; i < options.xaxes.length; ++i)
                getOrCreateAxis(xaxes, i + 1).options = options.xaxes[i];
            for (i = 0; i < options.yaxes.length; ++i)
                getOrCreateAxis(yaxes, i + 1).options = options.yaxes[i];

            // add hooks from options
            for (var n in hooks)
                if (options.hooks[n] && options.hooks[n].length)
                    hooks[n] = hooks[n].concat(options.hooks[n]);

            executeHooks(hooks.processOptions, [options]);
        }

        function setData(d) {
            series = parseData(d);
            fillInSeriesOptions();
            processData();
        }
        
        function parseData(d) {
            var res = [];
            for (var i = 0; i < d.length; ++i) {
                var s = $.extend(true, {}, options.series);

                if (d[i].data != null) {
                    s.data = d[i].data; // move the data instead of deep-copy
                    delete d[i].data;

                    $.extend(true, s, d[i]);

                    d[i].data = s.data;
                }
                else
                    s.data = d[i];
                res.push(s);
            }

            return res;
        }
        
        function axisNumber(obj, coord) {
            var a = obj[coord + "axis"];
            if (typeof a == "object") // if we got a real axis, extract number
                a = a.n;
            if (typeof a != "number")
                a = 1; // default to first axis
            return a;
        }

        function allAxes() {
            // return flat array without annoying null entries
            return $.grep(xaxes.concat(yaxes), function (a) { return a; });
        }
        
        function canvasToAxisCoords(pos) {
            // return an object with x/y corresponding to all used axes 
            var res = {}, i, axis;
            for (i = 0; i < xaxes.length; ++i) {
                axis = xaxes[i];
                if (axis && axis.used)
                    res["x" + axis.n] = axis.c2p(pos.left);
            }

            for (i = 0; i < yaxes.length; ++i) {
                axis = yaxes[i];
                if (axis && axis.used)
                    res["y" + axis.n] = axis.c2p(pos.top);
            }
            
            if (res.x1 !== undefined)
                res.x = res.x1;
            if (res.y1 !== undefined)
                res.y = res.y1;

            return res;
        }
        
        function axisToCanvasCoords(pos) {
            // get canvas coords from the first pair of x/y found in pos
            var res = {}, i, axis, key;

            for (i = 0; i < xaxes.length; ++i) {
                axis = xaxes[i];
                if (axis && axis.used) {
                    key = "x" + axis.n;
                    if (pos[key] == null && axis.n == 1)
                        key = "x";

                    if (pos[key] != null) {
                        res.left = axis.p2c(pos[key]);
                        break;
                    }
                }
            }
            
            for (i = 0; i < yaxes.length; ++i) {
                axis = yaxes[i];
                if (axis && axis.used) {
                    key = "y" + axis.n;
                    if (pos[key] == null && axis.n == 1)
                        key = "y";

                    if (pos[key] != null) {
                        res.top = axis.p2c(pos[key]);
                        break;
                    }
                }
            }
            
            return res;
        }
        
        function getOrCreateAxis(axes, number) {
            if (!axes[number - 1])
                axes[number - 1] = {
                    n: number, // save the number for future reference
                    direction: axes == xaxes ? "x" : "y",
                    options: $.extend(true, {}, axes == xaxes ? options.xaxis : options.yaxis)
                };
                
            return axes[number - 1];
        }

        function fillInSeriesOptions() {
            var i;
            
            // collect what we already got of colors
            var neededColors = series.length,
                usedColors = [],
                assignedColors = [];
            for (i = 0; i < series.length; ++i) {
                var sc = series[i].color;
                if (sc != null) {
                    --neededColors;
                    if (typeof sc == "number")
                        assignedColors.push(sc);
                    else
                        usedColors.push($.color.parse(series[i].color));
                }
            }
            
            // we might need to generate more colors if higher indices
            // are assigned
            for (i = 0; i < assignedColors.length; ++i) {
                neededColors = Math.max(neededColors, assignedColors[i] + 1);
            }

            // produce colors as needed
            var colors = [], variation = 0;
            i = 0;
            while (colors.length < neededColors) {
                var c;
                if (options.colors.length == i) // check degenerate case
                    c = $.color.make(100, 100, 100);
                else
                    c = $.color.parse(options.colors[i]);

                // vary color if needed
                var sign = variation % 2 == 1 ? -1 : 1;
                c.scale('rgb', 1 + sign * Math.ceil(variation / 2) * 0.2);

                // FIXME: if we're getting to close to something else,
                // we should probably skip this one
                colors.push(c);
                
                ++i;
                if (i >= options.colors.length) {
                    i = 0;
                    ++variation;
                }
            }

            // fill in the options
            var colori = 0, s;
            for (i = 0; i < series.length; ++i) {
                s = series[i];
                
                // assign colors
                if (s.color == null) {
                    s.color = colors[colori].toString();
                    ++colori;
                }
                else if (typeof s.color == "number")
                    s.color = colors[s.color].toString();

                // turn on lines automatically in case nothing is set
                if (s.lines.show == null) {
                    var v, show = true;
                    for (v in s)
                        if (s[v] && s[v].show) {
                            show = false;
                            break;
                        }
                    if (show)
                        s.lines.show = true;
                }

                // setup axes
                s.xaxis = getOrCreateAxis(xaxes, axisNumber(s, "x"));
                s.yaxis = getOrCreateAxis(yaxes, axisNumber(s, "y"));
            }
        }
        
        function processData() {
            var topSentry = Number.POSITIVE_INFINITY,
                bottomSentry = Number.NEGATIVE_INFINITY,
                fakeInfinity = Number.MAX_VALUE,
                i, j, k, m, length,
                s, points, ps, x, y, axis, val, f, p;

            function updateAxis(axis, min, max) {
                if (min < axis.datamin && min != -fakeInfinity)
                    axis.datamin = min;
                if (max > axis.datamax && max != fakeInfinity)
                    axis.datamax = max;
            }

            $.each(allAxes(), function (_, axis) {
                // init axis
                axis.datamin = topSentry;
                axis.datamax = bottomSentry;
                axis.used = false;
            });

            for (i = 0; i < series.length; ++i) {
                s = series[i];
                s.datapoints = { points: [] };
                
                executeHooks(hooks.processRawData, [ s, s.data, s.datapoints ]);
            }
            
            // first pass: clean and copy data
            for (i = 0; i < series.length; ++i) {
                s = series[i];

                var data = s.data, format = s.datapoints.format;

                if (!format) {
                    format = [];
                    // find out how to copy
                    format.push({ x: true, number: true, required: true });
                    format.push({ y: true, number: true, required: true });

                    if (s.bars.show || (s.lines.show && s.lines.fill)) {
                        format.push({ y: true, number: true, required: false, defaultValue: 0 });
                        if (s.bars.horizontal) {
                            delete format[format.length - 1].y;
                            format[format.length - 1].x = true;
                        }
                    }
                    
                    s.datapoints.format = format;
                }

                if (s.datapoints.pointsize != null)
                    continue; // already filled in

                s.datapoints.pointsize = format.length;
                
                ps = s.datapoints.pointsize;
                points = s.datapoints.points;

                insertSteps = s.lines.show && s.lines.steps;
                s.xaxis.used = s.yaxis.used = true;
                
                for (j = k = 0; j < data.length; ++j, k += ps) {
                    p = data[j];

                    var nullify = p == null;
                    if (!nullify) {
                        for (m = 0; m < ps; ++m) {
                            val = p[m];
                            f = format[m];

                            if (f) {
                                if (f.number && val != null) {
                                    val = +val; // convert to number
                                    if (isNaN(val))
                                        val = null;
                                    else if (val == Infinity)
                                        val = fakeInfinity;
                                    else if (val == -Infinity)
                                        val = -fakeInfinity;
                                }

                                if (val == null) {
                                    if (f.required)
                                        nullify = true;
                                    
                                    if (f.defaultValue != null)
                                        val = f.defaultValue;
                                }
                            }
                            
                            points[k + m] = val;
                        }
                    }
                    
                    if (nullify) {
                        for (m = 0; m < ps; ++m) {
                            val = points[k + m];
                            if (val != null) {
                                f = format[m];
                                // extract min/max info
                                if (f.x)
                                    updateAxis(s.xaxis, val, val);
                                if (f.y)
                                    updateAxis(s.yaxis, val, val);
                            }
                            points[k + m] = null;
                        }
                    }
                    else {
                        // a little bit of line specific stuff that
                        // perhaps shouldn't be here, but lacking
                        // better means...
                        if (insertSteps && k > 0
                            && points[k - ps] != null
                            && points[k - ps] != points[k]
                            && points[k - ps + 1] != points[k + 1]) {
                            // copy the point to make room for a middle point
                            for (m = 0; m < ps; ++m)
                                points[k + ps + m] = points[k + m];

                            // middle point has same y
                            points[k + 1] = points[k - ps + 1];

                            // we've added a point, better reflect that
                            k += ps;
                        }
                    }
                }
            }
            
            // give the hooks a chance to run
            for (i = 0; i < series.length; ++i) {
                s = series[i];
                
                executeHooks(hooks.processDatapoints, [ s, s.datapoints]);
            }

            // second pass: find datamax/datamin for auto-scaling
            for (i = 0; i < series.length; ++i) {
                s = series[i];
                points = s.datapoints.points,
                ps = s.datapoints.pointsize;
                format = s.datapoints.format;

                var xmin = topSentry, ymin = topSentry,
                    xmax = bottomSentry, ymax = bottomSentry;
                
                for (j = 0; j < points.length; j += ps) {
                    if (points[j] == null)
                        continue;

                    for (m = 0; m < ps; ++m) {
                        val = points[j + m];
                        f = format[m];
                        if (!f || val == fakeInfinity || val == -fakeInfinity)
                            continue;
                        
                        if (f.x) {
                            if (val < xmin)
                                xmin = val;
                            if (val > xmax)
                                xmax = val;
                        }
                        if (f.y) {
                            if (val < ymin)
                                ymin = val;
                            if (val > ymax)
                                ymax = val;
                        }
                    }
                }

                if (s.bars.show) {
                    // make sure we got room for the bar on the dancing floor
                    var delta;

                    switch (s.bars.align) {
                        case "left":
                            delta = 0;
                            break;
                        case "right":
                            delta = -s.bars.barWidth;
                            break;
                        case "center":
                            delta = -s.bars.barWidth / 2;
                            break;
                        default:
                            throw new Error("Invalid bar alignment: " + s.bars.align);
                    }

                    if (s.bars.horizontal) {
                        ymin += delta;
                        ymax += delta + s.bars.barWidth;
                    }
                    else {
                        xmin += delta;
                        xmax += delta + s.bars.barWidth;
                    }
                }
                
                updateAxis(s.xaxis, xmin, xmax);
                updateAxis(s.yaxis, ymin, ymax);
            }

            $.each(allAxes(), function (_, axis) {
                if (axis.datamin == topSentry)
                    axis.datamin = null;
                if (axis.datamax == bottomSentry)
                    axis.datamax = null;
            });
        }

        function makeCanvas(skipPositioning, cls) {
            var c = document.createElement('canvas');
            c.className = cls;
            c.width = canvasWidth;
            c.height = canvasHeight;
                    
            if (!skipPositioning)
                $(c).css({ position: 'absolute', left: 0, top: 0 });
                
            $(c).appendTo(placeholder);
                
            if (!c.getContext) // excanvas hack
                c = window.G_vmlCanvasManager.initElement(c);

            // used for resetting in case we get replotted
            c.getContext("2d").save();
            
            return c;
        }

        function getCanvasDimensions() {
            canvasWidth = placeholder.width();
            canvasHeight = placeholder.height();
            
            if (canvasWidth <= 0 || canvasHeight <= 0)
                throw new Error("Invalid dimensions for plot, width = " + canvasWidth + ", height = " + canvasHeight);
        }

        function resizeCanvas(c) {
            // resizing should reset the state (excanvas seems to be
            // buggy though)
            if (c.width != canvasWidth)
                c.width = canvasWidth;

            if (c.height != canvasHeight)
                c.height = canvasHeight;

            // so try to get back to the initial state (even if it's
            // gone now, this should be safe according to the spec)
            var cctx = c.getContext("2d");
            cctx.restore();

            // and save again
            cctx.save();
        }
        
        function setupCanvases() {
            var reused,
                existingCanvas = placeholder.children("canvas.flot-base"),
                existingOverlay = placeholder.children("canvas.flot-overlay");

            if (existingCanvas.length == 0 || existingOverlay == 0) {
                // init everything
                
                placeholder.html(""); // make sure placeholder is clear
            
                placeholder.css({ padding: 0 }); // padding messes up the positioning
                
                if (placeholder.css("position") == 'static')
                    placeholder.css("position", "relative"); // for positioning labels and overlay

                getCanvasDimensions();
                
                canvas = makeCanvas(true, "flot-base");
                overlay = makeCanvas(false, "flot-overlay"); // overlay canvas for interactive features

                reused = false;
            }
            else {
                // reuse existing elements

                canvas = existingCanvas.get(0);
                overlay = existingOverlay.get(0);

                reused = true;
            }

            ctx = canvas.getContext("2d");
            octx = overlay.getContext("2d");

            // define which element we're listening for events on
            eventHolder = $(overlay);

            if (reused) {
                // run shutdown in the old plot object
                placeholder.data("plot").shutdown();

                // reset reused canvases
                plot.resize();
                
                // make sure overlay pixels are cleared (canvas is cleared when we redraw)
                octx.clearRect(0, 0, canvasWidth, canvasHeight);
                
                // then whack any remaining obvious garbage left
                eventHolder.unbind();
                placeholder.children().not([canvas, overlay]).remove();
            }

            // save in case we get replotted
            placeholder.data("plot", plot);
        }

        function bindEvents() {
            // bind events
            if (options.grid.hoverable) {
                eventHolder.mousemove(onMouseMove);
                eventHolder.mouseleave(onMouseLeave);
            }

            if (options.grid.clickable)
                eventHolder.click(onClick);

            executeHooks(hooks.bindEvents, [eventHolder]);
        }

        function shutdown() {
            if (redrawTimeout)
                clearTimeout(redrawTimeout);
            
            eventHolder.unbind("mousemove", onMouseMove);
            eventHolder.unbind("mouseleave", onMouseLeave);
            eventHolder.unbind("click", onClick);
            
            executeHooks(hooks.shutdown, [eventHolder]);
        }

        function setTransformationHelpers(axis) {
            // set helper functions on the axis, assumes plot area
            // has been computed already
            
            function identity(x) { return x; }
            
            var s, m, t = axis.options.transform || identity,
                it = axis.options.inverseTransform;
            
            // precompute how much the axis is scaling a point
            // in canvas space
            if (axis.direction == "x") {
                s = axis.scale = plotWidth / Math.abs(t(axis.max) - t(axis.min));
                m = Math.min(t(axis.max), t(axis.min));
            }
            else {
                s = axis.scale = plotHeight / Math.abs(t(axis.max) - t(axis.min));
                s = -s;
                m = Math.max(t(axis.max), t(axis.min));
            }

            // data point to canvas coordinate
            if (t == identity) // slight optimization
                axis.p2c = function (p) { return (p - m) * s; };
            else
                axis.p2c = function (p) { return (t(p) - m) * s; };
            // canvas coordinate to data point
            if (!it)
                axis.c2p = function (c) { return m + c / s; };
            else
                axis.c2p = function (c) { return it(m + c / s); };
        }

        function measureTickLabels(axis) {
            var opts = axis.options, ticks = axis.ticks || [],
                axisw = opts.labelWidth || 0, axish = opts.labelHeight || 0,
                f = axis.font;

            ctx.save();
            ctx.font = f.style + " " + f.variant + " " + f.weight + " " + f.size + "px '" + f.family + "'";

            for (var i = 0; i < ticks.length; ++i) {
                var t = ticks[i];
                
                t.lines = [];
                t.width = t.height = 0;

                if (!t.label)
                    continue;

                // accept various kinds of newlines, including HTML ones
                // (you can actually split directly on regexps in Javascript,
                // but IE is unfortunately broken)
                var lines = t.label.replace(/<br ?\/?>|\r\n|\r/g, "\n").split("\n");
                for (var j = 0; j < lines.length; ++j) {
                    var line = { text: lines[j] },
                        m = ctx.measureText(line.text);
                    
                    line.width = m.width;
                    // m.height might not be defined, not in the
                    // standard yet
                    line.height = m.height != null ? m.height : f.size;

                    // add a bit of margin since font rendering is
                    // not pixel perfect and cut off letters look
                    // bad, this also doubles as spacing between
                    // lines
                    line.height += Math.round(f.size * 0.15);

                    t.width = Math.max(line.width, t.width);
                    t.height += line.height;

                    t.lines.push(line);
                }

                if (opts.labelWidth == null)
                    axisw = Math.max(axisw, t.width);
                if (opts.labelHeight == null)
                    axish = Math.max(axish, t.height);
            }
            ctx.restore();

            axis.labelWidth = Math.ceil(axisw);
            axis.labelHeight = Math.ceil(axish);
        }

        function allocateAxisBoxFirstPhase(axis) {
            // find the bounding box of the axis by looking at label
            // widths/heights and ticks, make room by diminishing the
            // plotOffset; this first phase only looks at one
            // dimension per axis, the other dimension depends on the
            // other axes so will have to wait

            var lw = axis.labelWidth,
                lh = axis.labelHeight,
                pos = axis.options.position,
                tickLength = axis.options.tickLength,
                axisMargin = options.grid.axisMargin,
                padding = options.grid.labelMargin,
                all = axis.direction == "x" ? xaxes : yaxes,
                index;

            // determine axis margin
            var samePosition = $.grep(all, function (a) {
                return a && a.options.position == pos && a.reserveSpace;
            });
            if ($.inArray(axis, samePosition) == samePosition.length - 1)
                axisMargin = 0; // outermost

            // determine tick length - if we're innermost, we can use "full"
            if (tickLength == null) {
                var sameDirection = $.grep(all, function (a) {
                    return a && a.reserveSpace;
                });
                
                var innermost = $.inArray(axis, sameDirection) == 0;
                if (innermost)
                    tickLength = "full";
                else
                    tickLength = 5;
            }
            
            if (!isNaN(+tickLength))
                padding += +tickLength;

            // compute box
            if (axis.direction == "x") {
                lh += padding;
                
                if (pos == "bottom") {
                    plotOffset.bottom += lh + axisMargin;
                    axis.box = { top: canvasHeight - plotOffset.bottom, height: lh };
                }
                else {
                    axis.box = { top: plotOffset.top + axisMargin, height: lh };
                    plotOffset.top += lh + axisMargin;
                }
            }
            else {
                lw += padding;
                
                if (pos == "left") {
                    axis.box = { left: plotOffset.left + axisMargin, width: lw };
                    plotOffset.left += lw + axisMargin;
                }
                else {
                    plotOffset.right += lw + axisMargin;
                    axis.box = { left: canvasWidth - plotOffset.right, width: lw };
                }
            }

             // save for future reference
            axis.position = pos;
            axis.tickLength = tickLength;
            axis.box.padding = padding;
            axis.innermost = innermost;
        }

        function allocateAxisBoxSecondPhase(axis) {
            // now that all axis boxes have been placed in one
            // dimension, we can set the remaining dimension coordinates
            if (axis.direction == "x") {
                axis.box.left = plotOffset.left - axis.labelWidth / 2;
                axis.box.width = canvasWidth - plotOffset.left - plotOffset.right + axis.labelWidth;
            }
            else {
                axis.box.top = plotOffset.top - axis.labelHeight / 2;
                axis.box.height = canvasHeight - plotOffset.bottom - plotOffset.top + axis.labelHeight;
            }
        }

        function adjustLayoutForThingsStickingOut() {
            // possibly adjust plot offset to ensure everything stays
            // inside the canvas and isn't clipped off
            
            var minMargin = options.grid.minBorderMargin,
                margins = { x: 0, y: 0 }, i, axis;

            // check stuff from the plot (FIXME: this should just read
            // a value from the series, otherwise it's impossible to
            // customize)
            if (minMargin == null) {
                minMargin = 0;
                for (i = 0; i < series.length; ++i)
                    minMargin = Math.max(minMargin, 2 * (series[i].points.radius + series[i].points.lineWidth/2));
            }

            margins.x = margins.y = Math.ceil(minMargin);
            
            // check axis labels, note we don't check the actual
            // labels but instead use the overall width/height to not
            // jump as much around with replots
            $.each(allAxes(), function (_, axis) {
                var dir = axis.direction;
                if (axis.reserveSpace)
                    margins[dir] = Math.ceil(Math.max(margins[dir], (dir == "x" ? axis.labelWidth : axis.labelHeight) / 2));
            });

            plotOffset.left = Math.max(margins.x, plotOffset.left);
            plotOffset.right = Math.max(margins.x, plotOffset.right);
            plotOffset.top = Math.max(margins.y, plotOffset.top);
            plotOffset.bottom = Math.max(margins.y, plotOffset.bottom);
        }
        
        function setupGrid() {
            var i, axes = allAxes(), showGrid = options.grid.show;

            // Initialize the plot's offset from the edge of the canvas

            for (var a in plotOffset) {
                var margin = options.grid.margin || 0;
                plotOffset[a] = typeof margin == "number" ? margin : margin[a] || 0;
            }

            executeHooks(hooks.processOffset, [plotOffset]);

            // If the grid is visible, add its border width to the offset

            for (var a in plotOffset)
                plotOffset[a] += showGrid ? options.grid.borderWidth : 0;

            // init axes
            $.each(axes, function (_, axis) {
                axis.show = axis.options.show;
                if (axis.show == null)
                    axis.show = axis.used; // by default an axis is visible if it's got data
                
                axis.reserveSpace = axis.show || axis.options.reserveSpace;

                setRange(axis);
            });

            if (showGrid) {
                // determine from the placeholder the font size ~ height of font ~ 1 em
                var fontDefaults = {
                    style: placeholder.css("font-style"),
                    size: Math.round(0.8 * (+placeholder.css("font-size").replace("px", "") || 13)),
                    variant: placeholder.css("font-variant"),
                    weight: placeholder.css("font-weight"),
                    family: placeholder.css("font-family")
                };

                var allocatedAxes = $.grep(axes, function (axis) { return axis.reserveSpace; });

                $.each(allocatedAxes, function (_, axis) {
                    // make the ticks
                    setupTickGeneration(axis);
                    setTicks(axis);
                    snapRangeToTicks(axis, axis.ticks);

                    // find labelWidth/Height for axis
                    axis.font = $.extend({}, fontDefaults, axis.options.font);
                    measureTickLabels(axis);
                });

                // with all dimensions calculated, we can compute the
                // axis bounding boxes, start from the outside
                // (reverse order)
                for (i = allocatedAxes.length - 1; i >= 0; --i)
                    allocateAxisBoxFirstPhase(allocatedAxes[i]);

                // make sure we've got enough space for things that
                // might stick out
                adjustLayoutForThingsStickingOut();

                $.each(allocatedAxes, function (_, axis) {
                    allocateAxisBoxSecondPhase(axis);
                });
            }
            
            plotWidth = canvasWidth - plotOffset.left - plotOffset.right;
            plotHeight = canvasHeight - plotOffset.bottom - plotOffset.top;

            // now we got the proper plot dimensions, we can compute the scaling
            $.each(axes, function (_, axis) {
                setTransformationHelpers(axis);
            });
            
            insertLegend();
        }
        
        function setRange(axis) {
            var opts = axis.options,
                min = +(opts.min != null ? opts.min : axis.datamin),
                max = +(opts.max != null ? opts.max : axis.datamax),
                delta = max - min;

            if (delta == 0.0) {
                // degenerate case
                var widen = max == 0 ? 1 : 0.01;

                if (opts.min == null)
                    min -= widen;
                // always widen max if we couldn't widen min to ensure we
                // don't fall into min == max which doesn't work
                if (opts.max == null || opts.min != null)
                    max += widen;
            }
            else {
                // consider autoscaling
                var margin = opts.autoscaleMargin;
                if (margin != null) {
                    if (opts.min == null) {
                        min -= delta * margin;
                        // make sure we don't go below zero if all values
                        // are positive
                        if (min < 0 && axis.datamin != null && axis.datamin >= 0)
                            min = 0;
                    }
                    if (opts.max == null) {
                        max += delta * margin;
                        if (max > 0 && axis.datamax != null && axis.datamax <= 0)
                            max = 0;
                    }
                }
            }
            axis.min = min;
            axis.max = max;
        }

        function setupTickGeneration(axis) {
            var opts = axis.options;
                
            // estimate number of ticks
            var noTicks;
            if (typeof opts.ticks == "number" && opts.ticks > 0)
                noTicks = opts.ticks;
            else
                // heuristic based on the model a*sqrt(x) fitted to
                // some data points that seemed reasonable
                noTicks = 0.3 * Math.sqrt(axis.direction == "x" ? canvasWidth : canvasHeight);

            var delta = (axis.max - axis.min) / noTicks,
                size, generator, unit, formatter, i, magn, norm;

            if (opts.mode == "time") {
                // pretty handling of time
                
                // map of app. size of time units in milliseconds
                var timeUnitSize = {
                    "second": 1000,
                    "minute": 60 * 1000,
                    "hour": 60 * 60 * 1000,
                    "day": 24 * 60 * 60 * 1000,
                    "month": 30 * 24 * 60 * 60 * 1000,
                    "year": 365.2425 * 24 * 60 * 60 * 1000
                };


                // the allowed tick sizes, after 1 year we use
                // an integer algorithm
                var spec = [
                    [1, "second"], [2, "second"], [5, "second"], [10, "second"],
                    [30, "second"], 
                    [1, "minute"], [2, "minute"], [5, "minute"], [10, "minute"],
                    [30, "minute"], 
                    [1, "hour"], [2, "hour"], [4, "hour"],
                    [8, "hour"], [12, "hour"],
                    [1, "day"], [2, "day"], [3, "day"],
                    [0.25, "month"], [0.5, "month"], [1, "month"],
                    [2, "month"], [3, "month"], [6, "month"],
                    [1, "year"]
                ];

                var minSize = 0;
                if (opts.minTickSize != null) {
                    if (typeof opts.tickSize == "number")
                        minSize = opts.tickSize;
                    else
                        minSize = opts.minTickSize[0] * timeUnitSize[opts.minTickSize[1]];
                }

                for (var i = 0; i < spec.length - 1; ++i)
                    if (delta < (spec[i][0] * timeUnitSize[spec[i][1]]
                                 + spec[i + 1][0] * timeUnitSize[spec[i + 1][1]]) / 2
                       && spec[i][0] * timeUnitSize[spec[i][1]] >= minSize)
                        break;
                size = spec[i][0];
                unit = spec[i][1];
                
                // special-case the possibility of several years
                if (unit == "year") {
                    magn = Math.pow(10, Math.floor(Math.log(delta / timeUnitSize.year) / Math.LN10));
                    norm = (delta / timeUnitSize.year) / magn;
                    if (norm < 1.5)
                        size = 1;
                    else if (norm < 3)
                        size = 2;
                    else if (norm < 7.5)
                        size = 5;
                    else
                        size = 10;

                    size *= magn;
                }

                axis.tickSize = opts.tickSize || [size, unit];
                
                generator = function(axis) {
                    var ticks = [],
                        tickSize = axis.tickSize[0], unit = axis.tickSize[1],
                        d = new Date(axis.min);
                    
                    var step = tickSize * timeUnitSize[unit];

                    if (unit == "second")
                        d.setUTCSeconds(floorInBase(d.getUTCSeconds(), tickSize));
                    if (unit == "minute")
                        d.setUTCMinutes(floorInBase(d.getUTCMinutes(), tickSize));
                    if (unit == "hour")
                        d.setUTCHours(floorInBase(d.getUTCHours(), tickSize));
                    if (unit == "month")
                        d.setUTCMonth(floorInBase(d.getUTCMonth(), tickSize));
                    if (unit == "year")
                        d.setUTCFullYear(floorInBase(d.getUTCFullYear(), tickSize));
                    
                    // reset smaller components
                    d.setUTCMilliseconds(0);
                    if (step >= timeUnitSize.minute)
                        d.setUTCSeconds(0);
                    if (step >= timeUnitSize.hour)
                        d.setUTCMinutes(0);
                    if (step >= timeUnitSize.day)
                        d.setUTCHours(0);
                    if (step >= timeUnitSize.day * 4)
                        d.setUTCDate(1);
                    if (step >= timeUnitSize.year)
                        d.setUTCMonth(0);


                    var carry = 0, v = Number.NaN, prev;
                    do {
                        prev = v;
                        v = d.getTime();
                        ticks.push(v);
                        if (unit == "month") {
                            if (tickSize < 1) {
                                // a bit complicated - we'll divide the month
                                // up but we need to take care of fractions
                                // so we don't end up in the middle of a day
                                d.setUTCDate(1);
                                var start = d.getTime();
                                d.setUTCMonth(d.getUTCMonth() + 1);
                                var end = d.getTime();
                                d.setTime(v + carry * timeUnitSize.hour + (end - start) * tickSize);
                                carry = d.getUTCHours();
                                d.setUTCHours(0);
                            }
                            else
                                d.setUTCMonth(d.getUTCMonth() + tickSize);
                        }
                        else if (unit == "year") {
                            d.setUTCFullYear(d.getUTCFullYear() + tickSize);
                        }
                        else
                            d.setTime(v + step);
                    } while (v < axis.max && v != prev);

                    return ticks;
                };

                formatter = function (v, axis) {
                    var d = new Date(v);

                    // first check global format
                    if (opts.timeformat != null)
                        return $.plot.formatDate(d, opts.timeformat, opts.monthNames);
                    
                    var t = axis.tickSize[0] * timeUnitSize[axis.tickSize[1]];
                    var span = axis.max - axis.min;
                    var suffix = (opts.twelveHourClock) ? " %p" : "";
                    
                    if (t < timeUnitSize.minute)
                        fmt = "%h:%M:%S" + suffix;
                    else if (t < timeUnitSize.day) {
                        if (span < 2 * timeUnitSize.day)
                            fmt = "%h:%M" + suffix;
                        else
                            fmt = "%b %d %h:%M" + suffix;
                    }
                    else if (t < timeUnitSize.month)
                        fmt = "%b %d";
                    else if (t < timeUnitSize.year) {
                        if (span < timeUnitSize.year)
                            fmt = "%b";
                        else
                            fmt = "%b %y";
                    }
                    else
                        fmt = "%y";
                    
                    return $.plot.formatDate(d, fmt, opts.monthNames);
                };
            }
            else {
                // pretty rounding of base-10 numbers
                var maxDec = opts.tickDecimals;
                var dec = -Math.floor(Math.log(delta) / Math.LN10);
                if (maxDec != null && dec > maxDec)
                    dec = maxDec;

                magn = Math.pow(10, -dec);
                norm = delta / magn; // norm is between 1.0 and 10.0
                
                if (norm < 1.5)
                    size = 1;
                else if (norm < 3) {
                    size = 2;
                    // special case for 2.5, requires an extra decimal
                    if (norm > 2.25 && (maxDec == null || dec + 1 <= maxDec)) {
                        size = 2.5;
                        ++dec;
                    }
                }
                else if (norm < 7.5)
                    size = 5;
                else
                    size = 10;

                size *= magn;
                
                if (opts.minTickSize != null && size < opts.minTickSize)
                    size = opts.minTickSize;

                axis.tickDecimals = Math.max(0, maxDec != null ? maxDec : dec);
                axis.tickSize = opts.tickSize || size;

                generator = function (axis) {
                    var ticks = [];

                    // spew out all possible ticks
                    var start = floorInBase(axis.min, axis.tickSize),
                        i = 0, v = Number.NaN, prev;
                    do {
                        prev = v;
                        v = start + i * axis.tickSize;
                        ticks.push(v);
                        ++i;
                    } while (v < axis.max && v != prev);
                    return ticks;
                };

                formatter = function (v, axis) {
                    return v.toFixed(axis.tickDecimals);
                };
            }

            if (opts.alignTicksWithAxis != null) {
                var otherAxis = (axis.direction == "x" ? xaxes : yaxes)[opts.alignTicksWithAxis - 1];
                if (otherAxis && otherAxis.used && otherAxis != axis) {
                    // consider snapping min/max to outermost nice ticks
                    var niceTicks = generator(axis);
                    if (niceTicks.length > 0) {
                        if (opts.min == null)
                            axis.min = Math.min(axis.min, niceTicks[0]);
                        if (opts.max == null && niceTicks.length > 1)
                            axis.max = Math.max(axis.max, niceTicks[niceTicks.length - 1]);
                    }
                    
                    generator = function (axis) {
                        // copy ticks, scaled to this axis
                        var ticks = [], v, i;
                        for (i = 0; i < otherAxis.ticks.length; ++i) {
                            v = (otherAxis.ticks[i].v - otherAxis.min) / (otherAxis.max - otherAxis.min);
                            v = axis.min + v * (axis.max - axis.min);
                            ticks.push(v);
                        }
                        return ticks;
                    };
                    
                    // we might need an extra decimal since forced
                    // ticks don't necessarily fit naturally
                    if (!axis.mode && opts.tickDecimals == null) {
                        var extraDec = Math.max(0, -Math.floor(Math.log(delta) / Math.LN10) + 1),
                            ts = generator(axis);

                        // only proceed if the tick interval rounded
                        // with an extra decimal doesn't give us a
                        // zero at end
                        if (!(ts.length > 1 && /\..*0$/.test((ts[1] - ts[0]).toFixed(extraDec))))
                            axis.tickDecimals = extraDec;
                    }
                }
            }

            axis.tickGenerator = generator;
            if ($.isFunction(opts.tickFormatter))
                axis.tickFormatter = function (v, axis) { return "" + opts.tickFormatter(v, axis); };
            else
                axis.tickFormatter = formatter;
        }
        
        function setTicks(axis) {
            var oticks = axis.options.ticks, ticks = [];
            if (oticks == null || (typeof oticks == "number" && oticks > 0))
                ticks = axis.tickGenerator(axis);
            else if (oticks) {
                if ($.isFunction(oticks))
                    // generate the ticks
                    ticks = oticks(axis);
                else
                    ticks = oticks;
            }

            // clean up/labelify the supplied ticks, copy them over
            var i, v;
            axis.ticks = [];
            for (i = 0; i < ticks.length; ++i) {
                var label = null;
                var t = ticks[i];
                if (typeof t == "object") {
                    v = +t[0];
                    if (t.length > 1)
                        label = t[1];
                }
                else
                    v = +t;
                if (label == null)
                    label = axis.tickFormatter(v, axis);
                if (!isNaN(v))
                    axis.ticks.push({ v: v, label: label });
            }
        }

        function snapRangeToTicks(axis, ticks) {
            if (axis.options.autoscaleMargin && ticks.length > 0) {
                // snap to ticks
                if (axis.options.min == null)
                    axis.min = Math.min(axis.min, ticks[0].v);
                if (axis.options.max == null && ticks.length > 1)
                    axis.max = Math.max(axis.max, ticks[ticks.length - 1].v);
            }
        }
      
        function draw() {
            ctx.clearRect(0, 0, canvasWidth, canvasHeight);

            executeHooks(hooks.drawBackground, [ctx]);

            var grid = options.grid;

            // draw background, if any
            if (grid.show && grid.backgroundColor)
                drawBackground();
            
            if (grid.show && !grid.aboveData) {
                drawGrid();
                drawAxisLabels();
            }

            for (var i = 0; i < series.length; ++i) {
                executeHooks(hooks.drawSeries, [ctx, series[i]]);
                drawSeries(series[i]);
            }

            executeHooks(hooks.draw, [ctx]);
            
            if (grid.show && grid.aboveData) {
                drawGrid();
                drawAxisLabels();
            }
        }

        function extractRange(ranges, coord) {
            var axis, from, to, key, axes = allAxes();

            for (var i = 0; i < axes.length; ++i) {
                axis = axes[i];
                if (axis.direction == coord) {
                    key = coord + axis.n + "axis";
                    if (!ranges[key] && axis.n == 1)
                        key = coord + "axis"; // support x1axis as xaxis
                    if (ranges[key]) {
                        from = ranges[key].from;
                        to = ranges[key].to;
                        break;
                    }
                }
            }

            // backwards-compat stuff - to be removed in future
            if (!ranges[key]) {
                axis = coord == "x" ? xaxes[0] : yaxes[0];
                from = ranges[coord + "1"];
                to = ranges[coord + "2"];
            }

            // auto-reverse as an added bonus
            if (from != null && to != null && from > to) {
                var tmp = from;
                from = to;
                to = tmp;
            }
            
            return { from: from, to: to, axis: axis };
        }
        
        function drawBackground() {
            ctx.save();
            ctx.translate(plotOffset.left, plotOffset.top);

            ctx.fillStyle = getColorOrGradient(options.grid.backgroundColor, plotHeight, 0, "rgba(255, 255, 255, 0)");
            ctx.fillRect(0, 0, plotWidth, plotHeight);
            ctx.restore();
        }

        function drawGrid() {
            var i;
            
            ctx.save();
            ctx.translate(plotOffset.left, plotOffset.top);

            // draw markings
            var markings = options.grid.markings;
            if (markings) {
                if ($.isFunction(markings)) {
                    var axes = plot.getAxes();
                    // xmin etc. is backwards compatibility, to be
                    // removed in the future
                    axes.xmin = axes.xaxis.min;
                    axes.xmax = axes.xaxis.max;
                    axes.ymin = axes.yaxis.min;
                    axes.ymax = axes.yaxis.max;
                    
                    markings = markings(axes);
                }

                for (i = 0; i < markings.length; ++i) {
                    var m = markings[i],
                        xrange = extractRange(m, "x"),
                        yrange = extractRange(m, "y");

                    // fill in missing
                    if (xrange.from == null)
                        xrange.from = xrange.axis.min;
                    if (xrange.to == null)
                        xrange.to = xrange.axis.max;
                    if (yrange.from == null)
                        yrange.from = yrange.axis.min;
                    if (yrange.to == null)
                        yrange.to = yrange.axis.max;

                    // clip
                    if (xrange.to < xrange.axis.min || xrange.from > xrange.axis.max ||
                        yrange.to < yrange.axis.min || yrange.from > yrange.axis.max)
                        continue;

                    xrange.from = Math.max(xrange.from, xrange.axis.min);
                    xrange.to = Math.min(xrange.to, xrange.axis.max);
                    yrange.from = Math.max(yrange.from, yrange.axis.min);
                    yrange.to = Math.min(yrange.to, yrange.axis.max);

                    if (xrange.from == xrange.to && yrange.from == yrange.to)
                        continue;

                    // then draw
                    xrange.from = xrange.axis.p2c(xrange.from);
                    xrange.to = xrange.axis.p2c(xrange.to);
                    yrange.from = yrange.axis.p2c(yrange.from);
                    yrange.to = yrange.axis.p2c(yrange.to);
                    
                    if (xrange.from == xrange.to || yrange.from == yrange.to) {
                        // draw line
                        ctx.beginPath();
                        ctx.strokeStyle = m.color || options.grid.markingsColor;
                        ctx.lineWidth = m.lineWidth || options.grid.markingsLineWidth;
                        ctx.moveTo(xrange.from, yrange.from);
                        ctx.lineTo(xrange.to, yrange.to);
                        ctx.stroke();
                    }
                    else {
                        // fill area
                        ctx.fillStyle = m.color || options.grid.markingsColor;
                        ctx.fillRect(xrange.from, yrange.to,
                                     xrange.to - xrange.from,
                                     yrange.from - yrange.to);
                    }
                }
            }
            
            // draw the ticks
            var axes = allAxes(), bw = options.grid.borderWidth;

            for (var j = 0; j < axes.length; ++j) {
                var axis = axes[j], box = axis.box,
                    t = axis.tickLength, x, y, xoff, yoff;
                if (!axis.show || axis.ticks.length == 0)
                    continue;
                
                ctx.strokeStyle = axis.options.tickColor || $.color.parse(axis.options.color).scale('a', 0.22).toString();
                ctx.lineWidth = 1;

                // find the edges
                if (axis.direction == "x") {
                    x = 0;
                    if (t == "full")
                        y = (axis.position == "top" ? 0 : plotHeight);
                    else
                        y = box.top - plotOffset.top + (axis.position == "top" ? box.height : 0);
                }
                else {
                    y = 0;
                    if (t == "full")
                        x = (axis.position == "left" ? 0 : plotWidth);
                    else
                        x = box.left - plotOffset.left + (axis.position == "left" ? box.width : 0);
                }
                
                // draw tick bar
                if (!axis.innermost) {
                    ctx.beginPath();
                    xoff = yoff = 0;
                    if (axis.direction == "x")
                        xoff = plotWidth;
                    else
                        yoff = plotHeight;
                    
                    if (ctx.lineWidth == 1) {
                        x = Math.floor(x) + 0.5;
                        y = Math.floor(y) + 0.5;
                    }

                    ctx.moveTo(x, y);
                    ctx.lineTo(x + xoff, y + yoff);
                    ctx.stroke();
                }

                // draw ticks
                ctx.beginPath();
                for (i = 0; i < axis.ticks.length; ++i) {
                    var v = axis.ticks[i].v;
                    
                    xoff = yoff = 0;

                    if (v < axis.min || v > axis.max
                        // skip those lying on the axes if we got a border
                        || (t == "full" && bw > 0
                            && (v == axis.min || v == axis.max)))
                        continue;

                    if (axis.direction == "x") {
                        x = axis.p2c(v);
                        yoff = t == "full" ? -plotHeight : t;
                        
                        if (axis.position == "top")
                            yoff = -yoff;
                    }
                    else {
                        y = axis.p2c(v);
                        xoff = t == "full" ? -plotWidth : t;
                        
                        if (axis.position == "left")
                            xoff = -xoff;
                    }

                    if (ctx.lineWidth == 1) {
                        if (axis.direction == "x")
                            x = Math.floor(x) + 0.5;
                        else
                            y = Math.floor(y) + 0.5;
                    }

                    ctx.moveTo(x, y);
                    ctx.lineTo(x + xoff, y + yoff);
                }
                
                ctx.stroke();
            }
            
            
            // draw border
            if (bw) {
                ctx.lineWidth = bw;
                ctx.strokeStyle = options.grid.borderColor;
                ctx.strokeRect(-bw/2, -bw/2, plotWidth + bw, plotHeight + bw);
            }

            ctx.restore();
        }

        function drawAxisLabels() {
            ctx.save();

            $.each(allAxes(), function (_, axis) {
                if (!axis.show || axis.ticks.length == 0)
                    return;
                    
                var box = axis.box, f = axis.font;
                // placeholder.append('<div style="position:absolute;opacity:0.10;background-color:red;left:' + box.left + 'px;top:' + box.top + 'px;width:' + box.width +  'px;height:' + box.height + 'px"></div>') // debug

                ctx.fillStyle = axis.options.color;
                // Important: Don't use quotes around axis.font.family! Just around single 
                // font names like 'Times New Roman' that have a space or special character in it.
                ctx.font = f.style + " " + f.variant + " " + f.weight + " " + f.size + "px " + f.family;
                ctx.textAlign = "start";
                // middle align the labels - top would be more
                // natural, but browsers can differ a pixel or two in
                // where they consider the top to be, so instead we
                // middle align to minimize variation between browsers
                // and compensate when calculating the coordinates
                ctx.textBaseline = "middle";
                
                for (var i = 0; i < axis.ticks.length; ++i) {
                    var tick = axis.ticks[i];
                    if (!tick.label || tick.v < axis.min || tick.v > axis.max)
                        continue;

                    var x, y, offset = 0, line;
                    for (var k = 0; k < tick.lines.length; ++k) {
                        line = tick.lines[k];
                        
                        if (axis.direction == "x") {
                            x = plotOffset.left + axis.p2c(tick.v) - line.width/2;
                            if (axis.position == "bottom")
                                y = box.top + box.padding;
                            else
                                y = box.top + box.height - box.padding - tick.height;
                        }
                        else {
                            y = plotOffset.top + axis.p2c(tick.v) - tick.height/2;
                            if (axis.position == "left")
                                x = box.left + box.width - box.padding - line.width;
                            else
                                x = box.left + box.padding;
                        }

                        // account for middle aligning and line number
                        y += line.height/2 + offset;
                        offset += line.height;

                        if ($.browser.opera) {
                            // FIXME: UGLY BROWSER DETECTION
                            // round the coordinates since Opera
                            // otherwise switches to more ugly
                            // rendering (probably non-hinted) and
                            // offset the y coordinates since it seems
                            // to be off pretty consistently compared
                            // to the other browsers
                            x = Math.floor(x);
                            y = Math.ceil(y - 2);
                        }
                        ctx.fillText(line.text, x, y);
                    }
                }
            });

            ctx.restore();
        }

        function drawSeries(series) {
            if (series.lines.show)
                drawSeriesLines(series);
            if (series.bars.show)
                drawSeriesBars(series);
            if (series.points.show)
                drawSeriesPoints(series);
        }
        
        function drawSeriesLines(series) {
            function plotLine(datapoints, xoffset, yoffset, axisx, axisy) {
                var points = datapoints.points,
                    ps = datapoints.pointsize,
                    prevx = null, prevy = null;
                
                ctx.beginPath();
                for (var i = ps; i < points.length; i += ps) {
                    var x1 = points[i - ps], y1 = points[i - ps + 1],
                        x2 = points[i], y2 = points[i + 1];
                    
                    if (x1 == null || x2 == null)
                        continue;

                    // clip with ymin
                    if (y1 <= y2 && y1 < axisy.min) {
                        if (y2 < axisy.min)
                            continue;   // line segment is outside
                        // compute new intersection point
                        x1 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;
                        y1 = axisy.min;
                    }
                    else if (y2 <= y1 && y2 < axisy.min) {
                        if (y1 < axisy.min)
                            continue;
                        x2 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;
                        y2 = axisy.min;
                    }

                    // clip with ymax
                    if (y1 >= y2 && y1 > axisy.max) {
                        if (y2 > axisy.max)
                            continue;
                        x1 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;
                        y1 = axisy.max;
                    }
                    else if (y2 >= y1 && y2 > axisy.max) {
                        if (y1 > axisy.max)
                            continue;
                        x2 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;
                        y2 = axisy.max;
                    }

                    // clip with xmin
                    if (x1 <= x2 && x1 < axisx.min) {
                        if (x2 < axisx.min)
                            continue;
                        y1 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;
                        x1 = axisx.min;
                    }
                    else if (x2 <= x1 && x2 < axisx.min) {
                        if (x1 < axisx.min)
                            continue;
                        y2 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;
                        x2 = axisx.min;
                    }

                    // clip with xmax
                    if (x1 >= x2 && x1 > axisx.max) {
                        if (x2 > axisx.max)
                            continue;
                        y1 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;
                        x1 = axisx.max;
                    }
                    else if (x2 >= x1 && x2 > axisx.max) {
                        if (x1 > axisx.max)
                            continue;
                        y2 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;
                        x2 = axisx.max;
                    }

                    if (x1 != prevx || y1 != prevy)
                        ctx.moveTo(axisx.p2c(x1) + xoffset, axisy.p2c(y1) + yoffset);
                    
                    prevx = x2;
                    prevy = y2;
                    ctx.lineTo(axisx.p2c(x2) + xoffset, axisy.p2c(y2) + yoffset);
                }
                ctx.stroke();
            }

            function plotLineArea(datapoints, axisx, axisy) {
                var points = datapoints.points,
                    ps = datapoints.pointsize,
                    bottom = Math.min(Math.max(0, axisy.min), axisy.max),
                    i = 0, top, areaOpen = false,
                    ypos = 1, segmentStart = 0, segmentEnd = 0;

                // we process each segment in two turns, first forward
                // direction to sketch out top, then once we hit the
                // end we go backwards to sketch the bottom
                while (true) {
                    if (ps > 0 && i > points.length + ps)
                        break;

                    i += ps; // ps is negative if going backwards

                    var x1 = points[i - ps],
                        y1 = points[i - ps + ypos],
                        x2 = points[i], y2 = points[i + ypos];

                    if (areaOpen) {
                        if (ps > 0 && x1 != null && x2 == null) {
                            // at turning point
                            segmentEnd = i;
                            ps = -ps;
                            ypos = 2;
                            continue;
                        }

                        if (ps < 0 && i == segmentStart + ps) {
                            // done with the reverse sweep
                            ctx.fill();
                            areaOpen = false;
                            ps = -ps;
                            ypos = 1;
                            i = segmentStart = segmentEnd + ps;
                            continue;
                        }
                    }

                    if (x1 == null || x2 == null)
                        continue;

                    // clip x values
                    
                    // clip with xmin
                    if (x1 <= x2 && x1 < axisx.min) {
                        if (x2 < axisx.min)
                            continue;
                        y1 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;
                        x1 = axisx.min;
                    }
                    else if (x2 <= x1 && x2 < axisx.min) {
                        if (x1 < axisx.min)
                            continue;
                        y2 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;
                        x2 = axisx.min;
                    }

                    // clip with xmax
                    if (x1 >= x2 && x1 > axisx.max) {
                        if (x2 > axisx.max)
                            continue;
                        y1 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;
                        x1 = axisx.max;
                    }
                    else if (x2 >= x1 && x2 > axisx.max) {
                        if (x1 > axisx.max)
                            continue;
                        y2 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;
                        x2 = axisx.max;
                    }

                    if (!areaOpen) {
                        // open area
                        ctx.beginPath();
                        ctx.moveTo(axisx.p2c(x1), axisy.p2c(bottom));
                        areaOpen = true;
                    }
                    
                    // now first check the case where both is outside
                    if (y1 >= axisy.max && y2 >= axisy.max) {
                        ctx.lineTo(axisx.p2c(x1), axisy.p2c(axisy.max));
                        ctx.lineTo(axisx.p2c(x2), axisy.p2c(axisy.max));
                        continue;
                    }
                    else if (y1 <= axisy.min && y2 <= axisy.min) {
                        ctx.lineTo(axisx.p2c(x1), axisy.p2c(axisy.min));
                        ctx.lineTo(axisx.p2c(x2), axisy.p2c(axisy.min));
                        continue;
                    }
                    
                    // else it's a bit more complicated, there might
                    // be a flat maxed out rectangle first, then a
                    // triangular cutout or reverse; to find these
                    // keep track of the current x values
                    var x1old = x1, x2old = x2;

                    // clip the y values, without shortcutting, we
                    // go through all cases in turn
                    
                    // clip with ymin
                    if (y1 <= y2 && y1 < axisy.min && y2 >= axisy.min) {
                        x1 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;
                        y1 = axisy.min;
                    }
                    else if (y2 <= y1 && y2 < axisy.min && y1 >= axisy.min) {
                        x2 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;
                        y2 = axisy.min;
                    }

                    // clip with ymax
                    if (y1 >= y2 && y1 > axisy.max && y2 <= axisy.max) {
                        x1 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;
                        y1 = axisy.max;
                    }
                    else if (y2 >= y1 && y2 > axisy.max && y1 <= axisy.max) {
                        x2 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;
                        y2 = axisy.max;
                    }

                    // if the x value was changed we got a rectangle
                    // to fill
                    if (x1 != x1old) {
                        ctx.lineTo(axisx.p2c(x1old), axisy.p2c(y1));
                        // it goes to (x1, y1), but we fill that below
                    }
                    
                    // fill triangular section, this sometimes result
                    // in redundant points if (x1, y1) hasn't changed
                    // from previous line to, but we just ignore that
                    ctx.lineTo(axisx.p2c(x1), axisy.p2c(y1));
                    ctx.lineTo(axisx.p2c(x2), axisy.p2c(y2));

                    // fill the other rectangle if it's there
                    if (x2 != x2old) {
                        ctx.lineTo(axisx.p2c(x2), axisy.p2c(y2));
                        ctx.lineTo(axisx.p2c(x2old), axisy.p2c(y2));
                    }
                }
            }

            ctx.save();
            ctx.translate(plotOffset.left, plotOffset.top);
            ctx.lineJoin = "round";

            var lw = series.lines.lineWidth,
                sw = series.shadowSize;
            // FIXME: consider another form of shadow when filling is turned on
            if (lw > 0 && sw > 0) {
                // draw shadow as a thick and thin line with transparency
                ctx.lineWidth = sw;
                ctx.strokeStyle = "rgba(0,0,0,0.1)";
                // position shadow at angle from the mid of line
                var angle = Math.PI/18;
                plotLine(series.datapoints, Math.sin(angle) * (lw/2 + sw/2), Math.cos(angle) * (lw/2 + sw/2), series.xaxis, series.yaxis);
                ctx.lineWidth = sw/2;
                plotLine(series.datapoints, Math.sin(angle) * (lw/2 + sw/4), Math.cos(angle) * (lw/2 + sw/4), series.xaxis, series.yaxis);
            }

            ctx.lineWidth = lw;
            ctx.strokeStyle = series.color;
            var fillStyle = getFillStyle(series.lines, series.color, 0, plotHeight);
            if (fillStyle) {
                ctx.fillStyle = fillStyle;
                plotLineArea(series.datapoints, series.xaxis, series.yaxis);
            }

            if (lw > 0)
                plotLine(series.datapoints, 0, 0, series.xaxis, series.yaxis);
            ctx.restore();
        }

        function drawSeriesPoints(series) {
            function plotPoints(datapoints, radius, fillStyle, offset, shadow, axisx, axisy, symbol) {
                var points = datapoints.points, ps = datapoints.pointsize;

                for (var i = 0; i < points.length; i += ps) {
                    var x = points[i], y = points[i + 1];
                    if (x == null || x < axisx.min || x > axisx.max || y < axisy.min || y > axisy.max)
                        continue;
                    
                    ctx.beginPath();
                    x = axisx.p2c(x);
                    y = axisy.p2c(y) + offset;
                    if (symbol == "circle")
                        ctx.arc(x, y, radius, 0, shadow ? Math.PI : Math.PI * 2, false);
                    else
                        symbol(ctx, x, y, radius, shadow);
                    ctx.closePath();
                    
                    if (fillStyle) {
                        ctx.fillStyle = fillStyle;
                        ctx.fill();
                    }
                    ctx.stroke();
                }
            }
            
            ctx.save();
            ctx.translate(plotOffset.left, plotOffset.top);

            var lw = series.points.lineWidth,
                sw = series.shadowSize,
                radius = series.points.radius,
                symbol = series.points.symbol;
            if (lw > 0 && sw > 0) {
                // draw shadow in two steps
                var w = sw / 2;
                ctx.lineWidth = w;
                ctx.strokeStyle = "rgba(0,0,0,0.1)";
                plotPoints(series.datapoints, radius, null, w + w/2, true,
                           series.xaxis, series.yaxis, symbol);

                ctx.strokeStyle = "rgba(0,0,0,0.2)";
                plotPoints(series.datapoints, radius, null, w/2, true,
                           series.xaxis, series.yaxis, symbol);
            }

            ctx.lineWidth = lw;
            ctx.strokeStyle = series.color;
            plotPoints(series.datapoints, radius,
                       getFillStyle(series.points, series.color), 0, false,
                       series.xaxis, series.yaxis, symbol);
            ctx.restore();
        }

        function drawBar(x, y, b, barLeft, barRight, offset, fillStyleCallback, axisx, axisy, c, horizontal, lineWidth) {
            var left, right, bottom, top,
                drawLeft, drawRight, drawTop, drawBottom,
                tmp;

            // in horizontal mode, we start the bar from the left
            // instead of from the bottom so it appears to be
            // horizontal rather than vertical
            if (horizontal) {
                drawBottom = drawRight = drawTop = true;
                drawLeft = false;
                left = b;
                right = x;
                top = y + barLeft;
                bottom = y + barRight;

                // account for negative bars
                if (right < left) {
                    tmp = right;
                    right = left;
                    left = tmp;
                    drawLeft = true;
                    drawRight = false;
                }
            }
            else {
                drawLeft = drawRight = drawTop = true;
                drawBottom = false;
                left = x + barLeft;
                right = x + barRight;
                bottom = b;
                top = y;

                // account for negative bars
                if (top < bottom) {
                    tmp = top;
                    top = bottom;
                    bottom = tmp;
                    drawBottom = true;
                    drawTop = false;
                }
            }
           
            // clip
            if (right < axisx.min || left > axisx.max ||
                top < axisy.min || bottom > axisy.max)
                return;
            
            if (left < axisx.min) {
                left = axisx.min;
                drawLeft = false;
            }

            if (right > axisx.max) {
                right = axisx.max;
                drawRight = false;
            }

            if (bottom < axisy.min) {
                bottom = axisy.min;
                drawBottom = false;
            }
            
            if (top > axisy.max) {
                top = axisy.max;
                drawTop = false;
            }

            left = axisx.p2c(left);
            bottom = axisy.p2c(bottom);
            right = axisx.p2c(right);
            top = axisy.p2c(top);
            
            // fill the bar
            if (fillStyleCallback) {
                c.beginPath();
                c.moveTo(left, bottom);
                c.lineTo(left, top);
                c.lineTo(right, top);
                c.lineTo(right, bottom);
                c.fillStyle = fillStyleCallback(bottom, top);
                c.fill();
            }

            // draw outline
            if (lineWidth > 0 && (drawLeft || drawRight || drawTop || drawBottom)) {
                c.beginPath();

                // FIXME: inline moveTo is buggy with excanvas
                c.moveTo(left, bottom + offset);
                if (drawLeft)
                    c.lineTo(left, top + offset);
                else
                    c.moveTo(left, top + offset);
                if (drawTop)
                    c.lineTo(right, top + offset);
                else
                    c.moveTo(right, top + offset);
                if (drawRight)
                    c.lineTo(right, bottom + offset);
                else
                    c.moveTo(right, bottom + offset);
                if (drawBottom)
                    c.lineTo(left, bottom + offset);
                else
                    c.moveTo(left, bottom + offset);
                c.stroke();
            }
        }
        
        function drawSeriesBars(series) {
            function plotBars(datapoints, barLeft, barRight, offset, fillStyleCallback, axisx, axisy) {
                var points = datapoints.points, ps = datapoints.pointsize;
                
                for (var i = 0; i < points.length; i += ps) {
                    if (points[i] == null)
                        continue;
                    drawBar(points[i], points[i + 1], points[i + 2], barLeft, barRight, offset, fillStyleCallback, axisx, axisy, ctx, series.bars.horizontal, series.bars.lineWidth);
                }
            }

            ctx.save();
            ctx.translate(plotOffset.left, plotOffset.top);

            // FIXME: figure out a way to add shadows (for instance along the right edge)
            ctx.lineWidth = series.bars.lineWidth;
            ctx.strokeStyle = series.color;

            var barLeft;

            switch (series.bars.align) {
                case "left":
                    barLeft = 0;
                    break;
                case "right":
                    barLeft = -series.bars.barWidth;
                    break;
                case "center":
                    barLeft = -series.bars.barWidth / 2;
                    break;
                default:
                    throw new Error("Invalid bar alignment: " + series.bars.align);
            }

            var fillStyleCallback = series.bars.fill ? function (bottom, top) { return getFillStyle(series.bars, series.color, bottom, top); } : null;
            plotBars(series.datapoints, barLeft, barLeft + series.bars.barWidth, 0, fillStyleCallback, series.xaxis, series.yaxis);
            ctx.restore();
        }

        function getFillStyle(filloptions, seriesColor, bottom, top) {
            var fill = filloptions.fill;
            if (!fill)
                return null;

            if (filloptions.fillColor)
                return getColorOrGradient(filloptions.fillColor, bottom, top, seriesColor);
            
            var c = $.color.parse(seriesColor);
            c.a = typeof fill == "number" ? fill : 0.4;
            c.normalize();
            return c.toString();
        }
        
        function insertLegend() {
            placeholder.find(".legend").remove();

            if (!options.legend.show)
                return;
            
            var fragments = [], rowStarted = false,
                lf = options.legend.labelFormatter, s, label;
            for (var i = 0; i < series.length; ++i) {
                s = series[i];
                label = s.label;
                if (!label)
                    continue;
                
                if (i % options.legend.noColumns == 0) {
                    if (rowStarted)
                        fragments.push('</tr>');
                    fragments.push('<tr>');
                    rowStarted = true;
                }

                if (lf)
                    label = lf(label, s);
                
                fragments.push(
                    '<td class="legendColorBox"><div style="border:1px solid ' + options.legend.labelBoxBorderColor + ';padding:1px"><div style="width:4px;height:0;border:5px solid ' + s.color + ';overflow:hidden"></div></div></td>' +
                    '<td class="legendLabel">' + label + '</td>');
            }
            if (rowStarted)
                fragments.push('</tr>');
            
            if (fragments.length == 0)
                return;

            var table = '<table style="font-size:smaller;color:' + options.grid.color + '">' + fragments.join("") + '</table>';
            if (options.legend.container != null)
                $(options.legend.container).html(table);
            else {
                var pos = "",
                    p = options.legend.position,
                    m = options.legend.margin;
                if (m[0] == null)
                    m = [m, m];
                if (p.charAt(0) == "n")
                    pos += 'top:' + (m[1] + plotOffset.top) + 'px;';
                else if (p.charAt(0) == "s")
                    pos += 'bottom:' + (m[1] + plotOffset.bottom) + 'px;';
                if (p.charAt(1) == "e")
                    pos += 'right:' + (m[0] + plotOffset.right) + 'px;';
                else if (p.charAt(1) == "w")
                    pos += 'left:' + (m[0] + plotOffset.left) + 'px;';
                var legend = $('<div class="legend">' + table.replace('style="', 'style="position:absolute;' + pos +';') + '</div>').appendTo(placeholder);
                if (options.legend.backgroundOpacity != 0.0) {
                    // put in the transparent background
                    // separately to avoid blended labels and
                    // label boxes
                    var c = options.legend.backgroundColor;
                    if (c == null) {
                        c = options.grid.backgroundColor;
                        if (c && typeof c == "string")
                            c = $.color.parse(c);
                        else
                            c = $.color.extract(legend, 'background-color');
                        c.a = 1;
                        c = c.toString();
                    }
                    var div = legend.children();
                    $('<div style="position:absolute;width:' + div.width() + 'px;height:' + div.height() + 'px;' + pos +'background-color:' + c + ';"> </div>').prependTo(legend).css('opacity', options.legend.backgroundOpacity);
                }
            }
        }


        // interactive features
        
        var highlights = [],
            redrawTimeout = null;
        
        // returns the data item the mouse is over, or null if none is found
        function findNearbyItem(mouseX, mouseY, seriesFilter) {
            var maxDistance = options.grid.mouseActiveRadius,
                smallestDistance = maxDistance * maxDistance + 1,
                item = null, foundPoint = false, i, j;

            for (i = series.length - 1; i >= 0; --i) {
                if (!seriesFilter(series[i]))
                    continue;
                
                var s = series[i],
                    axisx = s.xaxis,
                    axisy = s.yaxis,
                    points = s.datapoints.points,
                    ps = s.datapoints.pointsize,
                    mx = axisx.c2p(mouseX), // precompute some stuff to make the loop faster
                    my = axisy.c2p(mouseY),
                    maxx = maxDistance / axisx.scale,
                    maxy = maxDistance / axisy.scale;

                // with inverse transforms, we can't use the maxx/maxy
                // optimization, sadly
                if (axisx.options.inverseTransform)
                    maxx = Number.MAX_VALUE;
                if (axisy.options.inverseTransform)
                    maxy = Number.MAX_VALUE;
                
                if (s.lines.show || s.points.show) {
                    for (j = 0; j < points.length; j += ps) {
                        var x = points[j], y = points[j + 1];
                        if (x == null)
                            continue;
                        
                        // For points and lines, the cursor must be within a
                        // certain distance to the data point
                        if (x - mx > maxx || x - mx < -maxx ||
                            y - my > maxy || y - my < -maxy)
                            continue;

                        // We have to calculate distances in pixels, not in
                        // data units, because the scales of the axes may be different
                        var dx = Math.abs(axisx.p2c(x) - mouseX),
                            dy = Math.abs(axisy.p2c(y) - mouseY),
                            dist = dx * dx + dy * dy; // we save the sqrt

                        // use <= to ensure last point takes precedence
                        // (last generally means on top of)
                        if (dist < smallestDistance) {
                            smallestDistance = dist;
                            item = [i, j / ps];
                        }
                    }
                }
                    
                if (s.bars.show && !item) { // no other point can be nearby
                    var barLeft = s.bars.align == "left" ? 0 : -s.bars.barWidth/2,
                        barRight = barLeft + s.bars.barWidth;
                    
                    for (j = 0; j < points.length; j += ps) {
                        var x = points[j], y = points[j + 1], b = points[j + 2];
                        if (x == null)
                            continue;
  
                        // for a bar graph, the cursor must be inside the bar
                        if (series[i].bars.horizontal ? 
                            (mx <= Math.max(b, x) && mx >= Math.min(b, x) && 
                             my >= y + barLeft && my <= y + barRight) :
                            (mx >= x + barLeft && mx <= x + barRight &&
                             my >= Math.min(b, y) && my <= Math.max(b, y)))
                                item = [i, j / ps];
                    }
                }
            }

            if (item) {
                i = item[0];
                j = item[1];
                ps = series[i].datapoints.pointsize;
                
                return { datapoint: series[i].datapoints.points.slice(j * ps, (j + 1) * ps),
                         dataIndex: j,
                         series: series[i],
                         seriesIndex: i };
            }
            
            return null;
        }

        function onMouseMove(e) {
            if (options.grid.hoverable)
                triggerClickHoverEvent("plothover", e,
                                       function (s) { return s["hoverable"] != false; });
        }

        function onMouseLeave(e) {
            if (options.grid.hoverable)
                triggerClickHoverEvent("plothover", e,
                                       function (s) { return false; });
        }

        function onClick(e) {
            triggerClickHoverEvent("plotclick", e,
                                   function (s) { return s["clickable"] != false; });
        }

        // trigger click or hover event (they send the same parameters
        // so we share their code)
        function triggerClickHoverEvent(eventname, event, seriesFilter) {
            var offset = eventHolder.offset(),
                canvasX = event.pageX - offset.left - plotOffset.left,
                canvasY = event.pageY - offset.top - plotOffset.top,
            pos = canvasToAxisCoords({ left: canvasX, top: canvasY });

            pos.pageX = event.pageX;
            pos.pageY = event.pageY;

            var item = findNearbyItem(canvasX, canvasY, seriesFilter);

            if (item) {
                // fill in mouse pos for any listeners out there
                item.pageX = parseInt(item.series.xaxis.p2c(item.datapoint[0]) + offset.left + plotOffset.left);
                item.pageY = parseInt(item.series.yaxis.p2c(item.datapoint[1]) + offset.top + plotOffset.top);
            }

            if (options.grid.autoHighlight) {
                // clear auto-highlights
                for (var i = 0; i < highlights.length; ++i) {
                    var h = highlights[i];
                    if (h.auto == eventname &&
                        !(item && h.series == item.series &&
                          h.point[0] == item.datapoint[0] &&
                          h.point[1] == item.datapoint[1]))
                        unhighlight(h.series, h.point);
                }
                
                if (item)
                    highlight(item.series, item.datapoint, eventname);
            }
            
            placeholder.trigger(eventname, [ pos, item ]);
        }

        function triggerRedrawOverlay() {
            var t = options.interaction.redrawOverlayInterval;
            if (t == -1) {      // skip event queue
                drawOverlay();
                return;
            }
            
            if (!redrawTimeout)
                redrawTimeout = setTimeout(drawOverlay, t);
        }

        function drawOverlay() {
            redrawTimeout = null;

            // draw highlights
            octx.save();
            octx.clearRect(0, 0, canvasWidth, canvasHeight);
            octx.translate(plotOffset.left, plotOffset.top);
            
            var i, hi;
            for (i = 0; i < highlights.length; ++i) {
                hi = highlights[i];

                if (hi.series.bars.show)
                    drawBarHighlight(hi.series, hi.point);
                else
                    drawPointHighlight(hi.series, hi.point);
            }
            octx.restore();
            
            executeHooks(hooks.drawOverlay, [octx]);
        }
        
        function highlight(s, point, auto) {
            if (typeof s == "number")
                s = series[s];

            if (typeof point == "number") {
                var ps = s.datapoints.pointsize;
                point = s.datapoints.points.slice(ps * point, ps * (point + 1));
            }

            var i = indexOfHighlight(s, point);
            if (i == -1) {
                highlights.push({ series: s, point: point, auto: auto });

                triggerRedrawOverlay();
            }
            else if (!auto)
                highlights[i].auto = false;
        }
            
        function unhighlight(s, point) {
            if (s == null && point == null) {
                highlights = [];
                triggerRedrawOverlay();
            }
            
            if (typeof s == "number")
                s = series[s];

            if (typeof point == "number")
                point = s.data[point];

            var i = indexOfHighlight(s, point);
            if (i != -1) {
                highlights.splice(i, 1);

                triggerRedrawOverlay();
            }
        }
        
        function indexOfHighlight(s, p) {
            for (var i = 0; i < highlights.length; ++i) {
                var h = highlights[i];
                if (h.series == s && h.point[0] == p[0]
                    && h.point[1] == p[1])
                    return i;
            }
            return -1;
        }
        
        function drawPointHighlight(series, point) {
            var x = point[0], y = point[1],
                axisx = series.xaxis, axisy = series.yaxis;
            
            if (x < axisx.min || x > axisx.max || y < axisy.min || y > axisy.max)
                return;
            
            var pointRadius = series.points.radius + series.points.lineWidth / 2;
            octx.lineWidth = pointRadius;
            octx.strokeStyle = $.color.parse(series.color).scale('a', 0.5).toString();
            var radius = 1.5 * pointRadius,
                x = axisx.p2c(x),
                y = axisy.p2c(y);
            
            octx.beginPath();
            if (series.points.symbol == "circle")
                octx.arc(x, y, radius, 0, 2 * Math.PI, false);
            else
                series.points.symbol(octx, x, y, radius, false);
            octx.closePath();
            octx.stroke();
        }

        function drawBarHighlight(series, point) {
            octx.lineWidth = series.bars.lineWidth;
            octx.strokeStyle = $.color.parse(series.color).scale('a', 0.5).toString();
            var fillStyle = $.color.parse(series.color).scale('a', 0.5).toString();
            var barLeft = series.bars.align == "left" ? 0 : -series.bars.barWidth/2;
            drawBar(point[0], point[1], point[2] || 0, barLeft, barLeft + series.bars.barWidth,
                    0, function () { return fillStyle; }, series.xaxis, series.yaxis, octx, series.bars.horizontal, series.bars.lineWidth);
        }

        function getColorOrGradient(spec, bottom, top, defaultColor) {
            if (typeof spec == "string")
                return spec;
            else {
                // assume this is a gradient spec; IE currently only
                // supports a simple vertical gradient properly, so that's
                // what we support too
                var gradient = ctx.createLinearGradient(0, top, 0, bottom);
                
                for (var i = 0, l = spec.colors.length; i < l; ++i) {
                    var c = spec.colors[i];
                    if (typeof c != "string") {
                        var co = $.color.parse(defaultColor);
                        if (c.brightness != null)
                            co = co.scale('rgb', c.brightness);
                        if (c.opacity != null)
                            co.a *= c.opacity;
                        c = co.toString();
                    }
                    gradient.addColorStop(i / (l - 1), c);
                }
                
                return gradient;
            }
        }
    }

    $.plot = function(placeholder, data, options) {
        //var t0 = new Date();
        var plot = new Plot($(placeholder), data, options, $.plot.plugins);
        //(window.console ? console.log : alert)("time used (msecs): " + ((new Date()).getTime() - t0.getTime()));
        return plot;
    };

    $.plot.version = "0.7";
    
    $.plot.plugins = [];

    // returns a string with the date d formatted according to fmt
    $.plot.formatDate = function(d, fmt, monthNames) {
        var leftPad = function(n) {
            n = "" + n;
            return n.length == 1 ? "0" + n : n;
        };
        
        var r = [];
        var escape = false, padNext = false;
        var hours = d.getUTCHours();
        var isAM = hours < 12;
        if (monthNames == null)
            monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

        if (fmt.search(/%p|%P/) != -1) {
            if (hours > 12) {
                hours = hours - 12;
            } else if (hours == 0) {
                hours = 12;
            }
        }
        for (var i = 0; i < fmt.length; ++i) {
            var c = fmt.charAt(i);
            
            if (escape) {
                switch (c) {
                case 'h': c = "" + hours; break;
                case 'H': c = leftPad(hours); break;
                case 'M': c = leftPad(d.getUTCMinutes()); break;
                case 'S': c = leftPad(d.getUTCSeconds()); break;
                case 'd': c = "" + d.getUTCDate(); break;
                case 'm': c = "" + (d.getUTCMonth() + 1); break;
                case 'y': c = "" + d.getUTCFullYear(); break;
                case 'b': c = "" + monthNames[d.getUTCMonth()]; break;
                case 'p': c = (isAM) ? ("" + "am") : ("" + "pm"); break;
                case 'P': c = (isAM) ? ("" + "AM") : ("" + "PM"); break;
                case '0': c = ""; padNext = true; break;
                }
                if (c && padNext) {
                    c = leftPad(c);
                    padNext = false;
                }
                r.push(c);
                if (!padNext)
                    escape = false;
            }
            else {
                if (c == "%")
                    escape = true;
                else
                    r.push(c);
            }
        }
        return r.join("");
    };
    
    // round to nearby lower multiple of base
    function floorInBase(n, base) {
        return base * Math.floor(n / base);
    }
    
})(jQuery);

/* Flot - Stack */
/*
Flot plugin for stacking data sets, i.e. putting them on top of each
other, for accumulative graphs.

The plugin assumes the data is sorted on x (or y if stacking
horizontally). For line charts, it is assumed that if a line has an
undefined gap (from a null point), then the line above it should have
the same gap - insert zeros instead of "null" if you want another
behaviour. This also holds for the start and end of the chart. Note
that stacking a mix of positive and negative values in most instances
doesn't make sense (so it looks weird).

Two or more series are stacked when their "stack" attribute is set to
the same key (which can be any number or string or just "true"). To
specify the default stack, you can set

  series: {
    stack: null or true or key (number/string)
  }

or specify it for a specific series

  $.plot($("#placeholder"), [{ data: [ ... ], stack: true }])
  
The stacking order is determined by the order of the data series in
the array (later series end up on top of the previous).

Internally, the plugin modifies the datapoints in each series, adding
an offset to the y value. For line series, extra data points are
inserted through interpolation. If there's a second y value, it's also
adjusted (e.g for bar charts or filled areas).
*/

(function ($) {
    var options = {
        series: { stack: null } // or number/string
    };
    
    function init(plot) {
        function findMatchingSeries(s, allseries) {
            var res = null
            for (var i = 0; i < allseries.length; ++i) {
                if (s == allseries[i])
                    break;
                
                if (allseries[i].stack == s.stack)
                    res = allseries[i];
            }
            
            return res;
        }
        
        function stackData(plot, s, datapoints) {
            if (s.stack == null)
                return;

            var other = findMatchingSeries(s, plot.getData());
            if (!other)
                return;

            var ps = datapoints.pointsize,
                points = datapoints.points,
                otherps = other.datapoints.pointsize,
                otherpoints = other.datapoints.points,
                newpoints = [],
                px, py, intery, qx, qy, bottom,
                withlines = s.lines.show,
                horizontal = s.bars.horizontal,
                withbottom = ps > 2 && (horizontal ? datapoints.format[2].x : datapoints.format[2].y),
                withsteps = withlines && s.lines.steps,
                fromgap = true,
                keyOffset = horizontal ? 1 : 0,
                accumulateOffset = horizontal ? 0 : 1,
                i = 0, j = 0, l;

            while (true) {
                if (i >= points.length)
                    break;

                l = newpoints.length;

                if (points[i] == null) {
                    // copy gaps
                    for (m = 0; m < ps; ++m)
                        newpoints.push(points[i + m]);
                    i += ps;
                }
                else if (j >= otherpoints.length) {
                    // for lines, we can't use the rest of the points
                    if (!withlines) {
                        for (m = 0; m < ps; ++m)
                            newpoints.push(points[i + m]);
                    }
                    i += ps;
                }
                else if (otherpoints[j] == null) {
                    // oops, got a gap
                    for (m = 0; m < ps; ++m)
                        newpoints.push(null);
                    fromgap = true;
                    j += otherps;
                }
                else {
                    // cases where we actually got two points
                    px = points[i + keyOffset];
                    py = points[i + accumulateOffset];
                    qx = otherpoints[j + keyOffset];
                    qy = otherpoints[j + accumulateOffset];
                    bottom = 0;

                    if (px == qx) {
                        for (m = 0; m < ps; ++m)
                            newpoints.push(points[i + m]);

                        newpoints[l + accumulateOffset] += qy;
                        bottom = qy;
                        
                        i += ps;
                        j += otherps;
                    }
                    else if (px > qx) {
                        // we got past point below, might need to
                        // insert interpolated extra point
                        if (withlines && i > 0 && points[i - ps] != null) {
                            intery = py + (points[i - ps + accumulateOffset] - py) * (qx - px) / (points[i - ps + keyOffset] - px);
                            newpoints.push(qx);
                            newpoints.push(intery + qy);
                            for (m = 2; m < ps; ++m)
                                newpoints.push(points[i + m]);
                            bottom = qy; 
                        }

                        j += otherps;
                    }
                    else { // px < qx
                        if (fromgap && withlines) {
                            // if we come from a gap, we just skip this point
                            i += ps;
                            continue;
                        }
                            
                        for (m = 0; m < ps; ++m)
                            newpoints.push(points[i + m]);
                        
                        // we might be able to interpolate a point below,
                        // this can give us a better y
                        if (withlines && j > 0 && otherpoints[j - otherps] != null)
                            bottom = qy + (otherpoints[j - otherps + accumulateOffset] - qy) * (px - qx) / (otherpoints[j - otherps + keyOffset] - qx);

                        newpoints[l + accumulateOffset] += bottom;
                        
                        i += ps;
                    }

                    fromgap = false;
                    
                    if (l != newpoints.length && withbottom)
                        newpoints[l + 2] += bottom;
                }

                // maintain the line steps invariant
                if (withsteps && l != newpoints.length && l > 0
                    && newpoints[l] != null
                    && newpoints[l] != newpoints[l - ps]
                    && newpoints[l + 1] != newpoints[l - ps + 1]) {
                    for (m = 0; m < ps; ++m)
                        newpoints[l + ps + m] = newpoints[l + m];
                    newpoints[l + 1] = newpoints[l - ps + 1];
                }
            }

            datapoints.points = newpoints;
        }
        
        plot.hooks.processDatapoints.push(stackData);
    }
    
    $.plot.plugins.push({
        init: init,
        options: options,
        name: 'stack',
        version: '1.2'
    });
})(jQuery);

/* Flot - Pie */
/*
Flot plugin for rendering pie charts. The plugin assumes the data is 
coming is as a single data value for each series, and each of those 
values is a positive value or zero (negative numbers don't make 
any sense and will cause strange effects). The data values do 
NOT need to be passed in as percentage values because it 
internally calculates the total and percentages.

* Created by Brian Medendorp, June 2009
* Updated November 2009 with contributions from: btburnett3, Anthony Aragues and Xavi Ivars

* Changes:
    2009-10-22: lineJoin set to round
    2009-10-23: IE full circle fix, donut
    2009-11-11: Added basic hover from btburnett3 - does not work in IE, and center is off in Chrome and Opera
    2009-11-17: Added IE hover capability submitted by Anthony Aragues
    2009-11-18: Added bug fix submitted by Xavi Ivars (issues with arrays when other JS libraries are included as well)
        

Available options are:
series: {
    pie: {
        show: true/false
        radius: 0-1 for percentage of fullsize, or a specified pixel length, or 'auto'
        innerRadius: 0-1 for percentage of fullsize or a specified pixel length, for creating a donut effect
        startAngle: 0-2 factor of PI used for starting angle (in radians) i.e 3/2 starts at the top, 0 and 2 have the same result
        tilt: 0-1 for percentage to tilt the pie, where 1 is no tilt, and 0 is completely flat (nothing will show)
        offset: {
            top: integer value to move the pie up or down
            left: integer value to move the pie left or right, or 'auto'
        },
        stroke: {
            color: any hexidecimal color value (other formats may or may not work, so best to stick with something like '#FFF')
            width: integer pixel width of the stroke
        },
        label: {
            show: true/false, or 'auto'
            formatter:  a user-defined function that modifies the text/style of the label text
            radius: 0-1 for percentage of fullsize, or a specified pixel length
            background: {
                color: any hexidecimal color value (other formats may or may not work, so best to stick with something like '#000')
                opacity: 0-1
            },
            threshold: 0-1 for the percentage value at which to hide labels (if they're too small)
        },
        combine: {
            threshold: 0-1 for the percentage value at which to combine slices (if they're too small)
            color: any hexidecimal color value (other formats may or may not work, so best to stick with something like '#CCC'), if null, the plugin will automatically use the color of the first slice to be combined
            label: any text value of what the combined slice should be labeled
        }
        highlight: {
            opacity: 0-1
        }
    }
}

More detail and specific examples can be found in the included HTML file.

*/

(function ($) 
{
    function init(plot) // this is the "body" of the plugin
    {
        var canvas = null;
        var target = null;
        var maxRadius = null;
        var centerLeft = null;
        var centerTop = null;
        var total = 0;
        var redraw = true;
        var redrawAttempts = 10;
        var shrink = 0.95;
        var legendWidth = 0;
        var processed = false;
        var raw = false;
        
        // interactive variables    
        var highlights = [];    
    
        // add hook to determine if pie plugin in enabled, and then perform necessary operations
        plot.hooks.processOptions.push(checkPieEnabled);
        plot.hooks.bindEvents.push(bindEvents); 

        // check to see if the pie plugin is enabled
        function checkPieEnabled(plot, options)
        {
            if (options.series.pie.show)
            {
                //disable grid
                options.grid.show = false;
                
                // set labels.show
                if (options.series.pie.label.show=='auto')
                    if (options.legend.show)
                        options.series.pie.label.show = false;
                    else
                        options.series.pie.label.show = true;
                
                // set radius
                if (options.series.pie.radius=='auto')
                    if (options.series.pie.label.show)
                        options.series.pie.radius = 3/4;
                    else
                        options.series.pie.radius = 1;
                        
                // ensure sane tilt
                if (options.series.pie.tilt>1)
                    options.series.pie.tilt=1;
                if (options.series.pie.tilt<0)
                    options.series.pie.tilt=0;
            
                // add processData hook to do transformations on the data
                plot.hooks.processDatapoints.push(processDatapoints);
                plot.hooks.drawOverlay.push(drawOverlay);   
                
                // add draw hook
                plot.hooks.draw.push(draw);
            }
        }
    
        // bind hoverable events
        function bindEvents(plot, eventHolder)      
        {       
            var options = plot.getOptions();
            
            if (options.series.pie.show && options.grid.hoverable)
                eventHolder.unbind('mousemove').mousemove(onMouseMove);
                
            if (options.series.pie.show && options.grid.clickable)
                eventHolder.unbind('click').click(onClick);
        }   
        

        // debugging function that prints out an object
        function alertObject(obj)
        {
            var msg = '';
            function traverse(obj, depth)
            {
                if (!depth)
                    depth = 0;
                for (var i = 0; i < obj.length; ++i)
                {
                    for (var j=0; j<depth; j++)
                        msg += '\t';
                
                    if( typeof obj[i] == "object")
                    {   // its an object
                        msg += ''+i+':\n';
                        traverse(obj[i], depth+1);
                    }
                    else
                    {   // its a value
                        msg += ''+i+': '+obj[i]+'\n';
                    }
                }
            }
            traverse(obj);
            alert(msg);
        }
        
        function calcTotal(data)
        {
            for (var i = 0; i < data.length; ++i)
            {
                var item = parseFloat(data[i].data[0][1]);
                if (item)
                    total += item;
            }
        }   
        
        function processDatapoints(plot, series, data, datapoints) 
        {   
            if (!processed)
            {
                processed = true;
            
                canvas = plot.getCanvas();
                target = $(canvas).parent();
                options = plot.getOptions();
            
                plot.setData(combine(plot.getData()));
            }
        }
        
        function setupPie()
        {
            legendWidth = target.children().filter('.legend').children().width();
        
            // calculate maximum radius and center point
            maxRadius =  Math.min(canvas.width,(canvas.height/options.series.pie.tilt))/2;
            centerTop = (canvas.height/2)+options.series.pie.offset.top;
            centerLeft = (canvas.width/2);
            
            if (options.series.pie.offset.left=='auto')
                if (options.legend.position.match('w'))
                    centerLeft += legendWidth/2;
                else
                    centerLeft -= legendWidth/2;
            else
                centerLeft += options.series.pie.offset.left;
                    
            if (centerLeft<maxRadius)
                centerLeft = maxRadius;
            else if (centerLeft>canvas.width-maxRadius)
                centerLeft = canvas.width-maxRadius;
        }
        
        function fixData(data)
        {
            for (var i = 0; i < data.length; ++i)
            {
                if (typeof(data[i].data)=='number')
                    data[i].data = [[1,data[i].data]];
                else if (typeof(data[i].data)=='undefined' || typeof(data[i].data[0])=='undefined')
                {
                    if (typeof(data[i].data)!='undefined' && typeof(data[i].data.label)!='undefined')
                        data[i].label = data[i].data.label; // fix weirdness coming from flot
                    data[i].data = [[1,0]];
                    
                }
            }
            return data;
        }
        
        function combine(data)
        {
            data = fixData(data);
            calcTotal(data);
            var combined = 0;
            var numCombined = 0;
            var color = options.series.pie.combine.color;
            
            var newdata = [];
            for (var i = 0; i < data.length; ++i)
            {
                // make sure its a number
                data[i].data[0][1] = parseFloat(data[i].data[0][1]);
                if (!data[i].data[0][1])
                    data[i].data[0][1] = 0;
                    
                if (data[i].data[0][1]/total<=options.series.pie.combine.threshold)
                {
                    combined += data[i].data[0][1];
                    numCombined++;
                    if (!color)
                        color = data[i].color;
                }               
                else
                {
                    newdata.push({
                        data: [[1,data[i].data[0][1]]], 
                        color: data[i].color, 
                        label: data[i].label,
                        angle: (data[i].data[0][1]*(Math.PI*2))/total,
                        percent: (data[i].data[0][1]/total*100)
                    });
                }
            }
            if (numCombined>0)
                newdata.push({
                    data: [[1,combined]], 
                    color: color, 
                    label: options.series.pie.combine.label,
                    angle: (combined*(Math.PI*2))/total,
                    percent: (combined/total*100)
                });
            return newdata;
        }       
        
        function draw(plot, newCtx)
        {
            if (!target) return; // if no series were passed
            ctx = newCtx;
        
            setupPie();
            var slices = plot.getData();
        
            var attempts = 0;
            while (redraw && attempts<redrawAttempts)
            {
                redraw = false;
                if (attempts>0)
                    maxRadius *= shrink;
                attempts += 1;
                clear();
                if (options.series.pie.tilt<=0.8)
                    drawShadow();
                drawPie();
            }
            if (attempts >= redrawAttempts) {
                clear();
                target.prepend('<div class="error">Could not draw pie with labels contained inside canvas</div>');
            }
            
            if ( plot.setSeries && plot.insertLegend )
            {
                plot.setSeries(slices);
                plot.insertLegend();
            }
            
            // we're actually done at this point, just defining internal functions at this point
            
            function clear()
            {
                ctx.clearRect(0,0,canvas.width,canvas.height);
                target.children().filter('.pieLabel, .pieLabelBackground').remove();
            }
            
            function drawShadow()
            {
                var shadowLeft = 5;
                var shadowTop = 15;
                var edge = 10;
                var alpha = 0.02;
            
                // set radius
                if (options.series.pie.radius>1)
                    var radius = options.series.pie.radius;
                else
                    var radius = maxRadius * options.series.pie.radius;
                    
                if (radius>=(canvas.width/2)-shadowLeft || radius*options.series.pie.tilt>=(canvas.height/2)-shadowTop || radius<=edge)
                    return; // shadow would be outside canvas, so don't draw it
            
                ctx.save();
                ctx.translate(shadowLeft,shadowTop);
                ctx.globalAlpha = alpha;
                ctx.fillStyle = '#000';

                // center and rotate to starting position
                ctx.translate(centerLeft,centerTop);
                ctx.scale(1, options.series.pie.tilt);
                
                //radius -= edge;
                for (var i=1; i<=edge; i++)
                {
                    ctx.beginPath();
                    ctx.arc(0,0,radius,0,Math.PI*2,false);
                    ctx.fill();
                    radius -= i;
                }   
                
                ctx.restore();
            }
            
            function drawPie()
            {
                var startAngle = Math.PI * options.series.pie.startAngle;
                var radius;

                // set radius
                if (options.series.pie.radius > 1)
                    radius = options.series.pie.radius;
                else radius = maxRadius * options.series.pie.radius;

                // center and rotate to starting position
                ctx.save();
                ctx.translate(centerLeft,centerTop);
                ctx.scale(1, options.series.pie.tilt);
                //ctx.rotate(startAngle); // start at top; -- This doesn't work properly in Opera

                // draw slices
                ctx.save();
                var currentAngle = startAngle;
                for (var i = 0; i < slices.length; ++i)
                {
                    slices[i].startAngle = currentAngle;
                    drawSlice(slices[i].angle, slices[i].color, true);
                }
                ctx.restore();

                // draw slice outlines

                if (options.series.pie.stroke.width > 0) {
                    ctx.save();
                    ctx.lineWidth = options.series.pie.stroke.width;
                    currentAngle = startAngle;
                    for (var i = 0; i < slices.length; ++i)
                        drawSlice(slices[i].angle, options.series.pie.stroke.color, false);
                    ctx.restore();
                }

                // draw donut hole
                drawDonutHole(ctx);

                // draw labels
                if (options.series.pie.label.show)
                    drawLabels();

                // restore to original state
                ctx.restore();

                function drawSlice(angle, color, fill)
                {   
                    if (angle <= 0 || isNaN(angle))
                        return;
                
                    if (fill)
                        ctx.fillStyle = color;
                    else
                    {
                        ctx.strokeStyle = color;
                        ctx.lineJoin = 'round';
                    }
                        
                    ctx.beginPath();
                    if (Math.abs(angle - Math.PI*2) > 0.000000001)
                        ctx.moveTo(0,0); // Center of the pie
                    else if ($.browser.msie)
                        angle -= 0.0001;
                    //ctx.arc(0,0,radius,0,angle,false); // This doesn't work properly in Opera
                    ctx.arc(0,0,radius,currentAngle,currentAngle+angle,false);
                    ctx.closePath();
                    //ctx.rotate(angle); // This doesn't work properly in Opera
                    currentAngle += angle;
                    
                    if (fill)
                        ctx.fill();
                    else
                        ctx.stroke();
                }
                
                function drawLabels()
                {
                    var currentAngle = startAngle;
                    
                    // set radius
                    if (options.series.pie.label.radius>1)
                        var radius = options.series.pie.label.radius;
                    else
                        var radius = maxRadius * options.series.pie.label.radius;
                    
                    for (var i = 0; i < slices.length; ++i)
                    {
                        if (slices[i].percent >= options.series.pie.label.threshold*100)
                            drawLabel(slices[i], currentAngle, i);
                        currentAngle += slices[i].angle;
                    }
                    
                    function drawLabel(slice, startAngle, index)
                    {
                        if (slice.data[0][1]==0)
                            return;
                            
                        // format label text
                        var lf = options.legend.labelFormatter, text, plf = options.series.pie.label.formatter;
                        if (lf)
                            text = lf(slice.label, slice);
                        else
                            text = slice.label;
                        if (plf)
                            text = plf(text, slice);
                            
                        var halfAngle = ((startAngle+slice.angle) + startAngle)/2;
                        var x = centerLeft + Math.round(Math.cos(halfAngle) * radius);
                        var y = centerTop + Math.round(Math.sin(halfAngle) * radius) * options.series.pie.tilt;
                        
                        var html = '<span class="pieLabel" id="pieLabel'+index+'" style="position:absolute;top:' + y + 'px;left:' + x + 'px;">' + text + "</span>";
                        target.append(html);
                        var label = target.children('#pieLabel'+index);
                        var labelTop = (y - label.height()/2);
                        var labelLeft = (x - label.width()/2);
                        label.css('top', labelTop);
                        label.css('left', labelLeft);
                        
                        // check to make sure that the label is not outside the canvas
                        if (0-labelTop>0 || 0-labelLeft>0 || canvas.height-(labelTop+label.height())<0 || canvas.width-(labelLeft+label.width())<0)
                            redraw = true;
                        
                        if (options.series.pie.label.background.opacity != 0) {
                            // put in the transparent background separately to avoid blended labels and label boxes
                            var c = options.series.pie.label.background.color;
                            if (c == null) {
                                c = slice.color;
                            }
                            var pos = 'top:'+labelTop+'px;left:'+labelLeft+'px;';
                            $('<div class="pieLabelBackground" style="position:absolute;width:' + label.width() + 'px;height:' + label.height() + 'px;' + pos +'background-color:' + c + ';"> </div>').insertBefore(label).css('opacity', options.series.pie.label.background.opacity);
                        }
                    } // end individual label function
                } // end drawLabels function
            } // end drawPie function
        } // end draw function
        
        // Placed here because it needs to be accessed from multiple locations 
        function drawDonutHole(layer)
        {
            // draw donut hole
            if(options.series.pie.innerRadius > 0)
            {
                // subtract the center
                layer.save();
                innerRadius = options.series.pie.innerRadius > 1 ? options.series.pie.innerRadius : maxRadius * options.series.pie.innerRadius;
                layer.globalCompositeOperation = 'destination-out'; // this does not work with excanvas, but it will fall back to using the stroke color
                layer.beginPath();
                layer.fillStyle = options.series.pie.stroke.color;
                layer.arc(0,0,innerRadius,0,Math.PI*2,false);
                layer.fill();
                layer.closePath();
                layer.restore();
                
                // add inner stroke
                layer.save();
                layer.beginPath();
                layer.strokeStyle = options.series.pie.stroke.color;
                layer.arc(0,0,innerRadius,0,Math.PI*2,false);
                layer.stroke();
                layer.closePath();
                layer.restore();
                // TODO: add extra shadow inside hole (with a mask) if the pie is tilted.
            }
        }
        
        //-- Additional Interactive related functions --
        
        function isPointInPoly(poly, pt)
        {
            for(var c = false, i = -1, l = poly.length, j = l - 1; ++i < l; j = i)
                ((poly[i][1] <= pt[1] && pt[1] < poly[j][1]) || (poly[j][1] <= pt[1] && pt[1]< poly[i][1]))
                && (pt[0] < (poly[j][0] - poly[i][0]) * (pt[1] - poly[i][1]) / (poly[j][1] - poly[i][1]) + poly[i][0])
                && (c = !c);
            return c;
        }
        
        function findNearbySlice(mouseX, mouseY)
        {
            var slices = plot.getData(),
                options = plot.getOptions(),
                radius = options.series.pie.radius > 1 ? options.series.pie.radius : maxRadius * options.series.pie.radius;
            
            for (var i = 0; i < slices.length; ++i) 
            {
                var s = slices[i];  
                
                if(s.pie.show)
                {
                    ctx.save();
                    ctx.beginPath();
                    ctx.moveTo(0,0); // Center of the pie
                    //ctx.scale(1, options.series.pie.tilt);    // this actually seems to break everything when here.
                    ctx.arc(0,0,radius,s.startAngle,s.startAngle+s.angle,false);
                    ctx.closePath();
                    x = mouseX-centerLeft;
                    y = mouseY-centerTop;
                    if(ctx.isPointInPath)
                    {
                        if (ctx.isPointInPath(mouseX-centerLeft, mouseY-centerTop))
                        {
                            //alert('found slice!');
                            ctx.restore();
                            return {datapoint: [s.percent, s.data], dataIndex: 0, series: s, seriesIndex: i};
                        }
                    }
                    else
                    {
                        // excanvas for IE doesn;t support isPointInPath, this is a workaround. 
                        p1X = (radius * Math.cos(s.startAngle));
                        p1Y = (radius * Math.sin(s.startAngle));
                        p2X = (radius * Math.cos(s.startAngle+(s.angle/4)));
                        p2Y = (radius * Math.sin(s.startAngle+(s.angle/4)));
                        p3X = (radius * Math.cos(s.startAngle+(s.angle/2)));
                        p3Y = (radius * Math.sin(s.startAngle+(s.angle/2)));
                        p4X = (radius * Math.cos(s.startAngle+(s.angle/1.5)));
                        p4Y = (radius * Math.sin(s.startAngle+(s.angle/1.5)));
                        p5X = (radius * Math.cos(s.startAngle+s.angle));
                        p5Y = (radius * Math.sin(s.startAngle+s.angle));
                        arrPoly = [[0,0],[p1X,p1Y],[p2X,p2Y],[p3X,p3Y],[p4X,p4Y],[p5X,p5Y]];
                        arrPoint = [x,y];
                        // TODO: perhaps do some mathmatical trickery here with the Y-coordinate to compensate for pie tilt?
                        if(isPointInPoly(arrPoly, arrPoint))
                        {
                            ctx.restore();
                            return {datapoint: [s.percent, s.data], dataIndex: 0, series: s, seriesIndex: i};
                        }           
                    }
                    ctx.restore();
                }
            }
            
            return null;
        }

        function onMouseMove(e) 
        {
            triggerClickHoverEvent('plothover', e);
        }
        
        function onClick(e) 
        {
            triggerClickHoverEvent('plotclick', e);
        }

        // trigger click or hover event (they send the same parameters so we share their code)
        function triggerClickHoverEvent(eventname, e) 
        {
            var offset = plot.offset(),
                canvasX = parseInt(e.pageX - offset.left),
                canvasY =  parseInt(e.pageY - offset.top),
                item = findNearbySlice(canvasX, canvasY);
            
            if (options.grid.autoHighlight) 
            {
                // clear auto-highlights
                for (var i = 0; i < highlights.length; ++i) 
                {
                    var h = highlights[i];
                    if (h.auto == eventname && !(item && h.series == item.series))
                        unhighlight(h.series);
                }
            }
            
            // highlight the slice
            if (item) 
                highlight(item.series, eventname);
                
            // trigger any hover bind events
            var pos = { pageX: e.pageX, pageY: e.pageY };
            target.trigger(eventname, [ pos, item ]);   
        }

        function highlight(s, auto) 
        {
            if (typeof s == "number")
                s = series[s];

            var i = indexOfHighlight(s);
            if (i == -1) 
            {
                highlights.push({ series: s, auto: auto });
                plot.triggerRedrawOverlay();
            }
            else if (!auto)
                highlights[i].auto = false;
        }

        function unhighlight(s) 
        {
            if (s == null) 
            {
                highlights = [];
                plot.triggerRedrawOverlay();
            }
            
            if (typeof s == "number")
                s = series[s];

            var i = indexOfHighlight(s);
            if (i != -1) 
            {
                highlights.splice(i, 1);
                plot.triggerRedrawOverlay();
            }
        }

        function indexOfHighlight(s) 
        {
            for (var i = 0; i < highlights.length; ++i) 
            {
                var h = highlights[i];
                if (h.series == s)
                    return i;
            }
            return -1;
        }

        function drawOverlay(plot, octx) 
        {
            //alert(options.series.pie.radius);
            var options = plot.getOptions();
            //alert(options.series.pie.radius);
            
            var radius = options.series.pie.radius > 1 ? options.series.pie.radius : maxRadius * options.series.pie.radius;

            octx.save();
            octx.translate(centerLeft, centerTop);
            octx.scale(1, options.series.pie.tilt);
            
            for (i = 0; i < highlights.length; ++i) 
                drawHighlight(highlights[i].series);
            
            drawDonutHole(octx);

            octx.restore();

            function drawHighlight(series) 
            {
                if (series.angle <= 0 || isNaN(series.angle))
                    return;
                
                //octx.fillStyle = parseColor(options.series.pie.highlight.color).scale(null, null, null, options.series.pie.highlight.opacity).toString();
                octx.fillStyle = "rgba(255, 255, 255, "+options.series.pie.highlight.opacity+")"; // this is temporary until we have access to parseColor
                
                octx.beginPath();
                if (Math.abs(series.angle - Math.PI*2) > 0.000000001)
                    octx.moveTo(0,0); // Center of the pie
                octx.arc(0,0,radius,series.startAngle,series.startAngle+series.angle,false);
                octx.closePath();
                octx.fill();
            }
            
        }   
        
    } // end init (plugin body)
    
    // define pie specific options and their default values
    var options = {
        series: {
            pie: {
                show: false,
                radius: 'auto', // actual radius of the visible pie (based on full calculated radius if <=1, or hard pixel value)
                innerRadius:0, /* for donut */
                startAngle: 3/2,
                tilt: 1,
                offset: {
                    top: 0,
                    left: 'auto'
                },
                stroke: {
                    color: '#FFF',
                    width: 1
                },
                label: {
                    show: 'auto',
                    formatter: function(label, slice){
                        return '<div style="font-size:x-small;text-align:center;padding:2px;color:'+slice.color+';">'+label+'<br/>'+Math.round(slice.percent)+'%</div>';
                    },  // formatter function
                    radius: 1,  // radius at which to place the labels (based on full calculated radius if <=1, or hard pixel value)
                    background: {
                        color: null,
                        opacity: 0
                    },
                    threshold: 0    // percentage at which to hide the label (i.e. the slice is too narrow)
                },
                combine: {
                    threshold: -1,  // percentage at which to combine little slices into one larger slice
                    color: null,    // color to give the new slice (auto-generated if null)
                    label: 'Other'  // label to give the new slice
                },
                highlight: {
                    //color: '#FFF',        // will add this functionality once parseColor is available
                    opacity: 0.5
                }
            }
        }
    };
    
    $.plot.plugins.push({
        init: init,
        options: options,
        name: "pie",
        version: "1.0"
    });
})(jQuery);

/* Flot - Crosshair */
/*
Flot plugin for showing crosshairs, thin lines, when the mouse hovers
over the plot.

  crosshair: {
    mode: null or "x" or "y" or "xy"
    color: color
    lineWidth: number
  }

Set the mode to one of "x", "y" or "xy". The "x" mode enables a
vertical crosshair that lets you trace the values on the x axis, "y"
enables a horizontal crosshair and "xy" enables them both. "color" is
the color of the crosshair (default is "rgba(170, 0, 0, 0.80)"),
"lineWidth" is the width of the drawn lines (default is 1).

The plugin also adds four public methods:

  - setCrosshair(pos)

    Set the position of the crosshair. Note that this is cleared if
    the user moves the mouse. "pos" is in coordinates of the plot and
    should be on the form { x: xpos, y: ypos } (you can use x2/x3/...
    if you're using multiple axes), which is coincidentally the same
    format as what you get from a "plothover" event. If "pos" is null,
    the crosshair is cleared.

  - clearCrosshair()

    Clear the crosshair.

  - lockCrosshair(pos)

    Cause the crosshair to lock to the current location, no longer
    updating if the user moves the mouse. Optionally supply a position
    (passed on to setCrosshair()) to move it to.

    Example usage:
      var myFlot = $.plot( $("#graph"), ..., { crosshair: { mode: "x" } } };
      $("#graph").bind("plothover", function (evt, position, item) {
        if (item) {
          // Lock the crosshair to the data point being hovered
          myFlot.lockCrosshair({ x: item.datapoint[0], y: item.datapoint[1] });
        }
        else {
          // Return normal crosshair operation
          myFlot.unlockCrosshair();
        }
      });

  - unlockCrosshair()

    Free the crosshair to move again after locking it.
*/

(function ($) {
    var options = {
        crosshair: {
            mode: null, // one of null, "x", "y" or "xy",
            color: "rgba(170, 0, 0, 0.80)",
            lineWidth: 1
        }
    };
    
    function init(plot) {
        // position of crosshair in pixels
        var crosshair = { x: -1, y: -1, locked: false };

        plot.setCrosshair = function setCrosshair(pos) {
            if (!pos)
                crosshair.x = -1;
            else {
                var o = plot.p2c(pos);
                crosshair.x = Math.max(0, Math.min(o.left, plot.width()));
                crosshair.y = Math.max(0, Math.min(o.top, plot.height()));
            }
            
            plot.triggerRedrawOverlay();
        };
        
        plot.clearCrosshair = plot.setCrosshair; // passes null for pos
        
        plot.lockCrosshair = function lockCrosshair(pos) {
            if (pos)
                plot.setCrosshair(pos);
            crosshair.locked = true;
        }

        plot.unlockCrosshair = function unlockCrosshair() {
            crosshair.locked = false;
        }

        function onMouseOut(e) {
            if (crosshair.locked)
                return;

            if (crosshair.x != -1) {
                crosshair.x = -1;
                plot.triggerRedrawOverlay();
            }
        }

        function onMouseMove(e) {
            if (crosshair.locked)
                return;
                
            if (plot.getSelection && plot.getSelection()) {
                crosshair.x = -1; // hide the crosshair while selecting
                return;
            }
                
            var offset = plot.offset();
            crosshair.x = Math.max(0, Math.min(e.pageX - offset.left, plot.width()));
            crosshair.y = Math.max(0, Math.min(e.pageY - offset.top, plot.height()));
            plot.triggerRedrawOverlay();
        }
        
        plot.hooks.bindEvents.push(function (plot, eventHolder) {
            if (!plot.getOptions().crosshair.mode)
                return;

            eventHolder.mouseout(onMouseOut);
            eventHolder.mousemove(onMouseMove);
        });

        plot.hooks.drawOverlay.push(function (plot, ctx) {
            var c = plot.getOptions().crosshair;
            if (!c.mode)
                return;

            var plotOffset = plot.getPlotOffset();
            
            ctx.save();
            ctx.translate(plotOffset.left, plotOffset.top);

            if (crosshair.x != -1) {
                ctx.strokeStyle = c.color;
                ctx.lineWidth = c.lineWidth;
                ctx.lineJoin = "round";

                ctx.beginPath();
                if (c.mode.indexOf("x") != -1) {
                    ctx.moveTo(crosshair.x, 0);
                    ctx.lineTo(crosshair.x, plot.height());
                }
                if (c.mode.indexOf("y") != -1) {
                    ctx.moveTo(0, crosshair.y);
                    ctx.lineTo(plot.width(), crosshair.y);
                }
                ctx.stroke();
            }
            ctx.restore();
        });

        plot.hooks.shutdown.push(function (plot, eventHolder) {
            eventHolder.unbind("mouseout", onMouseOut);
            eventHolder.unbind("mousemove", onMouseMove);
        });
    }
    
    $.plot.plugins.push({
        init: init,
        options: options,
        name: 'crosshair',
        version: '1.0'
    });
})(jQuery);

/* Flot - Fill Between */
/*
Flot plugin for computing bottoms for filled line and bar charts.

The case: you've got two series that you want to fill the area
between. In Flot terms, you need to use one as the fill bottom of the
other. You can specify the bottom of each data point as the third
coordinate manually, or you can use this plugin to compute it for you.

In order to name the other series, you need to give it an id, like this

  var dataset = [
       { data: [ ... ], id: "foo" } ,         // use default bottom
       { data: [ ... ], fillBetween: "foo" }, // use first dataset as bottom
       ];

  $.plot($("#placeholder"), dataset, { lines: { show: true, fill: true }});

As a convenience, if the id given is a number that doesn't appear as
an id in the series, it is interpreted as the index in the array
instead (so fillBetween: 0 can also mean the first series).
  
Internally, the plugin modifies the datapoints in each series. For
line series, extra data points might be inserted through
interpolation. Note that at points where the bottom line is not
defined (due to a null point or start/end of line), the current line
will show a gap too. The algorithm comes from the jquery.flot.stack.js
plugin, possibly some code could be shared.
*/

(function ($) {
    var options = {
        series: { fillBetween: null } // or number
    };
    
    function init(plot) {
        function findBottomSeries(s, allseries) {
            var i;
            for (i = 0; i < allseries.length; ++i) {
                if (allseries[i].id == s.fillBetween)
                    return allseries[i];
            }

            if (typeof s.fillBetween == "number") {
                i = s.fillBetween;
            
                if (i < 0 || i >= allseries.length)
                    return null;

                return allseries[i];
            }
            
            return null;
        }
        
        function computeFillBottoms(plot, s, datapoints) {
            if (s.fillBetween == null)
                return;

            var other = findBottomSeries(s, plot.getData());
            if (!other)
                return;

            var ps = datapoints.pointsize,
                points = datapoints.points,
                otherps = other.datapoints.pointsize,
                otherpoints = other.datapoints.points,
                newpoints = [],
                px, py, intery, qx, qy, bottom,
                withlines = s.lines.show,
                withbottom = ps > 2 && datapoints.format[2].y,
                withsteps = withlines && s.lines.steps,
                fromgap = true,
                i = 0, j = 0, l;

            while (true) {
                if (i >= points.length)
                    break;

                l = newpoints.length;

                if (points[i] == null) {
                    // copy gaps
                    for (m = 0; m < ps; ++m)
                        newpoints.push(points[i + m]);
                    i += ps;
                }
                else if (j >= otherpoints.length) {
                    // for lines, we can't use the rest of the points
                    if (!withlines) {
                        for (m = 0; m < ps; ++m)
                            newpoints.push(points[i + m]);
                    }
                    i += ps;
                }
                else if (otherpoints[j] == null) {
                    // oops, got a gap
                    for (m = 0; m < ps; ++m)
                        newpoints.push(null);
                    fromgap = true;
                    j += otherps;
                }
                else {
                    // cases where we actually got two points
                    px = points[i];
                    py = points[i + 1];
                    qx = otherpoints[j];
                    qy = otherpoints[j + 1];
                    bottom = 0;

                    if (px == qx) {
                        for (m = 0; m < ps; ++m)
                            newpoints.push(points[i + m]);

                        //newpoints[l + 1] += qy;
                        bottom = qy;
                        
                        i += ps;
                        j += otherps;
                    }
                    else if (px > qx) {
                        // we got past point below, might need to
                        // insert interpolated extra point
                        if (withlines && i > 0 && points[i - ps] != null) {
                            intery = py + (points[i - ps + 1] - py) * (qx - px) / (points[i - ps] - px);
                            newpoints.push(qx);
                            newpoints.push(intery)
                            for (m = 2; m < ps; ++m)
                                newpoints.push(points[i + m]);
                            bottom = qy; 
                        }

                        j += otherps;
                    }
                    else { // px < qx
                        if (fromgap && withlines) {
                            // if we come from a gap, we just skip this point
                            i += ps;
                            continue;
                        }
                            
                        for (m = 0; m < ps; ++m)
                            newpoints.push(points[i + m]);
                        
                        // we might be able to interpolate a point below,
                        // this can give us a better y
                        if (withlines && j > 0 && otherpoints[j - otherps] != null)
                            bottom = qy + (otherpoints[j - otherps + 1] - qy) * (px - qx) / (otherpoints[j - otherps] - qx);

                        //newpoints[l + 1] += bottom;
                        
                        i += ps;
                    }

                    fromgap = false;
                    
                    if (l != newpoints.length && withbottom)
                        newpoints[l + 2] = bottom;
                }

                // maintain the line steps invariant
                if (withsteps && l != newpoints.length && l > 0
                    && newpoints[l] != null
                    && newpoints[l] != newpoints[l - ps]
                    && newpoints[l + 1] != newpoints[l - ps + 1]) {
                    for (m = 0; m < ps; ++m)
                        newpoints[l + ps + m] = newpoints[l + m];
                    newpoints[l + 1] = newpoints[l - ps + 1];
                }
            }

            datapoints.points = newpoints;
            console.log('RESULT: ', newpoints);
        }
        
        plot.hooks.processDatapoints.push(computeFillBottoms);
    }
    
    $.plot.plugins.push({
        init: init,
        options: options,
        name: 'fillbetween',
        version: '1.0'
    });
})(jQuery);

/* Flot - Resize */
/*
Flot plugin for automatically redrawing plots when the placeholder
size changes, e.g. on window resizes.

It works by listening for changes on the placeholder div (through the
jQuery resize event plugin) - if the size changes, it will redraw the
plot.

There are no options. If you need to disable the plugin for some
plots, you can just fix the size of their placeholders.
*/


/* Inline dependency: 
 * jQuery resize event - v1.1 - 3/14/2010
 * http://benalman.com/projects/jquery-resize-plugin/
 * 
 * Copyright (c) 2010 "Cowboy" Ben Alman
 * Dual licensed under the MIT and GPL licenses.
 * http://benalman.com/about/license/
 */
(function($,h,c){var a=$([]),e=$.resize=$.extend($.resize,{}),i,k="setTimeout",j="resize",d=j+"-special-event",b="delay",f="throttleWindow";e[b]=250;e[f]=true;$.event.special[j]={setup:function(){if(!e[f]&&this[k]){return false}var l=$(this);a=a.add(l);$.data(this,d,{w:l.width(),h:l.height()});if(a.length===1){g()}},teardown:function(){if(!e[f]&&this[k]){return false}var l=$(this);a=a.not(l);l.removeData(d);if(!a.length){clearTimeout(i)}},add:function(l){if(!e[f]&&this[k]){return false}var n;function m(s,o,p){var q=$(this),r=$.data(this,d);r.w=o!==c?o:q.width();r.h=p!==c?p:q.height();n.apply(this,arguments)}if($.isFunction(l)){n=l;return m}else{n=l.handler;l.handler=m}}};function g(){i=h[k](function(){a.each(function(){var n=$(this),m=n.width(),l=n.height(),o=$.data(this,d);if(m!==o.w||l!==o.h){n.trigger(j,[o.w=m,o.h=l])}});g()},e[b])}})(jQuery,this);


(function ($) {
    var options = { }; // no options

    function init(plot) {
        function onResize() {
            var placeholder = plot.getPlaceholder();

            // somebody might have hidden us and we can't plot
            // when we don't have the dimensions
            if (placeholder.width() == 0 || placeholder.height() == 0)
                return;

            plot.resize();
            plot.setupGrid();
            plot.draw();
        }
        
        function bindEvents(plot, eventHolder) {
            plot.getPlaceholder().resize(onResize);
        }

        function shutdown(plot, eventHolder) {
            plot.getPlaceholder().unbind("resize", onResize);
        }
        
        plot.hooks.bindEvents.push(bindEvents);
        plot.hooks.shutdown.push(shutdown);
    }
    
    $.plot.plugins.push({
        init: init,
        options: options,
        name: 'resize',
        version: '1.0'
    });
})(jQuery);

/* Highstock - Custom */
;(function(){var doc=document,win=window,math=Math,mathRound=math.round,mathFloor=math.floor,mathCeil=math.ceil,mathMax=math.max,mathMin=math.min,mathAbs=math.abs,mathCos=math.cos,mathSin=math.sin,mathPI=math.PI,deg2rad=mathPI*2/360,userAgent=navigator.userAgent,isIE=/msie/i.test(userAgent)&&!win.opera,docMode8=doc.documentMode===8,isWebKit=/AppleWebKit/.test(userAgent),isFirefox=/Firefox/.test(userAgent),hasSVG=!!doc.createElementNS&&!!doc.createElementNS("http://www.w3.org/2000/svg","svg").createSVGRect,SVG_NS='http://www.w3.org/2000/svg',Renderer,hasTouch=doc.documentElement.ontouchstart!==undefined,symbolSizes={},idCounter=0,timeFactor=1,garbageBin,defaultOptions,dateFormat,globalAnimation,pathAnim,UNDEFINED,DIV='div',ABSOLUTE='absolute',RELATIVE='relative',HIDDEN='hidden',PREFIX='highcharts-',VISIBLE='visible',PX='px',NONE='none',M='M',L='L',TRACKER_FILL='rgba(192,192,192,'+(hasSVG?0.000001:0.002)+')',NORMAL_STATE='',HOVER_STATE='hover',SELECT_STATE='select',MILLISECOND='millisecond',SECOND='second',MINUTE='minute',HOUR='hour',DAY='day',WEEK='week',MONTH='month',YEAR='year',FILL='fill',LINEAR_GRADIENT='linearGradient',STOPS='stops',STROKE='stroke',STROKE_WIDTH='stroke-width',makeTime,getMinutes,getHours,getDay,getDate,getMonth,getFullYear,setMinutes,setHours,setDate,setMonth,setFullYear,globalAdapter=win.HighchartsAdapter,adapter=globalAdapter||{},each=adapter.each,grep=adapter.grep,map=adapter.map,merge=adapter.merge,addEvent=adapter.addEvent,removeEvent=adapter.removeEvent,fireEvent=adapter.fireEvent,animate=adapter.animate,stop=adapter.stop,seriesTypes={},hoverChart;win.Highcharts={};function extend(a,b){var n;if(!a){a={}}for(n in b){a[n]=b[n]}return a}function hash(){var i=0,args=arguments,length=args.length,obj={};for(;i<length;i++){obj[args[i++]]=args[i]}return obj}function pInt(s,mag){return parseInt(s,mag||10)}function isString(s){return typeof s==='string'}function isObject(obj){return typeof obj==='object'}function isNumber(n){return typeof n==='number'}function log2lin(num){return math.log(num)/math.LN10}function lin2log(num){return math.pow(10,num)}function erase(arr,item){var i=arr.length;while(i--){if(arr[i]===item){arr.splice(i,1);break}}}function defined(obj){return obj!==UNDEFINED&&obj!==null}function attr(elem,prop,value){var key,setAttribute='setAttribute',ret;if(isString(prop)){if(defined(value)){elem[setAttribute](prop,value)}else if(elem&&elem.getAttribute){ret=elem.getAttribute(prop)}}else if(defined(prop)&&isObject(prop)){for(key in prop){elem[setAttribute](key,prop[key])}}return ret}function splat(obj){if(!obj||obj.constructor!==Array){obj=[obj]}return obj}function pick(){var args=arguments,i,arg,length=args.length;for(i=0;i<length;i++){arg=args[i];if(typeof arg!=='undefined'&&arg!==null){return arg}}}function css(el,styles){if(isIE){if(styles&&styles.opacity!==UNDEFINED){styles.filter='alpha(opacity='+(styles.opacity*100)+')'}}extend(el.style,styles)}function createElement(tag,attribs,styles,parent,nopad){var el=doc.createElement(tag);if(attribs){extend(el,attribs)}if(nopad){css(el,{padding:0,border:NONE,margin:0})}if(styles){css(el,styles)}if(parent){parent.appendChild(el)}return el}function extendClass(parent,members){var object=function(){};object.prototype=new parent();extend(object.prototype,members);return object}function numberFormat(number,decimals,decPoint,thousandsSep){var lang=defaultOptions.lang,n=number,c=isNaN(decimals=mathAbs(decimals))?2:decimals,d=decPoint===undefined?lang.decimalPoint:decPoint,t=thousandsSep===undefined?lang.thousandsSep:thousandsSep,s=n<0?"-":"",i=String(pInt(n=mathAbs(+n||0).toFixed(c))),j=i.length>3?i.length%3:0;return s+(j?i.substr(0,j)+t:"")+i.substr(j).replace(/(\d{3})(?=\d)/g,"$1"+t)+(c?d+mathAbs(n-i).toFixed(c).slice(2):"")}dateFormat=function(format,timestamp,capitalize){function pad(number,length){number=number.toString().replace(/^([0-9])$/,'0$1');if(length===3){number=number.toString().replace(/^([0-9]{2})$/,'0$1')}return number}if(!defined(timestamp)||isNaN(timestamp)){return'Invalid date'}format=pick(format,'%Y-%m-%d %H:%M:%S');var localOffset=(new Date()).getTimezoneOffset()*60000;var date=new Date((timestamp*timeFactor)-localOffset),key,hours=date[getHours](),day=date[getDay](),dayOfMonth=date[getDate](),month=date[getMonth](),fullYear=date[getFullYear](),lang=defaultOptions.lang,langWeekdays=lang.weekdays,langMonths=lang.months,replacements={'a':langWeekdays[day].substr(0,3),'A':langWeekdays[day],'d':pad(dayOfMonth),'e':dayOfMonth,'b':langMonths[month].substr(0,3),'B':langMonths[month],'m':pad(month+1),'y':fullYear.toString().substr(2,2),'Y':fullYear,'H':pad(hours),'I':pad((hours%12)||12),'l':(hours%12)||12,'M':pad(date[getMinutes]()),'p':hours<12?'AM':'PM','P':hours<12?'am':'pm','S':pad(date.getSeconds()),'L':pad(timestamp%1000,3)};for(key in replacements){format=format.replace('%'+key,replacements[key])}return capitalize?format.substr(0,1).toUpperCase()+format.substr(1):format};function getPosition(el){var p={left:el.offsetLeft,top:el.offsetTop};el=el.offsetParent;while(el){p.left+=el.offsetLeft;p.top+=el.offsetTop;if(el!==doc.body&&el!==doc.documentElement){p.left-=el.scrollLeft;p.top-=el.scrollTop}el=el.offsetParent}return p}function normalizeTickInterval(interval,multiples,magnitude,options){var normalized,i;magnitude=pick(magnitude,1);normalized=interval/magnitude;if(!multiples){multiples=[1,2,2.5,5,10];if(options&&options.allowDecimals===false){if(magnitude===1){multiples=[1,2,5,10]}else if(magnitude<=0.1){multiples=[1/magnitude]}}}for(i=0;i<multiples.length;i++){interval=multiples[i];if(normalized<=(multiples[i]+(multiples[i+1]||multiples[i]))/2){break}}interval*=magnitude;return interval}function getTimeTicks(tickInterval,min,max,startOfWeek,unitsOption){var tickPositions=[],i,useUTC=defaultOptions.global.useUTC,oneSecond=1000/timeFactor,oneMinute=60000/timeFactor,oneHour=3600000/timeFactor,oneDay=24*3600000/timeFactor,oneWeek=7*24*3600000/timeFactor,oneMonth=30*24*3600000/timeFactor,oneYear=31556952000/timeFactor,ranges=hash(MILLISECOND,1,SECOND,oneSecond,MINUTE,oneMinute,HOUR,oneHour,DAY,oneDay,WEEK,oneWeek,MONTH,oneMonth,YEAR,oneYear),units=unitsOption||[['millisecond',[1,2,5,10,20,25,50,100,200,500]],['second',[1,2,5,10,15,30]],['minute',[1,2,5,10,15,30]],['hour',[1,2,3,4,6,8,12]],['day',[1,2]],['week',[1,2]],['month',[1,2,3,4,6]],['year',null]],unit=units[units.length-1],interval=ranges[unit[0]],multiples=unit[1];for(i=0;i<units.length;i++){unit=units[i];interval=ranges[unit[0]];multiples=unit[1];if(units[i+1]){var lessThan=(interval*multiples[multiples.length-1]+ranges[units[i+1][0]])/2;if(tickInterval<=lessThan){break}}}if(interval===oneYear&&tickInterval<5*interval){multiples=[1,2,5]}var multitude=normalizeTickInterval(tickInterval/interval,multiples),minYear,minDate=new Date(min*timeFactor);minDate.setMilliseconds(0);if(interval>=oneSecond){minDate.setSeconds(interval>=oneMinute?0:multitude*mathFloor(minDate.getSeconds()/multitude))}if(interval>=oneMinute){minDate[setMinutes](interval>=oneHour?0:multitude*mathFloor(minDate[getMinutes]()/multitude))}if(interval>=oneHour){minDate[setHours](interval>=oneDay?0:multitude*mathFloor(minDate[getHours]()/multitude))}if(interval>=oneDay){minDate[setDate](interval>=oneMonth?1:multitude*mathFloor(minDate[getDate]()/multitude))}if(interval>=oneMonth){minDate[setMonth](interval>=oneYear?0:multitude*mathFloor(minDate[getMonth]()/multitude));minYear=minDate[getFullYear]()}if(interval>=oneYear){minYear-=minYear%multitude;minDate[setFullYear](minYear)}if(interval===oneWeek){minDate[setDate](minDate[getDate]()-minDate[getDay]()+pick(startOfWeek,1))}i=1;minYear=minDate[getFullYear]();var time=minDate.getTime()/timeFactor,minMonth=minDate[getMonth](),minDateDate=minDate[getDate]();while(time<max){tickPositions.push(time);if(interval===oneYear){time=makeTime(minYear+i*multitude,0)/timeFactor}else if(interval===oneMonth){time=makeTime(minYear,minMonth+i*multitude)/timeFactor}else if(!useUTC&&(interval===oneDay||interval===oneWeek)){time=makeTime(minYear,minMonth,minDateDate+i*multitude*(interval===oneDay?1:7))}else{time+=interval*multitude}i++}tickPositions.push(time);tickPositions.unit=unit;return tickPositions}function ChartCounters(){this.color=0;this.symbol=0}ChartCounters.prototype={wrapColor:function(length){if(this.color>=length){this.color=0}},wrapSymbol:function(length){if(this.symbol>=length){this.symbol=0}}};function setAnimation(animation,chart){globalAnimation=pick(animation,chart.animation)}if(globalAdapter&&globalAdapter.init){globalAdapter.init()}if(!globalAdapter&&win.jQuery){var jQ=jQuery;each=function(arr,fn){var i=0,len=arr.length;for(;i<len;i++){if(fn.call(arr[i],arr[i],i,arr)===false){return i}}};grep=jQ.grep;map=function(arr,fn){var results=[],i=0,len=arr.length;for(;i<len;i++){results[i]=fn.call(arr[i],arr[i],i,arr)}return results};merge=function(){var args=arguments;return jQ.extend(true,null,args[0],args[1],args[2],args[3])};addEvent=function(el,event,fn){jQ(el).bind(event,fn)};removeEvent=function(el,eventType,handler){var func=doc.removeEventListener?'removeEventListener':'detachEvent';if(doc[func]&&!el[func]){el[func]=function(){}}jQ(el).unbind(eventType,handler)};fireEvent=function(el,type,eventArguments,defaultFunction){var event=jQ.Event(type),detachedType='detached'+type;extend(event,eventArguments);if(el[type]){el[detachedType]=el[type];el[type]=null}jQ(el).trigger(event);if(el[detachedType]){el[type]=el[detachedType];el[detachedType]=null}if(defaultFunction&&!event.isDefaultPrevented()){defaultFunction(event)}};animate=function(el,params,options){var $el=jQ(el);if(params.d){el.toD=params.d;params.d=1}$el.stop();$el.animate(params,options)};stop=function(el){jQ(el).stop()};jQ.extend(jQ.easing,{easeOutQuad:function(x,t,b,c,d){return-c*(t/=d)*(t-2)+b}});var oldStepDefault=jQuery.fx.step._default,oldCur=jQuery.fx.prototype.cur;jQ.fx.step._default=function(fx){var elem=fx.elem;if(elem.attr){elem.attr(fx.prop,fx.now)}else{oldStepDefault.apply(this,arguments)}};jQ.fx.step.d=function(fx){var elem=fx.elem;if(!fx.started){var ends=pathAnim.init(elem,elem.d,elem.toD);fx.start=ends[0];fx.end=ends[1];fx.started=true}elem.attr('d',pathAnim.step(fx.start,fx.end,fx.pos,elem.toD))};jQ.fx.prototype.cur=function(){var elem=this.elem,r;if(elem.attr){r=elem.attr(this.prop)}else{r=oldCur.apply(this,arguments)}return r}}pathAnim={init:function(elem,fromD,toD){fromD=fromD||'';var shift=elem.shift,bezier=fromD.indexOf('C')>-1,numParams=bezier?7:3,endLength,slice,i,start=fromD.split(' '),end=[].concat(toD),startBaseLine,endBaseLine,sixify=function(arr){i=arr.length;while(i--){if(arr[i]===M){arr.splice(i+1,0,arr[i+1],arr[i+2],arr[i+1],arr[i+2])}}};if(bezier){sixify(start);sixify(end)}if(elem.isArea){startBaseLine=start.splice(start.length-6,6);endBaseLine=end.splice(end.length-6,6)}if(shift===1){end=[].concat(end).splice(0,numParams).concat(end)}elem.shift=0;if(start.length){endLength=end.length;while(start.length<endLength){slice=[].concat(start).splice(start.length-numParams,numParams);if(bezier){slice[numParams-6]=slice[numParams-2];slice[numParams-5]=slice[numParams-1]}start=start.concat(slice)}}if(startBaseLine){start=start.concat(startBaseLine);end=end.concat(endBaseLine)}return[start,end]},step:function(start,end,pos,complete){var ret=[],i=start.length,startVal;if(pos===1){ret=complete}else if(i===end.length&&pos<1){while(i--){startVal=parseFloat(start[i]);ret[i]=isNaN(startVal)?start[i]:pos*(parseFloat(end[i]-startVal))+startVal}}else{ret=end}return ret}};function setTimeMethods(){var useUTC=defaultOptions.global.useUTC;makeTime=useUTC?Date.UTC:function(year,month,date,hours,minutes,seconds){return new Date(year,month,pick(date,1),pick(hours,0),pick(minutes,0),pick(seconds,0)).getTime()};getMinutes=useUTC?'getUTCMinutes':'getMinutes';getHours=useUTC?'getUTCHours':'getHours';getDay=useUTC?'getUTCDay':'getDay';getDate=useUTC?'getUTCDate':'getDate';getMonth=useUTC?'getUTCMonth':'getMonth';getFullYear=useUTC?'getUTCFullYear':'getFullYear';setMinutes=useUTC?'setUTCMinutes':'setMinutes';setHours=useUTC?'setUTCHours':'setHours';setDate=useUTC?'setUTCDate':'setDate';setMonth=useUTC?'setUTCMonth':'setMonth';setFullYear=useUTC?'setUTCFullYear':'setFullYear'}function setOptions(options){defaultOptions=merge(defaultOptions,options);setTimeMethods();return defaultOptions}function getOptions(){return defaultOptions}function discardElement(element){if(!garbageBin){garbageBin=createElement(DIV)}if(element){garbageBin.appendChild(element)}garbageBin.innerHTML=''}var defaultLabelOptions={enabled:true,align:'center',x:0,y:15,style:{color:'#666',fontSize:'11px',lineHeight:'14px'}};defaultOptions={colors:['#4572A7','#AA4643','#89A54E','#80699B','#3D96AE','#DB843D','#92A8CD','#A47D7C','#B5CA92'],symbols:['circle','diamond','square','triangle','triangle-down'],lang:{loading:'Loading...',months:['January','February','March','April','May','June','July','August','September','October','November','December'],weekdays:['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'],decimalPoint:'.',resetZoom:'Reset zoom',resetZoomTitle:'Reset zoom level 1:1',thousandsSep:','},global:{useUTC:true},chart:{borderColor:'#4572A7',borderRadius:5,defaultSeriesType:'line',ignoreHiddenSeries:true,spacingTop:10,spacingRight:10,spacingBottom:15,spacingLeft:10,style:{fontFamily:'"Lucida Grande", "Lucida Sans Unicode", Verdana, Arial, Helvetica, sans-serif',fontSize:'12px'},backgroundColor:'#FFFFFF',plotBorderColor:'#C0C0C0'},title:{text:'Chart title',align:'center',y:15,style:{color:'#3E576F',fontSize:'16px'}},subtitle:{text:'',align:'center',y:30,style:{color:'#6D869F'}},plotOptions:{line:{allowPointSelect:false,showCheckbox:false,animation:{duration:1000},events:{},lineWidth:2,shadow:true,marker:{enabled:true,lineWidth:0,radius:4,lineColor:'#FFFFFF',states:{hover:{},select:{fillColor:'#FFFFFF',lineColor:'#000000',lineWidth:2}}},point:{events:{}},dataLabels:merge(defaultLabelOptions,{enabled:false,y:-6,formatter:function(){return this.y}}),cropThreshold:300,showInLegend:true,states:{hover:{marker:{}},select:{marker:{}}},stickyTracking:true}},labels:{style:{position:ABSOLUTE,color:'#3E576F'}},legend:{enabled:true,align:'center',layout:'horizontal',labelFormatter:function(){return this.name},borderWidth:1,borderColor:'#909090',borderRadius:5,shadow:false,style:{padding:'5px'},itemStyle:{cursor:'pointer',color:'#3E576F'},itemHoverStyle:{cursor:'pointer',color:'#000000'},itemHiddenStyle:{color:'#C0C0C0'},itemCheckboxStyle:{position:ABSOLUTE,width:'13px',height:'13px'},symbolWidth:16,symbolPadding:5,verticalAlign:'bottom',x:0,y:0},loading:{hideDuration:100,labelStyle:{fontWeight:'bold',position:RELATIVE,top:'1em'},showDuration:100,style:{position:ABSOLUTE,backgroundColor:'white',opacity:0.5,textAlign:'center'}},tooltip:{enabled:true,backgroundColor:'rgba(255, 255, 255, .85)',borderWidth:2,borderRadius:5,shadow:true,snap:hasTouch?25:10,style:{color:'#333333',fontSize:'12px',padding:'5px',whiteSpace:'nowrap'}},toolbar:{itemStyle:{color:'#4572A7',cursor:'pointer'}},credits:{enabled:true,text:'Highstock Beta',href:'http://www.highcharts.com',position:{align:'right',x:-10,verticalAlign:'bottom',y:-5},style:{cursor:'pointer',color:'#909090',fontSize:'10px'}}};var defaultXAxisOptions={dateTimeLabelFormats:hash(MILLISECOND,'%H:%M:%S.%L',SECOND,'%H:%M:%S',MINUTE,'%H:%M',HOUR,'%H:%M',DAY,'%e. %b',WEEK,'%e. %b',MONTH,'%b \'%y',YEAR,'%Y'),endOnTick:false,gridLineColor:'#C0C0C0',labels:defaultLabelOptions,lineColor:'#C0D0E0',lineWidth:1,max:null,min:null,minPadding:0.01,maxPadding:0.01,minorGridLineColor:'#E0E0E0',minorGridLineWidth:1,minorTickColor:'#A0A0A0',minorTickLength:2,minorTickPosition:'outside',startOfWeek:1,startOnTick:false,tickColor:'#C0D0E0',tickLength:5,tickmarkPlacement:'between',tickPixelInterval:100,tickPosition:'outside',tickWidth:1,title:{align:'middle',style:{color:'#6D869F',fontWeight:'bold'}},type:'linear'},defaultYAxisOptions=merge(defaultXAxisOptions,{endOnTick:true,gridLineWidth:1,tickPixelInterval:72,showLastLabel:true,labels:{align:'right',x:-8,y:3},lineWidth:0,maxPadding:0.05,minPadding:0.05,startOnTick:true,tickWidth:0,title:{rotation:270,text:'Y-values'},stackLabels:{enabled:false,formatter:function(){return this.total},style:defaultLabelOptions.style}}),defaultLeftAxisOptions={labels:{align:'right',x:-8,y:null},title:{rotation:270}},defaultRightAxisOptions={labels:{align:'left',x:8,y:null},title:{rotation:90}},defaultBottomAxisOptions={labels:{align:'center',x:0,y:14},title:{rotation:0}},defaultTopAxisOptions=merge(defaultBottomAxisOptions,{labels:{y:-5}});var defaultPlotOptions=defaultOptions.plotOptions,defaultSeriesOptions=defaultPlotOptions.line;defaultPlotOptions.spline=merge(defaultSeriesOptions);defaultPlotOptions.scatter=merge(defaultSeriesOptions,{lineWidth:0,states:{hover:{lineWidth:0}}});defaultPlotOptions.area=merge(defaultSeriesOptions,{threshold:0});defaultPlotOptions.areaspline=merge(defaultPlotOptions.area);defaultPlotOptions.column=merge(defaultSeriesOptions,{borderColor:'#FFFFFF',borderWidth:1,borderRadius:0,groupPadding:0.2,marker:null,pointPadding:0.1,minPointLength:0,cropThreshold:50,padXAxis:true,states:{hover:{brightness:0.1,shadow:false},select:{color:'#C0C0C0',borderColor:'#000000',shadow:false}},dataLabels:{y:null,verticalAlign:null},threshold:0});defaultPlotOptions.bar=merge(defaultPlotOptions.column,{dataLabels:{align:'left',x:5,y:0}});defaultPlotOptions.pie=merge(defaultSeriesOptions,{borderColor:'#FFFFFF',borderWidth:1,center:['50%','50%'],colorByPoint:true,dataLabels:{distance:30,enabled:true,formatter:function(){return this.point.name},y:5},legendType:'point',marker:null,size:'75%',showInLegend:false,slicedOffset:10,states:{hover:{brightness:0.1,shadow:false}}});setTimeMethods();var Color=function(input){var rgba=[],result;function init(input){result=/rgba\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]?(?:\.[0-9]+)?)\s*\)/.exec(input);if(result){rgba=[pInt(result[1]),pInt(result[2]),pInt(result[3]),parseFloat(result[4],10)]}else{result=/#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec(input);if(result){rgba=[pInt(result[1],16),pInt(result[2],16),pInt(result[3],16),1]}}}function get(format){var ret;if(rgba&&!isNaN(rgba[0])){if(format==='rgb'){ret='rgb('+rgba[0]+','+rgba[1]+','+rgba[2]+')'}else if(format==='a'){ret=rgba[3]}else{ret='rgba('+rgba.join(',')+')'}}else{ret=input}return ret}function brighten(alpha){if(isNumber(alpha)&&alpha!==0){var i;for(i=0;i<3;i++){rgba[i]+=pInt(alpha*255);if(rgba[i]<0){rgba[i]=0}if(rgba[i]>255){rgba[i]=255}}}return this}function setOpacity(alpha){rgba[3]=alpha;return this}init(input);return{get:get,brighten:brighten,setOpacity:setOpacity}};function SVGElement(){}SVGElement.prototype={init:function(renderer,nodeName){this.element=doc.createElementNS(SVG_NS,nodeName);this.renderer=renderer},animate:function(params,options,complete){var animOptions=pick(options,globalAnimation,true);if(animOptions){animOptions=merge(animOptions);if(complete){animOptions.complete=complete}animate(this,params,animOptions)}else{this.attr(params);if(complete){complete()}}},attr:function(hash,val){var wrapper=this,key,value,result,i,child,element=wrapper.element,nodeName=element.nodeName,renderer=wrapper.renderer,skipAttr,shadows=wrapper.shadows,hasSetSymbolSize,ret=wrapper;if(isString(hash)&&defined(val)){key=hash;hash={};hash[key]=val}if(isString(hash)){key=hash;if(nodeName==='circle'){key={x:'cx',y:'cy'}[key]||key}else if(key==='strokeWidth'){key='stroke-width'}ret=attr(element,key)||wrapper[key]||0;if(key!=='d'&&key!=='visibility'){ret=parseFloat(ret)}}else{for(key in hash){skipAttr=false;value=hash[key];fireEvent(wrapper,'setAttr',{key:key,value:value},function(e){result=e.result;if(defined(result)&&result!==false){value=result}if(key==='d'){if(value&&value.join){value=value.join(' ')}if(/(NaN| {2}|^$)/.test(value)){value='M 0 0'}wrapper.d=value}else if(key==='x'&&nodeName==='text'){for(i=0;i<element.childNodes.length;i++){child=element.childNodes[i];if(attr(child,'x')===attr(element,'x')){attr(child,'x',value)}}if(wrapper.rotation){attr(element,'transform','rotate('+wrapper.rotation+' '+value+' '+pInt(hash.y||attr(element,'y'))+')')}}else if(key==='fill'){value=renderer.color(value,element,key)}else if(nodeName==='circle'&&(key==='x'||key==='y')){key={x:'cx',y:'cy'}[key]||key}else if(nodeName==='rect'&&key==='r'){attr(element,{rx:value,ry:value});skipAttr=true}else if(key==='translateX'||key==='translateY'||key==='rotation'||key==='verticalAlign'){wrapper[key]=value;wrapper.updateTransform();skipAttr=true}else if(key==='stroke'){value=renderer.color(value,element,key)}else if(key==='dashstyle'){key='stroke-dasharray';value=value&&value.toLowerCase();if(value==='solid'){value=NONE}else if(value){value=value.replace('shortdashdotdot','3,1,1,1,1,1,').replace('shortdashdot','3,1,1,1').replace('shortdot','1,1,').replace('shortdash','3,1,').replace('longdash','8,3,').replace(/dot/g,'1,3,').replace('dash','4,3,').replace(/,$/,'').split(',');i=value.length;while(i--){value[i]=pInt(value[i])*hash['stroke-width']}value=value.join(',')}}else if(key==='isTracker'){wrapper[key]=value}else if(key==='width'){value=pInt(value)}else if(key==='align'){key='text-anchor';value={left:'start',center:'middle',right:'end'}[value]}if(key==='strokeWidth'){key='stroke-width'}if(isWebKit&&key==='stroke-width'&&value===0){value=0.000001}if(wrapper.symbolName&&/^(x|y|r|start|end|innerR)/.test(key)){if(!hasSetSymbolSize){wrapper.symbolAttr(hash);hasSetSymbolSize=true}skipAttr=true}if(shadows&&/^(width|height|visibility|x|y|d|transform)$/.test(key)){i=shadows.length;while(i--){attr(shadows[i],key,value)}}if((key==='width'||key==='height')&&nodeName==='rect'&&value<0){value=0}if(key==='text'){wrapper.textStr=value;if(wrapper.added){renderer.buildText(wrapper)}}else if(!skipAttr){attr(element,key,value)}if(e.callback){e.callback()}})}}return ret},symbolAttr:function(hash){var wrapper=this;each(['x','y','r','start','end','width','height','innerR','anchorX','anchorY'],function(key){wrapper[key]=pick(hash[key],wrapper[key])});wrapper.attr({d:wrapper.renderer.symbols[wrapper.symbolName](wrapper.x,wrapper.y,wrapper.width,wrapper.height,wrapper)})},clip:function(clipRect){return this.attr('clip-path','url('+this.renderer.url+'#'+clipRect.id+')')},crisp:function(strokeWidth,x,y,width,height){var wrapper=this,element=wrapper.element,key,attribs={},values={},normalizer;strokeWidth=strokeWidth||wrapper.strokeWidth||(wrapper.attr&&wrapper.attr('stroke-width'))||0;normalizer=strokeWidth%2/2;values.x=mathFloor(x||wrapper.x||0)+normalizer;values.y=mathFloor(y||wrapper.y||0)+normalizer;values.width=mathFloor((width||wrapper.width||0)-2*normalizer);values.height=mathFloor((height||wrapper.height||0)-2*normalizer);values.strokeWidth=strokeWidth;for(key in values){if(wrapper[key]!==values[key]){wrapper[key]=attribs[key]=values[key]}}return attribs},css:function(styles){var elemWrapper=this,elem=elemWrapper.element,textWidth=styles&&styles.width&&elem.nodeName==='text',n,serializedCss,hyphenate=function(a,b){return'-'+b.toLowerCase()};if(styles&&styles.color){styles.fill=styles.color}styles=extend(elemWrapper.styles,styles);elemWrapper.styles=styles;if(isIE&&!hasSVG){if(textWidth){delete styles.width}css(elemWrapper.element,styles)}else{for(n in styles){serializedCss+=n.replace(/([A-Z])/g,hyphenate)+':'+styles[n]+';'}elemWrapper.attr({style:serializedCss})}if(textWidth&&elemWrapper.added){elemWrapper.renderer.buildText(elemWrapper)}return elemWrapper},on:function(eventType,handler){var fn=handler;if(hasTouch&&eventType==='click'){eventType='touchstart';fn=function(e){e.preventDefault();handler()}}this.element['on'+eventType]=fn;return this},translate:function(x,y){return this.attr({translateX:x,translateY:y})},invert:function(){var wrapper=this;wrapper.inverted=true;wrapper.updateTransform();return wrapper},updateTransform:function(){var wrapper=this,translateX=wrapper.translateX||0,translateY=wrapper.translateY||0,inverted=wrapper.inverted,rotation=wrapper.rotation,shadows=wrapper.shadows,transform=[];if(inverted){translateX+=wrapper.attr('width');translateY+=wrapper.attr('height')}if(translateX||translateY){transform.push('translate('+translateX+','+translateY+')')}if(inverted){transform.push('rotate(90) scale(-1,1)')}else if(rotation){transform.push('rotate('+rotation+' '+wrapper.x+' '+wrapper.y+')')}if(transform.length){attr(wrapper.element,'transform',transform.join(' '));if(shadows){each(shadows,function(shadow){attr(shadow,'transform','translate('+(translateX+1)+','+(translateY+1)+')')})}}},toFront:function(){var element=this.element;element.parentNode.appendChild(element);return this},align:function(alignOptions,alignByTranslate,box){var elemWrapper=this;if(!alignOptions){alignOptions=elemWrapper.alignOptions;alignByTranslate=elemWrapper.alignByTranslate}else{elemWrapper.alignOptions=alignOptions;elemWrapper.alignByTranslate=alignByTranslate;if(!box){elemWrapper.renderer.alignedObjects.push(elemWrapper)}}box=pick(box,elemWrapper.renderer);var align=alignOptions.align,vAlign=alignOptions.verticalAlign,x=(box.x||0)+(alignOptions.x||0),y=(box.y||0)+(alignOptions.y||0),attribs={};if(/^(right|center)$/.test(align)){x+=(box.width-(alignOptions.width||0))/{right:1,center:2}[align]}attribs[alignByTranslate?'translateX':'x']=mathRound(x);if(/^(bottom|middle)$/.test(vAlign)){y+=(box.height-(alignOptions.height||0))/({bottom:1,middle:2}[vAlign]||1)}attribs[alignByTranslate?'translateY':'y']=mathRound(y);elemWrapper[elemWrapper.placed?'animate':'attr'](attribs);elemWrapper.placed=true;elemWrapper.alignAttr=attribs;return elemWrapper},getBBox:function(){var bBox,width,height,rotation=this.rotation,rad=rotation*deg2rad;try{bBox=extend({},this.element.getBBox())}catch(e){bBox={width:0,height:0}}width=bBox.width;height=bBox.height;if(rotation){bBox.width=mathAbs(height*mathSin(rad))+mathAbs(width*mathCos(rad));bBox.height=mathAbs(height*mathCos(rad))+mathAbs(width*mathSin(rad))}return bBox},show:function(){return this.attr({visibility:VISIBLE})},hide:function(){return this.attr({visibility:HIDDEN})},add:function(parent){var renderer=this.renderer,parentWrapper=parent||renderer,parentNode=parentWrapper.element||renderer.box,childNodes=parentNode.childNodes,element=this.element,zIndex=attr(element,'zIndex'),otherElement,otherZIndex,i,inserted;this.parentInverted=parent&&parent.inverted;if(this.textStr!==undefined){renderer.buildText(this)}if(zIndex){parentWrapper.handleZ=true;zIndex=pInt(zIndex)}if(parentWrapper.handleZ){for(i=0;i<childNodes.length;i++){otherElement=childNodes[i];otherZIndex=attr(otherElement,'zIndex');if(otherElement!==element&&(pInt(otherZIndex)>zIndex||(!defined(zIndex)&&defined(otherZIndex)))){parentNode.insertBefore(element,otherElement);inserted=true;break}}}if(!inserted){parentNode.appendChild(element)}this.added=true;fireEvent(this,'add');return this},destroy:function(){var wrapper=this,element=wrapper.element||{},shadows=wrapper.shadows,box=wrapper.box,parentNode=element.parentNode,key;element.onclick=element.onmouseout=element.onmouseover=element.onmousemove=null;stop(wrapper);if(parentNode){parentNode.removeChild(element)}if(shadows){each(shadows,function(shadow){parentNode=shadow.parentNode;if(parentNode){parentNode.removeChild(shadow)}})}if(box){box.destroy()}erase(wrapper.renderer.alignedObjects,wrapper);for(key in wrapper){delete wrapper[key]}return null},empty:function(){var element=this.element,childNodes=element.childNodes,i=childNodes.length;while(i--){element.removeChild(childNodes[i])}},shadow:function(apply,group){var shadows=[],i,shadow,element=this.element,transform=this.parentInverted?'(-1,-1)':'(1,1)';if(apply){for(i=1;i<=3;i++){shadow=element.cloneNode(0);attr(shadow,{'isShadow':'true','stroke':'rgb(0, 0, 0)','stroke-opacity':0.05*i,'stroke-width':7-2*i,'transform':'translate'+transform,'fill':NONE});if(group){group.element.appendChild(shadow)}else{element.parentNode.insertBefore(shadow,element)}shadows.push(shadow)}this.shadows=shadows}return this}};var SVGRenderer=function(){this.init.apply(this,arguments)};SVGRenderer.prototype={Element:SVGElement,init:function(container,width,height,forExport){var renderer=this,loc=location,boxWrapper;boxWrapper=renderer.createElement('svg').attr({xmlns:SVG_NS,version:'1.1'});container.appendChild(boxWrapper.element);renderer.box=boxWrapper.element;renderer.boxWrapper=boxWrapper;renderer.alignedObjects=[];renderer.url=isIE?'':loc.href.replace(/#.*?$/,'');renderer.defs=this.createElement('defs').add();renderer.forExport=forExport;renderer.setSize(width,height,false)},createElement:function(nodeName){var wrapper=new this.Element();wrapper.init(this,nodeName);return wrapper},buildText:function(wrapper){var textNode=wrapper.element,lines=pick(wrapper.textStr,'').toString().replace(/<(b|strong)>/g,'<span style="font-weight:bold">').replace(/<(i|em)>/g,'<span style="font-style:italic">').replace(/<a/g,'<span').replace(/<\/(b|strong|i|em|a)>/g,'</span>').split(/<br.*?>/g),childNodes=textNode.childNodes,styleRegex=/style="([^"]+)"/,hrefRegex=/href="([^"]+)"/,parentX=attr(textNode,'x'),textStyles=wrapper.styles,reverse=isFirefox&&textStyles&&textStyles.HcDirection==='rtl'&&!this.forExport&&pInt(userAgent.split('Firefox/')[1])<4,arr,width=textStyles&&pInt(textStyles.width),textLineHeight=textStyles&&textStyles.lineHeight,lastLine,GET_COMPUTED_STYLE='getComputedStyle',i=childNodes.length;while(i--){textNode.removeChild(childNodes[i])}if(width&&!wrapper.added){this.box.appendChild(textNode)}each(lines,function(line,lineNo){var spans,spanNo=0,lineHeight;line=line.replace(/<span/g,'|||<span').replace(/<\/span>/g,'</span>|||');spans=line.split('|||');each(spans,function(span){if(span!==''||spans.length===1){var attributes={},tspan=doc.createElementNS(SVG_NS,'tspan');if(styleRegex.test(span)){attr(tspan,'style',span.match(styleRegex)[1].replace(/(;| |^)color([ :])/,'$1fill$2'))}if(hrefRegex.test(span)){attr(tspan,'onclick','location.href=\"'+span.match(hrefRegex)[1]+'\"');css(tspan,{cursor:'pointer'})}span=(span.replace(/<(.|\n)*?>/g,'')||' ').replace(/&lt;/g,'<').replace(/&gt;/g,'>');if(reverse){arr=[];i=span.length;while(i--){arr.push(span.charAt(i))}span=arr.join('')}tspan.appendChild(doc.createTextNode(span));if(!spanNo){attributes.x=parentX}else{attributes.dx=3}if(!spanNo){if(lineNo){if(!hasSVG&&wrapper.renderer.forExport){css(tspan,{display:'block'})}lineHeight=win[GET_COMPUTED_STYLE]&&win[GET_COMPUTED_STYLE](lastLine,null).getPropertyValue('line-height');if(!lineHeight||isNaN(lineHeight)){lineHeight=textLineHeight||lastLine.offsetHeight||18}attr(tspan,'dy',lineHeight)}lastLine=tspan}attr(tspan,attributes);textNode.appendChild(tspan);spanNo++;if(width){var words=span.replace(/-/g,'- ').split(' '),tooLong,actualWidth,rest=[];while(words.length||rest.length){actualWidth=textNode.getBBox().width;tooLong=actualWidth>width;if(!tooLong||words.length===1){words=rest;rest=[];if(words.length){tspan=doc.createElementNS(SVG_NS,'tspan');attr(tspan,{dy:textLineHeight||16,x:parentX});textNode.appendChild(tspan);if(actualWidth>width){width=actualWidth}}}else{tspan.removeChild(tspan.firstChild);rest.unshift(words.pop())}if(words.length){tspan.appendChild(doc.createTextNode(words.join(' ').replace(/- /g,'-')))}}}}})})},button:function(text,x,y,callback,normalState,hoverState,pressedState){var label=this.label(text,x,y),curState=0,stateOptions,stateStyle,normalStyle,hoverStyle,pressedStyle,STYLE='style';normalState=merge(hash(STROKE_WIDTH,1,STROKE,'#999',FILL,hash(LINEAR_GRADIENT,[0,0,0,14],STOPS,[[0,'#FFF'],[1,'#DDD']]),'r',3,'padding',3,STYLE,hash('color','black')),normalState);normalStyle=normalState[STYLE];delete normalState[STYLE];hoverState=merge(normalState,hash(STROKE,'#68A',FILL,hash(LINEAR_GRADIENT,[0,0,0,14],STOPS,[[0,'#FFF'],[1,'#ACF']])),hoverState);hoverStyle=hoverState[STYLE];delete hoverState[STYLE];pressedState=merge(normalState,hash(STROKE,'#68A',FILL,hash(LINEAR_GRADIENT,[0,0,0,14],STOPS,[[0,'#9BD'],[1,'#CDF']])),pressedState);pressedStyle=pressedState[STYLE];delete pressedState[STYLE];addEvent(label.element,'mouseenter',function(){label.attr(hoverState).css(hoverStyle)});addEvent(label.element,'mouseleave',function(){stateOptions=[normalState,hoverState,pressedState][curState];stateStyle=[normalStyle,hoverStyle,pressedStyle][curState];label.attr(stateOptions).css(stateStyle)});label.setState=function(state){curState=state;if(!state){label.attr(normalState).css(normalStyle)}else if(state===2){label.attr(pressedState).css(pressedStyle)}};return label.on('click',function(){callback.call(label)}).attr(normalState).css(extend({cursor:'default'},normalStyle))},crispLine:function(points,width){if(points[1]===points[4]){points[1]=points[4]=mathRound(points[1])+(width%2/2)}if(points[2]===points[5]){points[2]=points[5]=mathRound(points[2])+(width%2/2)}return points},path:function(path){return this.createElement('path').attr({d:path,fill:NONE})},circle:function(x,y,r){var attr=isObject(x)?x:{x:x,y:y,r:r};return this.createElement('circle').attr(attr)},arc:function(x,y,r,innerR,start,end){if(isObject(x)){y=x.y;r=x.r;innerR=x.innerR;start=x.start;end=x.end;x=x.x}return this.symbol('arc',x||0,y||0,r||0,r||0,{innerR:innerR||0,start:start||0,end:end||0})},rect:function(x,y,width,height,r,strokeWidth){if(isObject(x)){y=x.y;width=x.width;height=x.height;r=x.r;strokeWidth=x.strokeWidth;x=x.x}var wrapper=this.createElement('rect').attr({rx:r,ry:r,fill:NONE});return wrapper.attr(wrapper.crisp(strokeWidth,x,y,mathMax(width,0),mathMax(height,0)))},setSize:function(width,height,animate){var renderer=this,alignedObjects=renderer.alignedObjects,i=alignedObjects.length;renderer.width=width;renderer.height=height;renderer.boxWrapper[pick(animate,true)?'animate':'attr']({width:width,height:height});while(i--){alignedObjects[i].align()}},g:function(name){return this.createElement('g').attr(defined(name)&&{'class':PREFIX+name})},image:function(src,x,y,width,height){var attribs={preserveAspectRatio:NONE},elemWrapper;if(arguments.length>1){extend(attribs,{x:x,y:y,width:width,height:height})}elemWrapper=this.createElement('image').attr(attribs);if(elemWrapper.element.setAttributeNS){elemWrapper.element.setAttributeNS('http://www.w3.org/1999/xlink','href',src)}else{elemWrapper.element.setAttribute('hc-svg-href',src)}return elemWrapper},symbol:function(symbol,x,y,width,height,options){var obj,symbolFn=this.symbols[symbol],path=symbolFn&&symbolFn(mathRound(x),mathRound(y),width,height,options),imageRegex=/^url\((.*?)\)$/,imageSrc,imageSize;if(path){obj=this.path(path);extend(obj,{symbolName:symbol,x:x,y:y,width:width,height:height});if(options){extend(obj,options)}}else if(imageRegex.test(symbol)){var centerImage=function(img,size){img.attr({width:size[0],height:size[1]}).translate(-mathRound(size[0]/2),-mathRound(size[1]/2))};imageSrc=symbol.match(imageRegex)[1];imageSize=symbolSizes[imageSrc];obj=this.image(imageSrc).attr({x:x,y:y});if(imageSize){centerImage(obj,imageSize)}else{obj.attr({width:0,height:0});createElement('img',{onload:function(){var img=this;centerImage(obj,symbolSizes[imageSrc]=[img.width,img.height])},src:imageSrc})}}return obj},symbols:{'circle':function(x,y,w,h){var cpw=0.166*w;return[M,x+w/2,y,'C',x+w+cpw,y,x+w+cpw,y+h,x+w/2,y+h,'C',x-cpw,y+h,x-cpw,y,x+w/2,y,'Z']},'square':function(x,y,w,h){return[M,x,y,L,x+w,y,x+w,y+h,x,y+h,'Z']},'triangle':function(x,y,w,h){return[M,x+w/2,y,L,x+w,y+h,x,y+h,'Z']},'triangle-down':function(x,y,w,h){return[M,x,y,L,x+w,y,x+w/2,y+h,'Z']},'diamond':function(x,y,w,h){return[M,x+w/2,y,L,x+w,y+h/2,x+w/2,y+h,x,y+h/2,'Z']},'arc':function(x,y,w,h,options){var start=options.start,radius=w,end=options.end-0.000001,innerRadius=options.innerR,cosStart=mathCos(start),sinStart=mathSin(start),cosEnd=mathCos(end),sinEnd=mathSin(end),longArc=options.end-start<mathPI?0:1;return[M,x+radius*cosStart,y+radius*sinStart,'A',radius,radius,0,longArc,1,x+radius*cosEnd,y+radius*sinEnd,L,x+innerRadius*cosEnd,y+innerRadius*sinEnd,'A',innerRadius,innerRadius,0,longArc,0,x+innerRadius*cosStart,y+innerRadius*sinStart,'Z']}},clipRect:function(x,y,width,height){var wrapper,id=PREFIX+idCounter++,clipPath=this.createElement('clipPath').attr({id:id}).add(this.defs);wrapper=this.rect(x,y,width,height,0).add(clipPath);wrapper.id=id;return wrapper},color:function(color,elem,prop){var colorObject,regexRgba=/^rgba/;if(color&&color.linearGradient){var renderer=this,strLinearGradient='linearGradient',linearGradient=color[strLinearGradient],id=PREFIX+idCounter++,gradientObject,stopColor,stopOpacity;gradientObject=renderer.createElement(strLinearGradient).attr({id:id,gradientUnits:'userSpaceOnUse',x1:linearGradient[0],y1:linearGradient[1],x2:linearGradient[2],y2:linearGradient[3]}).add(renderer.defs);each(color.stops,function(stop){if(regexRgba.test(stop[1])){colorObject=Color(stop[1]);stopColor=colorObject.get('rgb');stopOpacity=colorObject.get('a')}else{stopColor=stop[1];stopOpacity=1}renderer.createElement('stop').attr({offset:stop[0],'stop-color':stopColor,'stop-opacity':stopOpacity}).add(gradientObject)});return'url('+this.url+'#'+id+')'}else if(regexRgba.test(color)){colorObject=Color(color);attr(elem,prop+'-opacity',colorObject.get('a'));return colorObject.get('rgb')}else{return color}},text:function(str,x,y){var renderer=this,defaultChartStyle=defaultOptions.chart.style,wrapper,box;x=mathRound(pick(x,0));y=mathRound(pick(y,0));wrapper=renderer.createElement('text').attr({x:x,y:y,text:str}).css({fontFamily:defaultChartStyle.fontFamily,fontSize:defaultChartStyle.fontSize});wrapper.x=x;wrapper.y=y;return wrapper},label:function(str,x,y,shape,anchorX,anchorY){var renderer=this,wrapper=renderer.text(str),box,bBox,align='left',padding=2,width,height,xAdjust,deferredAttr={};function updateBoxSize(){bBox=(width===undefined||height===undefined||wrapper.styles.textAlign)&&wrapper.getBBox(true);var w=(width||bBox.width)+2*padding,h=(height||bBox.height)+2*padding,anchors;xAdjust=mathRound(w*{left:0,center:0.5,right:1}[align]);anchors=anchorX!==undefined&&{anchorX:anchorX-x+xAdjust,anchorY:anchorY-y};if(!box){wrapper.box=box=shape?renderer.symbol(shape,0,0,w,h,anchors):renderer.rect(0,0,w,h,0,deferredAttr['stroke-width']);box.add()}box.attr(merge({width:w,height:h},anchors,deferredAttr));deferredAttr=null}function boxAttr(key,value){if(box){box.attr(key,value)}else{deferredAttr[key]=value}}addEvent(wrapper,'add',function(){updateBoxSize();var boxElem=box.element,wrapperElem=wrapper.element,zIndex=attr(wrapperElem,'zIndex');if(defined(zIndex)){attr(boxElem,'zIndex',zIndex)}wrapperElem.parentNode.insertBefore(boxElem,wrapperElem);wrapper.attr({x:x,y:y})});addEvent(wrapper,'setAttr',function(e){var key=e.key,value=e.value,elem=wrapper,textAlign,ret;if(key==='width'){width=value;ret=false}else if(key==='height'){height=value;ret=false}else if(key==='padding'){padding=value;ret=false}else if(key==='align'){align=value}else if(key==='visibility'||key==='zIndex'){boxAttr(key,value)}else if(key==='stroke'||key==='stroke-width'||key==='fill'||key==='r'){boxAttr(key,value);ret=false}else if(key==='x'){textAlign=wrapper.styles.textAlign;boxAttr('translateX',value-xAdjust);if(align==='left'&&defined(width)&&(textAlign==='center'||textAlign==='right')){value+={center:0.5,right:1}[textAlign]*(width-bBox.width)}ret=mathRound(value+{left:1,center:0,right:-1}[align]*padding)}else if(key==='y'){boxAttr('translateY',value);ret=mathRound(value+pInt(wrapper.styles.fontSize||12)*1.2)}else if(key==='text'){e.callback=updateBoxSize}if(ret!==UNDEFINED){return ret}});wrapper.txtToFront=wrapper.toFront;return extend(wrapper,{shadow:function(b){box.shadow(b);return wrapper},toFront:function(){box.toFront();wrapper.txtToFront()}})}};Renderer=SVGRenderer;var VMLRenderer;if(!hasSVG){var VMLElement=extendClass(SVGElement,{init:function(renderer,nodeName){var markup=['<',nodeName,' filled="f" stroked="f"'],style=['position: ',ABSOLUTE,';'];if(nodeName==='shape'||nodeName===DIV){style.push('left:0;top:0;width:10px;height:10px;')}if(docMode8){style.push('visibility: ',nodeName===DIV?HIDDEN:VISIBLE)}markup.push(' style="',style.join(''),'"/>');if(nodeName){markup=nodeName===DIV||nodeName==='span'||nodeName==='img'?markup.join(''):renderer.prepVML(markup);this.element=createElement(markup)}this.renderer=renderer},add:function(parent){var wrapper=this,renderer=wrapper.renderer,element=wrapper.element,box=renderer.box,inverted=parent&&parent.inverted,parentNode=parent?parent.element||parent:box;if(inverted){renderer.invertChild(element,parentNode)}if(docMode8&&parentNode.gVis===HIDDEN){css(element,{visibility:HIDDEN})}parentNode.appendChild(element);wrapper.added=true;if(wrapper.alignOnAdd&&!wrapper.deferUpdateTransform){wrapper.updateTransform()}fireEvent(wrapper,'add');return wrapper},attr:function(hash,val){var wrapper=this,key,value,i,result,element=wrapper.element||{},elemStyle=element.style,nodeName=element.nodeName,renderer=wrapper.renderer,symbolName=wrapper.symbolName,childNodes,hasSetSymbolSize,shadows=wrapper.shadows,skipAttr,ret=wrapper;if(isString(hash)&&defined(val)){key=hash;hash={};hash[key]=val}if(isString(hash)){key=hash;if(key==='strokeWidth'||key==='stroke-width'){ret=wrapper.strokeweight}else{ret=wrapper[key]}}else{for(key in hash){value=hash[key];skipAttr=false;fireEvent(wrapper,'setAttr',{key:key,value:value},function(e){result=e.result;if(defined(result)&&result!==false){value=result}if(symbolName&&/^(x|y|r|start|end|width|height|innerR)/.test(key)){if(!hasSetSymbolSize){wrapper.symbolAttr(hash);hasSetSymbolSize=true}skipAttr=true}else if(key==='d'){value=value||[];wrapper.d=value.join(' ');i=value.length;var convertedPath=[];while(i--){if(isNumber(value[i])){convertedPath[i]=mathRound(value[i]*10)-5}else if(value[i]==='Z'){convertedPath[i]='x'}else{convertedPath[i]=value[i]}}value=convertedPath.join(' ')||'x';element.path=value;if(shadows){i=shadows.length;while(i--){shadows[i].path=value}}skipAttr=true}else if(key==='zIndex'||key==='visibility'){if(docMode8&&key==='visibility'&&nodeName==='DIV'){element.gVis=value;childNodes=element.childNodes;i=childNodes.length;while(i--){css(childNodes[i],{visibility:value})}if(value===VISIBLE){value=null}}if(value){elemStyle[key]=value}skipAttr=true}else if(key==='width'||key==='height'){if(wrapper.updateClipping){wrapper[key]=value;wrapper.updateClipping()}else{elemStyle[key]=value}skipAttr=true}else if(/^(x|y)$/.test(key)){wrapper[key]=value;if(element.tagName==='SPAN'){wrapper.updateTransform()}else{elemStyle[{x:'left',y:'top'}[key]]=value}}else if(key==='class'){element.className=value}else if(key==='stroke'){value=renderer.color(value,element,key);key='strokecolor'}else if(key==='stroke-width'||key==='strokeWidth'){element.stroked=value?true:false;key='strokeweight';wrapper[key]=value;if(isNumber(value)){value+=PX}}else if(key==='dashstyle'){var strokeElem=element.getElementsByTagName('stroke')[0]||createElement(renderer.prepVML(['<stroke/>']),null,null,element);strokeElem[key]=value||'solid';wrapper.dashstyle=value;skipAttr=true}else if(key==='fill'){if(nodeName==='SPAN'){elemStyle.color=value}else{element.filled=value!==NONE?true:false;value=renderer.color(value,element,key);key='fillcolor'}}else if(key==='translateX'||key==='translateY'||key==='rotation'||key==='align'){if(key==='align'){key='textAlign'}wrapper[key]=value;wrapper.updateTransform();skipAttr=true}else if(key==='text'){this.bBox=null;element.innerHTML=value;skipAttr=true}if(shadows&&key==='visibility'){i=shadows.length;while(i--){shadows[i].style[key]=value}}if(!skipAttr){if(docMode8){try{element[key]=value}catch(e){console.log([element.tagName,key,value].join(', '))}}else{attr(element,key,value)}}if(e.callback){e.callback()}})}}return ret},clip:function(clipRect){var wrapper=this,clipMembers=clipRect.members;clipMembers.push(wrapper);wrapper.destroyClip=function(){erase(clipMembers,wrapper)};return wrapper.css(clipRect.getCSS(wrapper.inverted))},css:function(styles){var wrapper=this,element=wrapper.element,textWidth=styles&&element.tagName==='SPAN'&&styles.width;if(textWidth){delete styles.width;wrapper.textWidth=textWidth;wrapper.updateTransform()}wrapper.styles=extend(wrapper.styles,styles);css(wrapper.element,styles);return wrapper},destroy:function(){var wrapper=this;if(wrapper.destroyClip){wrapper.destroyClip()}SVGElement.prototype.destroy.apply(wrapper)},empty:function(){var element=this.element,childNodes=element.childNodes,i=childNodes.length,node;while(i--){node=childNodes[i];node.parentNode.removeChild(node)}},getBBox:function(refresh){var wrapper=this,element=wrapper.element,bBox=wrapper.bBox;if(!bBox||refresh){if(element.nodeName==='text'){element.style.position=ABSOLUTE}bBox=wrapper.bBox={x:element.offsetLeft,y:element.offsetTop,width:element.offsetWidth,height:element.offsetHeight}}return bBox},on:function(eventType,handler){this.element['on'+eventType]=function(){var evt=win.event;evt.target=evt.srcElement;handler(evt)};return this},updateTransform:function(hash){if(!this.added){this.alignOnAdd=true;return}var wrapper=this,elem=wrapper.element,translateX=wrapper.translateX||0,translateY=wrapper.translateY||0,x=wrapper.x||0,y=wrapper.y||0,align=wrapper.textAlign||'left',alignCorrection={left:0,center:0.5,right:1}[align],nonLeft=align&&align!=='left',shadows=wrapper.shadows;if(translateX||translateY){css(elem,{marginLeft:translateX,marginTop:translateY});if(shadows){each(shadows,function(shadow){css(shadow,{marginLeft:translateX+1,marginTop:translateY+1})})}}if(wrapper.inverted){each(elem.childNodes,function(child){wrapper.renderer.invertChild(child,elem)})}if(elem.tagName==='SPAN'){var width,height,rotation=wrapper.rotation,lineHeight,radians=0,costheta=1,sintheta=0,quad,textWidth=pInt(wrapper.textWidth),xCorr=wrapper.xCorr||0,yCorr=wrapper.yCorr||0,currentTextTransform=[rotation,align,elem.innerHTML,wrapper.textWidth].join(',');if(currentTextTransform!==wrapper.cTT){if(defined(rotation)){radians=rotation*deg2rad;costheta=mathCos(radians);sintheta=mathSin(radians);css(elem,{filter:rotation?['progid:DXImageTransform.Microsoft.Matrix(M11=',costheta,', M12=',-sintheta,', M21=',sintheta,', M22=',costheta,', sizingMethod=\'auto expand\')'].join(''):NONE})}width=pick(wrapper.elemWidth,elem.offsetWidth);height=pick(wrapper.elemHeight,elem.offsetHeight);if(width>textWidth){css(elem,{width:textWidth+PX,display:'block',whiteSpace:'normal'});width=textWidth}lineHeight=mathRound((pInt(elem.style.fontSize)||12)*1.2);xCorr=costheta<0&&-width;yCorr=sintheta<0&&-height;quad=costheta*sintheta<0;xCorr+=sintheta*lineHeight*(quad?1-alignCorrection:alignCorrection);yCorr-=costheta*lineHeight*(rotation?(quad?alignCorrection:1-alignCorrection):1);if(nonLeft){xCorr-=width*alignCorrection*(costheta<0?-1:1);if(rotation){yCorr-=height*alignCorrection*(sintheta<0?-1:1)}css(elem,{textAlign:align})}wrapper.xCorr=xCorr;wrapper.yCorr=yCorr}css(elem,{left:x+xCorr,top:y+yCorr});wrapper.cTT=currentTextTransform}},shadow:function(apply,group){var shadows=[],i,element=this.element,renderer=this.renderer,shadow,elemStyle=element.style,markup,path=element.path;if(path&&typeof path.value!=='string'){path='x'}if(apply){for(i=1;i<=3;i++){markup=['<shape isShadow="true" strokeweight="',(7-2*i),'" filled="false" path="',path,'" coordsize="100,100" style="',element.style.cssText,'" />'];shadow=createElement(renderer.prepVML(markup),null,{left:pInt(elemStyle.left)+1,top:pInt(elemStyle.top)+1});markup=['<stroke color="black" opacity="',(0.05*i),'"/>'];createElement(renderer.prepVML(markup),null,null,shadow);if(group){group.element.appendChild(shadow)}else{element.parentNode.insertBefore(shadow,element)}shadows.push(shadow)}this.shadows=shadows}return this}});VMLRenderer=function(){this.init.apply(this,arguments)};VMLRenderer.prototype=merge(SVGRenderer.prototype,{Element:VMLElement,isIE8:userAgent.indexOf('MSIE 8.0')>-1,init:function(container,width,height){var renderer=this,boxWrapper;renderer.alignedObjects=[];boxWrapper=renderer.createElement(DIV);container.appendChild(boxWrapper.element);renderer.box=boxWrapper.element;renderer.boxWrapper=boxWrapper;renderer.setSize(width,height,false);if(!doc.namespaces.hcv){doc.namespaces.add('hcv','urn:schemas-microsoft-com:vml');doc.createStyleSheet().cssText='hcv\\:fill, hcv\\:path, hcv\\:shape, hcv\\:stroke'+'{ behavior:url(#default#VML); display: inline-block; } '}},clipRect:function(x,y,width,height){var clipRect=this.createElement();return extend(clipRect,{members:[],left:x,top:y,width:width,height:height,getCSS:function(inverted){var rect=this,top=rect.top,left=rect.left,right=left+rect.width,bottom=top+rect.height,ret={clip:'rect('+mathRound(inverted?left:top)+'px,'+mathRound(inverted?bottom:right)+'px,'+mathRound(inverted?right:bottom)+'px,'+mathRound(inverted?top:left)+'px)'};if(!inverted&&docMode8){extend(ret,{width:right+PX,height:bottom+PX})}return ret},updateClipping:function(){each(clipRect.members,function(member){member.css(clipRect.getCSS(member.inverted))})}})},color:function(color,elem,prop){var colorObject,regexRgba=/^rgba/,markup;if(color&&color.linearGradient){var stopColor,stopOpacity,linearGradient=color.linearGradient,angle,color1,opacity1,color2,opacity2;each(color.stops,function(stop,i){if(regexRgba.test(stop[1])){colorObject=Color(stop[1]);stopColor=colorObject.get('rgb');stopOpacity=colorObject.get('a')}else{stopColor=stop[1];stopOpacity=1}if(!i){color1=stopColor;opacity1=stopOpacity}else{color2=stopColor;opacity2=stopOpacity}});angle=90-math.atan((linearGradient[3]-linearGradient[1])/ (linearGradient[2]-linearGradient[0]))*180/mathPI;markup=['<',prop,' colors="0% ',color1,',100% ',color2,'" angle="',angle,'" opacity="',opacity2,'" o:opacity2="',opacity1,'" type="gradient" focus="100%" />'];createElement(this.prepVML(markup),null,null,elem)}else if(regexRgba.test(color)&&elem.tagName!=='IMG'){colorObject=Color(color);markup=['<',prop,' opacity="',colorObject.get('a'),'"/>'];createElement(this.prepVML(markup),null,null,elem);return colorObject.get('rgb')}else{return color}},prepVML:function(markup){var vmlStyle='display:inline-block;behavior:url(#default#VML);',isIE8=this.isIE8;markup=markup.join('');if(isIE8){markup=markup.replace('/>',' xmlns="urn:schemas-microsoft-com:vml" />');if(markup.indexOf('style="')===-1){markup=markup.replace('/>',' style="'+vmlStyle+'" />')}else{markup=markup.replace('style="','style="'+vmlStyle)}}else{markup=markup.replace('<','<hcv:')}return markup},text:function(str,x,y){var defaultChartStyle=defaultOptions.chart.style;return this.createElement('span').attr({text:str,x:mathRound(x),y:mathRound(y)}).css({whiteSpace:'nowrap',fontFamily:defaultChartStyle.fontFamily,fontSize:defaultChartStyle.fontSize})},path:function(path){return this.createElement('shape').attr({coordsize:'100 100',d:path})},circle:function(x,y,r){return this.symbol('circle').attr({x:x,y:y,r:r})},g:function(name){var wrapper,attribs;if(name){attribs={'className':PREFIX+name,'class':PREFIX+name}}wrapper=this.createElement(DIV).attr(attribs);return wrapper},image:function(src,x,y,width,height){var obj=this.createElement('img').attr({src:src});if(arguments.length>1){obj.css({left:x,top:y,width:width,height:height})}return obj},rect:function(x,y,width,height,r,strokeWidth){if(isObject(x)){y=x.y;width=x.width;height=x.height;strokeWidth=x.strokeWidth;x=x.x}var wrapper=this.symbol('rect');wrapper.r=r;return wrapper.attr(wrapper.crisp(strokeWidth,x,y,mathMax(width,0),mathMax(height,0)))},invertChild:function(element,parentNode){var parentStyle=parentNode.style;css(element,{flip:'x',left:pInt(parentStyle.width)-10,top:pInt(parentStyle.height)-10,rotation:-90})},symbols:{arc:function(x,y,w,h,options){var start=options.start,end=options.end,radius=w,cosStart=mathCos(start),sinStart=mathSin(start),cosEnd=mathCos(end),sinEnd=mathSin(end),innerRadius=options.innerR,circleCorrection=0.07/radius,innerCorrection=(innerRadius&&0.1/innerRadius)||0;if(end-start===0){return['x']}else if(2*mathPI-end+start<circleCorrection){cosEnd=-circleCorrection}else if(end-start<innerCorrection){cosEnd=mathCos(start+innerCorrection)}return['wa',x-radius,y-radius,x+radius,y+radius,x+radius*cosStart,y+radius*sinStart,x+radius*cosEnd,y+radius*sinEnd,'at',x-innerRadius,y-innerRadius,x+innerRadius,y+innerRadius,x+innerRadius*cosEnd,y+innerRadius*sinEnd,x+innerRadius*cosStart,y+innerRadius*sinStart,'x','e']},circle:function(x,y,w,h){return['wa',x,y,x+w,y+h,x+w,y+h/2, x+w,y+h/2, 'e']},rect:function(left,top,width,height,options){if(!defined(options)){return[]}var right=left+width,bottom=top+height,r=mathMin(options.r||0,width,height);return[M,left+r,top,L,right-r,top,'wa',right-2*r,top,right,top+2*r,right-r,top,right,top+r,L,right,bottom-r,'wa',right-2*r,bottom-2*r,right,bottom,right,bottom-r,right-r,bottom,L,left+r,bottom,'wa',left,bottom-2*r,left+2*r,bottom,left+r,bottom,left,bottom-r,L,left,top+r,'wa',left,top,left+2*r,top+2*r,left,top+r,left+r,top,'x','e']}}});Renderer=VMLRenderer}function Chart(options,callback){defaultXAxisOptions=merge(defaultXAxisOptions,defaultOptions.xAxis);defaultYAxisOptions=merge(defaultYAxisOptions,defaultOptions.yAxis);defaultOptions.xAxis=defaultOptions.yAxis=null;var seriesOptions=options.series;options.series=null;options=merge(defaultOptions,options);options.series=seriesOptions;var optionsChart=options.chart,optionsMargin=optionsChart.margin,margin=isObject(optionsMargin)?optionsMargin:[optionsMargin,optionsMargin,optionsMargin,optionsMargin],optionsMarginTop=pick(optionsChart.marginTop,margin[0]),optionsMarginRight=pick(optionsChart.marginRight,margin[1]),optionsMarginBottom=pick(optionsChart.marginBottom,margin[2]),optionsMarginLeft=pick(optionsChart.marginLeft,margin[3]),spacingTop=optionsChart.spacingTop,spacingRight=optionsChart.spacingRight,spacingBottom=optionsChart.spacingBottom,spacingLeft=optionsChart.spacingLeft,spacingBox,chartTitleOptions,chartSubtitleOptions,plotTop,marginRight,marginBottom,plotLeft,axisOffset,renderTo,renderToClone,container,containerId,containerWidth,containerHeight,chartWidth,chartHeight,oldChartWidth,oldChartHeight,chartBackground,plotBackground,plotBGImage,plotBorder,chart=this,chartEvents=optionsChart.events,runChartClick=chartEvents&&!!chartEvents.click,eventType,isInsidePlot,tooltip,mouseIsDown,loadingDiv,loadingSpan,loadingShown,plotHeight,plotWidth,tracker,trackerGroup,placeTrackerGroup,legend,legendWidth,legendHeight,chartPosition,hasCartesianSeries=optionsChart.showAxes,isResizing=0,axes=[],maxTicks,series=[],inverted,renderer,tooltipTick,tooltipInterval,hoverX,drawChartBox,getMargins,resetMargins,setChartSize,resize,zoom,zoomOut;function Axis(options){var isXAxis=options.isX,opposite=options.opposite,horiz=inverted?!isXAxis:isXAxis,side=horiz?(opposite?0:2):(opposite?1:3),stacks={};options=merge(isXAxis?defaultXAxisOptions:defaultYAxisOptions,[defaultTopAxisOptions,defaultRightAxisOptions,defaultBottomAxisOptions,defaultLeftAxisOptions][side],options);var axis=this,type=options.type,isDatetimeAxis=type==='datetime',isLog=type==='logarithmic',offset=options.offset||0,xOrY=isXAxis?'x':'y',axisLength,transA,transB,oldTransA,axisLeft,axisTop,axisWidth,axisHeight,axisBottom,axisRight,translate,getPlotLinePath,axisGroup,gridGroup,axisLine,dataMin,dataMax,associatedSeries,range=options.range,userMin,userMax,max=null,min=null,oldMin,oldMax,minPadding=options.minPadding,maxPadding=options.maxPadding,isLinked=defined(options.linkedTo),ignoreMinPadding,ignoreMaxPadding,usePercentage,events=options.events,eventType,padAxis,plotLinesAndBands=[],tickInterval,minorTickInterval,magnitude,tickPositions,ticks={},minorTicks={},alternateBands={},tickAmount,labelOffset,labelHeight,axisTitleMargin,dateTimeLabelFormat,categories=options.categories,labelFormatter=options.labels.formatter||function(){var value=this.value,ret;if(dateTimeLabelFormat){ret=dateFormat(dateTimeLabelFormat,value)}else if(tickInterval%1000000===0){ret=(value/1000000)+'M'}else if(tickInterval%1000===0){ret=(value/1000)+'k'}else if(!categories&&value>=1000){ret=numberFormat(value,0)}else{ret=value}return ret},staggerLines=horiz&&options.labels.staggerLines,reversed=options.reversed,tickmarkOffset=(categories&&options.tickmarkPlacement==='between')?0.5:0;function Tick(pos,minor){var tick=this;tick.pos=pos;tick.minor=minor;tick.isNew=true;if(!minor){tick.addLabel()}}Tick.prototype={attachLabel:function(){var label=this.label;if(label&&!this.added){label.deferUpdateTransform=true;label.add(axisGroup)}},updateTransformLabel:function(){var label=this.label;if(label){label.deferUpdateTransform=false;label.updateTransform()}},computeBBox:function(){var label=this.label,bBox;if(label){bBox=label.getBBox();label.elemWidth=bBox.width;label.elemHeight=bBox.height}},addLabel:function(){var pos=this.pos,labelOptions=options.labels,str,withLabel=!((pos===min&&!pick(options.showFirstLabel,1))||(pos===max&&!pick(options.showLastLabel,0))),width=(categories&&horiz&&categories.length&&!labelOptions.step&&!labelOptions.staggerLines&&!labelOptions.rotation&&plotWidth/categories.length)||(!horiz&&plotWidth/2),css,label=this.label;str=labelFormatter.call({isFirst:pos===tickPositions[0],isLast:pos===tickPositions[tickPositions.length-1],dateTimeLabelFormat:dateTimeLabelFormat,value:(categories&&categories[pos]?categories[pos]:pos)});css=width&&{width:mathMax(1,mathRound(width-2*(labelOptions.padding||10)))+PX};css=extend(css,labelOptions.style);if(!defined(label)){this.label=defined(str)&&withLabel&&labelOptions.enabled?renderer.text(str,0,0).attr({align:labelOptions.align,rotation:labelOptions.rotation}).css(css):null}else if(label){label.attr({text:str}).css(css)}},getLabelSize:function(){var label=this.label;return label?((this.labelBBox=label.getBBox()))[horiz?'height':'width']:0},render:function(index,old){var tick=this,major=!tick.minor,label=tick.label,pos=tick.pos,labelOptions=options.labels,gridLine=tick.gridLine,gridLineWidth=major?options.gridLineWidth:options.minorGridLineWidth,gridLineColor=major?options.gridLineColor:options.minorGridLineColor,dashStyle=major?options.gridLineDashStyle:options.minorGridLineDashStyle,gridLinePath,mark=tick.mark,markPath,tickLength=major?options.tickLength:options.minorTickLength,tickWidth=major?options.tickWidth:(options.minorTickWidth||0),tickColor=major?options.tickColor:options.minorTickColor,tickPosition=major?options.tickPosition:options.minorTickPosition,step=labelOptions.step,cHeight=(old&&oldChartHeight)||chartHeight,attribs,x,y;x=horiz?translate(pos+tickmarkOffset,null,null,old)+transB:axisLeft+offset+(opposite?((old&&oldChartWidth)||chartWidth)-axisRight-axisLeft:0);y=horiz?cHeight-axisBottom+offset-(opposite?axisHeight:0):cHeight-translate(pos+tickmarkOffset,null,null,old)-transB;if(gridLineWidth){gridLinePath=getPlotLinePath(pos+tickmarkOffset,gridLineWidth,old);if(gridLine===UNDEFINED){attribs={stroke:gridLineColor,'stroke-width':gridLineWidth};if(dashStyle){attribs.dashstyle=dashStyle}tick.gridLine=gridLine=gridLineWidth?renderer.path(gridLinePath).attr(attribs).add(gridGroup):null}if(gridLine&&gridLinePath){gridLine.animate({d:gridLinePath})}}if(tickWidth){if(tickPosition==='inside'){tickLength=-tickLength}if(opposite){tickLength=-tickLength}markPath=renderer.crispLine([M,x,y,L,x+(horiz?0:-tickLength),y+(horiz?tickLength:0)],tickWidth);if(mark){mark.animate({d:markPath})}else{tick.mark=renderer.path(markPath).attr({stroke:tickColor,'stroke-width':tickWidth}).add(axisGroup)}}if(label&&!isNaN(x)){x=x+labelOptions.x-(tickmarkOffset&&horiz?tickmarkOffset*transA*(reversed?-1:1):0);y=y+labelOptions.y-(tickmarkOffset&&!horiz?tickmarkOffset*transA*(reversed?1:-1):0);if(!defined(labelOptions.y)){y+=pInt(label.styles.lineHeight)*0.9-label.getBBox().height/2}if(staggerLines){y+=(index/(step||1)%staggerLines)*16}if(step){label[index%step?'hide':'show']()}label[tick.isNew?'attr':'animate']({x:x,y:y})}tick.isNew=false},destroy:function(){var tick=this,n;for(n in tick){if(tick[n]&&tick[n].destroy){tick[n].destroy()}}}};function PlotLineOrBand(options){var plotLine=this;if(options){plotLine.options=options;plotLine.id=options.id}return plotLine}PlotLineOrBand.prototype={render:function(){var plotLine=this,options=plotLine.options,optionsLabel=options.label,label=plotLine.label,width=options.width,to=options.to,toPath,from=options.from,dashStyle=options.dashStyle,svgElem=plotLine.svgElem,path=[],addEvent,eventType,xs,ys,x,y,color=options.color,zIndex=options.zIndex,events=options.events,attribs;if(width){path=getPlotLinePath(options.value,width);attribs={stroke:color,'stroke-width':width};if(dashStyle){attribs.dashstyle=dashStyle}}else if(defined(from)&&defined(to)){from=mathMax(from,min);to=mathMin(to,max);toPath=getPlotLinePath(to);path=getPlotLinePath(from);if(path&&toPath){path.push(toPath[4],toPath[5],toPath[1],toPath[2])}else{path=null}attribs={fill:color}}else{return}if(defined(zIndex)){attribs.zIndex=zIndex}if(svgElem){if(path){svgElem.animate({d:path},null,svgElem.onGetPath)}else{svgElem.hide();svgElem.onGetPath=function(){svgElem.show()}}}else if(path&&path.length){plotLine.svgElem=svgElem=renderer.path(path).attr(attribs).add();if(events){addEvent=function(eventType){svgElem.on(eventType,function(e){events[eventType].apply(plotLine,[e])})};for(eventType in events){addEvent(eventType)}}}if(optionsLabel&&defined(optionsLabel.text)&&path&&path.length&&axisWidth>0&&axisHeight>0){optionsLabel=merge({align:horiz&&toPath&&'center',x:horiz?!toPath&&4:10,verticalAlign:!horiz&&toPath&&'middle',y:horiz?toPath?16:10:toPath?6:-4,rotation:horiz&&!toPath&&90},optionsLabel);if(!label){plotLine.label=label=renderer.text(optionsLabel.text,0,0).attr({align:optionsLabel.textAlign||optionsLabel.align,rotation:optionsLabel.rotation,zIndex:zIndex}).css(optionsLabel.style).add()}xs=[path[1],path[4],pick(path[6],path[1])];ys=[path[2],path[5],pick(path[7],path[2])];x=mathMin.apply(math,xs);y=mathMin.apply(math,ys);label.align(optionsLabel,false,{x:x,y:y,width:mathMax.apply(math,xs)-x,height:mathMax.apply(math,ys)-y});label.show()}else if(label){label.hide()}return plotLine},destroy:function(){var obj=this,n;for(n in obj){if(obj[n]&&obj[n].destroy){obj[n].destroy()}delete obj[n]}erase(plotLinesAndBands,obj)}};function StackItem(options,isNegative,x){var stackItem=this;stackItem.isNegative=isNegative;stackItem.options=options;stackItem.x=x;stackItem.alignOptions={align:options.align||(inverted?(isNegative?'left':'right'):'center'),verticalAlign:options.verticalAlign||(inverted?'middle':(isNegative?'bottom':'top')),y:pick(options.y,inverted?4:(isNegative?14:-6)),x:pick(options.x,inverted?(isNegative?-6:6):0)};stackItem.textAlign=options.textAlign||(inverted?(isNegative?'right':'left'):'center')}StackItem.prototype={setTotal:function(total){this.total=total;this.cum=total},render:function(group){var stackItem=this,str=stackItem.options.formatter.call(stackItem);if(stackItem.label){stackItem.label.attr({text:str,visibility:HIDDEN})}else{stackItem.label=chart.renderer.text(str,0,0).css(stackItem.options.style).attr({align:stackItem.textAlign,rotation:stackItem.options.rotation,visibility:HIDDEN}).add(group)}},setOffset:function(xOffset,xWidth){var stackItem=this,neg=stackItem.isNegative,y=axis.translate(stackItem.total),yZero=axis.translate(0),h=mathAbs(y-yZero),x=chart.xAxis[0].translate(stackItem.x)+xOffset,plotHeight=chart.plotHeight,stackBox={x:inverted?(neg?y:y-h):x,y:inverted?plotHeight-x-xWidth:(neg?(plotHeight-y-h):plotHeight-y),width:inverted?h:xWidth,height:inverted?xWidth:h};if(stackItem.label){stackItem.label.align(stackItem.alignOptions,null,stackBox).attr({visibility:VISIBLE})}}};function getSeriesExtremes(){var posStack=[],negStack=[],i,run;dataMin=dataMax=null;associatedSeries=[];each(series,function(serie){var seriesOptions=serie.options;run=false;each(['xAxis','yAxis'],function(strAxis){if(serie.isCartesian&&((strAxis==='xAxis'&&isXAxis)||(strAxis==='yAxis'&&!isXAxis))&&((seriesOptions[strAxis]===options.index)||(seriesOptions[strAxis]===UNDEFINED&&options.index===0))){serie[strAxis]=axis;associatedSeries.push(serie);if(serie.options.padXAxis){padAxis=true}run=true}});if(!serie.visible&&optionsChart.ignoreHiddenSeries){run=false}if(run){var stacking,posPointStack,negPointStack,stackKey,negKey;if(!isXAxis){stacking=seriesOptions.stacking;usePercentage=stacking==='percent';if(stacking){stackKey=serie.type+pick(seriesOptions.stack,'');negKey='-'+stackKey;serie.stackKey=stackKey;posPointStack=posStack[stackKey]||[];posStack[stackKey]=posPointStack;negPointStack=negStack[negKey]||[];negStack[negKey]=negPointStack}if(usePercentage){dataMin=0;dataMax=99}}if(serie.isCartesian){var xData,yData,x,y,threshold=seriesOptions.threshold,yDataLength,activeYData=[],activeCounter=0;if(isXAxis){xData=serie.xData;dataMin=mathMin(pick(dataMin,xData[0]),mathMin.apply(math,xData));dataMax=mathMax(pick(dataMax,xData[0]),mathMax.apply(math,xData))}else{var isNegative,pointStack,key,j;serie.processData();var start=+new Date();xData=serie.processedXData;yData=serie.processedYData;yDataLength=yData.length;for(i=0;i<yDataLength;i++){y=yData[i];if(y!==null&&y!==UNDEFINED){if(stacking){x=xData[i];isNegative=y<0;pointStack=isNegative?negPointStack:posPointStack;key=isNegative?negKey:stackKey;y=pointStack[x]=defined(pointStack[x])?pointStack[x]+y:y;if(!stacks[key]){stacks[key]={}}if(!stacks[key][x]){stacks[key][x]=new StackItem(options.stackLabels,isNegative,x)}stacks[key][x].setTotal(y)}j=y.length;if(j){while(j--){activeYData[activeCounter++]=y[j]}}else{activeYData[activeCounter++]=y}}}if(!usePercentage){dataMin=mathMin(pick(dataMin,activeYData[0]),mathMin.apply(math,activeYData));dataMax=mathMax(pick(dataMax,activeYData[0]),mathMax.apply(math,activeYData))}if(serie.useThreshold&&threshold!==null){if(dataMin>=threshold){dataMin=threshold;ignoreMinPadding=true}else if(dataMax<threshold){dataMax=threshold;ignoreMaxPadding=true}}}}}})}translate=function(val,backwards,cvsCoord,old,handleLog){var sign=1,cvsOffset=0,localA=old?oldTransA:transA,localMin=old?oldMin:min,returnValue;if(!localA){localA=transA}if(cvsCoord){sign*=-1;cvsOffset=axisLength}if(reversed){sign*=-1;cvsOffset-=sign*axisLength}if(backwards){if(reversed){val=axisLength-val}returnValue=val/localA+localMin; if(isLog&&handleLog){returnValue=lin2log(returnValue)}}else{if(isLog&&handleLog){val=log2lin(val)}returnValue=sign*(val-localMin)*localA+cvsOffset}return returnValue};getPlotLinePath=function(value,lineWidth,old){var x1,y1,x2,y2,translatedValue=translate(value,null,null,old),cHeight=(old&&oldChartHeight)||chartHeight,cWidth=(old&&oldChartWidth)||chartWidth,skip;x1=x2=mathRound(translatedValue+transB);y1=y2=mathRound(cHeight-translatedValue-transB);if(isNaN(translatedValue)){skip=true}else if(horiz){y1=axisTop;y2=cHeight-axisBottom;if(x1<axisLeft||x1>axisLeft+axisWidth){skip=true}}else{x1=axisLeft;x2=cWidth-axisRight;if(y1<axisTop||y1>axisTop+axisHeight){skip=true}}return skip?null:renderer.crispLine([M,x1,y1,L,x2,y2],lineWidth||0)};function correctFloat(num){var invMag,ret=num;magnitude=pick(magnitude,math.pow(10,mathFloor(math.log(tickInterval)/math.LN10)));if(magnitude<1){invMag=mathRound(1/magnitude)*10;ret=mathRound(num*invMag)/invMag}return ret}function setLinearTickPositions(){var i,roundedMin=correctFloat(mathFloor(min/tickInterval)*tickInterval),roundedMax=correctFloat(mathCeil(max/tickInterval)*tickInterval);tickPositions=[];i=correctFloat(roundedMin);while(i<=roundedMax){tickPositions.push(i);i=correctFloat(i+tickInterval)}}function setTickPositions(secondPass){var length,catPad,linkedParent,linkedParentExtremes,tickIntervalOption=options.tickInterval,tickPixelIntervalOption=options.tickPixelInterval,maxZoom=options.maxZoom||(isXAxis&&!defined(options.min)&&!defined(options.max)?mathMin(chart.smallestInterval*5,dataMax-dataMin):null),zoomOffset;axisLength=horiz?axisWidth:axisHeight;if(isLinked){linkedParent=chart[isXAxis?'xAxis':'yAxis'][options.linkedTo];linkedParentExtremes=linkedParent.getExtremes();min=pick(linkedParentExtremes.min,linkedParentExtremes.dataMin);max=pick(linkedParentExtremes.max,linkedParentExtremes.dataMax)}else{min=pick(userMin,options.min,dataMin);max=pick(userMax,options.max,dataMax)}if(isLog){min=log2lin(min);max=log2lin(max)}if(range){userMin=min=max-range;userMax=max;if(secondPass){range=null}}if(max-min<maxZoom){zoomOffset=(maxZoom-max+min)/2;min=mathMax(min-zoomOffset,pick(options.min,min-zoomOffset),dataMin);max=mathMin(min+maxZoom,pick(options.max,min+maxZoom),dataMax)}if(!categories&&!usePercentage&&!isLinked&&defined(min)&&defined(max)){length=(max-min)||1;if(!defined(options.min)&&!defined(userMin)&&minPadding&&(dataMin<0||!ignoreMinPadding)){min-=length*minPadding}if(!defined(options.max)&&!defined(userMax)&&maxPadding&&(dataMax>0||!ignoreMaxPadding)){max+=length*maxPadding}}if(min===max||min===undefined||max===undefined){tickInterval=1}else if(isLinked&&!tickIntervalOption&&tickPixelIntervalOption===linkedParent.options.tickPixelInterval){tickInterval=linkedParent.tickInterval}else{tickInterval=pick(tickIntervalOption,categories?1:(max-min)*tickPixelIntervalOption/(axisLength||1))}if(!isDatetimeAxis){magnitude=math.pow(10,mathFloor(math.log(tickInterval)/math.LN10));if(!defined(options.tickInterval)){tickInterval=normalizeTickInterval(tickInterval,null,magnitude,options)}}axis.tickInterval=tickInterval;minorTickInterval=options.minorTickInterval==='auto'&&tickInterval?tickInterval/5:options.minorTickInterval;if(isDatetimeAxis){tickPositions=getTimeTicks(tickInterval,min,max,options.startOfWeek);dateTimeLabelFormat=options.dateTimeLabelFormats[tickPositions.unit[0]]}else{setLinearTickPositions()}if(!isLinked){if(categories||padAxis){catPad=(categories?1:tickInterval)*0.5;if(categories||!defined(pick(options.min,userMin))){min-=catPad}if(categories||!defined(pick(options.max,userMax))){max+=catPad}}var roundedMin=tickPositions[0],roundedMax=tickPositions[tickPositions.length-1];if(options.startOnTick){min=roundedMin}else if(min>roundedMin){tickPositions.shift()}if(options.endOnTick){max=roundedMax}else if(max<roundedMax){tickPositions.pop()}if(!maxTicks){maxTicks={x:0,y:0}}if(!isDatetimeAxis&&tickPositions.length>maxTicks[xOrY]&&options.alignTicks!==false){maxTicks[xOrY]=tickPositions.length}}}function adjustTickAmount(){if(maxTicks&&!isDatetimeAxis&&!categories&&!isLinked&&options.alignTicks!==false){var oldTickAmount=tickAmount,calculatedTickAmount=tickPositions.length;tickAmount=maxTicks[xOrY];if(calculatedTickAmount<tickAmount){while(tickPositions.length<tickAmount){tickPositions.push(correctFloat(tickPositions[tickPositions.length-1]+tickInterval))}transA*=(calculatedTickAmount-1)/(tickAmount-1);max=tickPositions[tickPositions.length-1]}if(defined(oldTickAmount)&&tickAmount!==oldTickAmount){axis.isDirty=true}}}function setScale(){var type,i;oldMin=min;oldMax=max;getSeriesExtremes();setTickPositions();oldTransA=transA;transA=axisLength/((max-min)||1);if(!isXAxis){for(type in stacks){for(i in stacks[type]){stacks[type][i].cum=stacks[type][i].total}}}if(!axis.isDirty){axis.isDirty=(min!==oldMin||max!==oldMax)}}function setExtremes(newMin,newMax,redraw,animation){var start=+new Date();redraw=pick(redraw,true);fireEvent(axis,'setExtremes',{min:newMin,max:newMax},function(){userMin=newMin;userMax=newMax;if(redraw){chart.redraw(animation)}})}function setAxisSize(){var offsetLeft=options.offsetLeft||0,offsetRight=options.offsetRight||0;axisLeft=pick(options.left,plotLeft+offsetLeft);axisTop=pick(options.top,plotTop);axisWidth=pick(options.width,plotWidth-offsetLeft+offsetRight);axisHeight=pick(options.height,plotHeight);axisBottom=chartHeight-axisHeight-axisTop;axisRight=chartWidth-axisWidth-axisLeft;axis.left=axisLeft;axis.top=axisTop;axisLength=horiz?axisWidth:axisHeight;transA=axisLength/((max-min)||1);transB=horiz?axisLeft:axisBottom}function getExtremes(){return{min:min,max:max,dataMin:dataMin,dataMax:dataMax,userMin:userMin,userMax:userMax}}function getThreshold(threshold){if(min>threshold||threshold===null){threshold=min}else if(max<threshold){threshold=max}return translate(threshold,0,1)}function addPlotBandOrLine(options){var obj=new PlotLineOrBand(options).render();plotLinesAndBands.push(obj);return obj}function getOffset(){var hasData=associatedSeries.length&&defined(min)&&defined(max),titleOffset=0,titleMargin=0,axisTitleOptions=options.title,labelOptions=options.labels,directionFactor=[-1,1,1,-1][side],n;if(!axisGroup){axisGroup=renderer.g('axis').attr({zIndex:7}).add();gridGroup=renderer.g('grid').attr({zIndex:1}).add()}labelOffset=0;if(hasData||isLinked){each(tickPositions,function(pos){if(!ticks[pos]){ticks[pos]=new Tick(pos)}else{ticks[pos].addLabel()}});each(tickPositions,function(pos){ticks[pos].attachLabel()});each(tickPositions,function(pos){ticks[pos].computeBBox()});each(tickPositions,function(pos){ticks[pos].updateTransformLabel()});each(tickPositions,function(pos){if(side===0||side===2||{1:'left',3:'right'}[side]===labelOptions.align){labelOffset=mathMax(ticks[pos].getLabelSize(),labelOffset)}});if(staggerLines){labelOffset+=(staggerLines-1)*16}}else{for(n in ticks){ticks[n].destroy();delete ticks[n]}}if(axisTitleOptions&&axisTitleOptions.text){if(!axis.axisTitle){axis.axisTitle=renderer.text(axisTitleOptions.text,0,0).attr({zIndex:7,rotation:axisTitleOptions.rotation||0,align:axisTitleOptions.textAlign||{low:'left',middle:'center',high:'right'}[axisTitleOptions.align]}).css(axisTitleOptions.style).add()}titleOffset=axis.axisTitle.getBBox()[horiz?'height':'width'];titleMargin=pick(axisTitleOptions.margin,horiz?5:10)}offset=directionFactor*pick(options.offset,axisOffset[side]);axisTitleMargin=labelOffset+(side!==2&&labelOffset&&directionFactor*options.labels[horiz?'y':'x'])+titleMargin;axisOffset[side]=mathMax(axisOffset[side],axisTitleMargin+titleOffset+directionFactor*offset)}function render(){var axisTitleOptions=options.title,stackLabelOptions=options.stackLabels,alternateGridColor=options.alternateGridColor,lineWidth=options.lineWidth,lineLeft,lineTop,linePath,hasRendered=chart.hasRendered,slideInTicks=hasRendered&&defined(oldMin)&&!isNaN(oldMin),hasData=associatedSeries.length&&defined(min)&&defined(max);if(hasData||isLinked){if(minorTickInterval&&!categories){var pos=min+(tickPositions[0]-min)%minorTickInterval;for(pos;pos<=max;pos+=minorTickInterval){if(!minorTicks[pos]){minorTicks[pos]=new Tick(pos,true)}if(slideInTicks&&minorTicks[pos].isNew){minorTicks[pos].render(null,true)}minorTicks[pos].isActive=true;minorTicks[pos].render()}}each(tickPositions,function(pos,i){if(!isLinked||(pos>=min&&pos<=max)){if(slideInTicks&&ticks[pos].isNew){ticks[pos].render(i,true)}ticks[pos].isActive=true;ticks[pos].render(i)}});if(alternateGridColor){each(tickPositions,function(pos,i){if(i%2===0&&pos<max){if(!alternateBands[pos]){alternateBands[pos]=new PlotLineOrBand()}alternateBands[pos].options={from:pos,to:tickPositions[i+1]!==UNDEFINED?tickPositions[i+1]:max,color:alternateGridColor};alternateBands[pos].render();alternateBands[pos].isActive=true}})}if(!hasRendered){each((options.plotLines||[]).concat(options.plotBands||[]),function(plotLineOptions){plotLinesAndBands.push(new PlotLineOrBand(plotLineOptions).render())})}}each([ticks,minorTicks,alternateBands],function(coll){var pos;for(pos in coll){if(!coll[pos].isActive){coll[pos].destroy();delete coll[pos]}else{coll[pos].isActive=false}}});if(lineWidth){lineLeft=axisLeft+(opposite?axisWidth:0)+offset;lineTop=chartHeight-axisBottom-(opposite?axisHeight:0)+offset;linePath=renderer.crispLine([M,horiz?axisLeft:lineLeft,horiz?lineTop:axisTop,L,horiz?chartWidth-axisRight:lineLeft,horiz?lineTop:chartHeight-axisBottom],lineWidth);if(!axisLine){axisLine=renderer.path(linePath).attr({stroke:options.lineColor,'stroke-width':lineWidth,zIndex:7}).add()}else{axisLine.animate({d:linePath})}}if(axis.axisTitle){var margin=horiz?axisLeft:axisTop,fontSize=pInt(axisTitleOptions.style.fontSize||12),alongAxis={low:margin+(horiz?0:axisLength),middle:margin+axisLength/2,high:margin+(horiz?axisLength:0)}[axisTitleOptions.align],offAxis=(horiz?axisTop+axisHeight:axisLeft)+(horiz?1:-1)*(opposite?-1:1)*axisTitleMargin+(side===2?fontSize:0);axis.axisTitle[hasRendered?'animate':'attr']({x:horiz?alongAxis:offAxis+(opposite?axisWidth:0)+offset+(axisTitleOptions.x||0),y:horiz?offAxis-(opposite?axisHeight:0)+offset:alongAxis+(axisTitleOptions.y||0)})}if(stackLabelOptions&&stackLabelOptions.enabled){var stackKey,oneStack,stackCategory,stackTotalGroup=axis.stackTotalGroup;if(!stackTotalGroup){axis.stackTotalGroup=stackTotalGroup=renderer.g('stack-labels').attr({visibility:VISIBLE,zIndex:6}).translate(plotLeft,plotTop).add()}for(stackKey in stacks){oneStack=stacks[stackKey];for(stackCategory in oneStack){oneStack[stackCategory].render(stackTotalGroup)}}}axis.isDirty=false}function removePlotBandOrLine(id){var i=plotLinesAndBands.length;while(i--){if(plotLinesAndBands[i].id===id){plotLinesAndBands[i].destroy()}}}function redraw(){if(tracker.resetTracker){tracker.resetTracker()}render();each(plotLinesAndBands,function(plotLine){plotLine.render()});each(associatedSeries,function(series){series.isDirty=true})}function setCategories(newCategories,doRedraw){axis.categories=categories=newCategories;each(associatedSeries,function(series){series.translate();series.setTooltipPoints(true)});axis.isDirty=true;if(pick(doRedraw,true)){chart.redraw()}}axes.push(axis);chart[isXAxis?'xAxis':'yAxis'].push(axis);if(inverted&&isXAxis&&reversed===UNDEFINED){reversed=true}extend(axis,{addPlotBand:addPlotBandOrLine,addPlotLine:addPlotBandOrLine,adjustTickAmount:adjustTickAmount,categories:categories,getExtremes:getExtremes,getPlotLinePath:getPlotLinePath,getThreshold:getThreshold,isXAxis:isXAxis,options:options,plotLinesAndBands:plotLinesAndBands,getOffset:getOffset,render:render,setAxisSize:setAxisSize,setCategories:setCategories,setExtremes:setExtremes,setScale:setScale,setTickPositions:setTickPositions,translate:translate,redraw:redraw,removePlotBand:removePlotBandOrLine,removePlotLine:removePlotBandOrLine,reversed:reversed,stacks:stacks});for(eventType in events){addEvent(axis,eventType,events[eventType])}setScale()}function Toolbar(chart){var buttons={};function add(id,text,title,fn){if(!buttons[id]){var button=renderer.text(text,0,0).css(options.toolbar.itemStyle).align({align:'right',x:-marginRight-20,y:plotTop+30}).on('click',fn).attr({align:'right',zIndex:20}).add();buttons[id]=button}}function remove(id){discardElement(buttons[id].element);buttons[id]=null}return{add:add,remove:remove}}function Tooltip(options){var currentSeries,borderWidth=options.borderWidth,crosshairsOptions=options.crosshairs,crosshairs=[],style=options.style,shared=options.shared,padding=pInt(style.padding),boxOffLeft=borderWidth+padding,tooltipIsHidden=true,boxWidth,boxHeight,currentX=0,currentY=0;style.padding=0;var label=renderer.label('',0,0).attr({padding:padding,fill:options.backgroundColor,'stroke-width':borderWidth,r:options.borderRadius,zIndex:8}).css(style).hide().add().shadow(1);function defaultFormatter(){var pThis=this,items=pThis.points||splat(pThis),xAxis=items[0].series.xAxis,x=pThis.x,isDateTime=xAxis&&xAxis.options.type==='datetime',useHeader=isString(x)||isDateTime,series=items[0].series,headerFormat=series.tooltipHeaderFormat||'%A, %b %e, %Y',s;s=useHeader?['<span style="font-size: 10px">'+(isDateTime?dateFormat('%A, %b %e, %Y',x):x)+'</span>']:[];each(items,function(item){series=item.series;s.push((series.tooltipFormatter&&series.tooltipFormatter(item))||item.point.tooltipFormatter(useHeader))});return s.join('<br/>')}function move(finalX,finalY){currentX=tooltipIsHidden?finalX:(2*currentX+finalX)/3;currentY=tooltipIsHidden?finalY:(currentY+finalY)/2;label.attr({x:currentX,y:currentY});if(mathAbs(finalX-currentX)>1||mathAbs(finalY-currentY)>1){tooltipTick=function(){move(finalX,finalY)}}else{tooltipTick=null}}function hide(){if(!tooltipIsHidden){var hoverPoints=chart.hoverPoints;label.hide();each(crosshairs,function(crosshair){if(crosshair){crosshair.hide()}});if(hoverPoints){each(hoverPoints,function(point){point.setState()})}chart.hoverPoints=null;tooltipIsHidden=true}}function refresh(point){var x,y,boxX,boxY,show,bBox,plotX,plotY,textConfig={},text,pointConfig=[],tooltipPos=point.tooltipPos,formatter=options.formatter||defaultFormatter,hoverPoints=chart.hoverPoints;if(shared&&!(point.series&&point.series.noSharedTooltip)){plotY=0;if(hoverPoints){each(hoverPoints,function(point){point.setState()})}chart.hoverPoints=point;each(point,function(item,i){item.setState(HOVER_STATE);plotY+=item.plotY;pointConfig.push(item.getLabelConfig())});plotX=point[0].plotX;plotY=mathRound(plotY)/point.length; textConfig={x:point[0].category};textConfig.points=pointConfig;point=point[0]}else{textConfig=point.getLabelConfig()}text=formatter.call(textConfig);currentSeries=point.series;plotX=pick(plotX,point.plotX);plotY=pick(plotY,point.plotY);x=mathRound(tooltipPos?tooltipPos[0]:(inverted?plotWidth-plotY:plotX));y=mathRound(tooltipPos?tooltipPos[1]:(inverted?plotHeight-plotX:plotY));show=shared||!point.series.isCartesian||isInsidePlot(x,y);if(text===false||!show){hide()}else{if(tooltipIsHidden){label.show();tooltipIsHidden=false}label.attr({text:text});bBox=label.getBBox();boxWidth=bBox.width;boxHeight=bBox.height;label.attr({stroke:options.borderColor||point.color||currentSeries.color||'#606060'});boxX=x-boxWidth+plotLeft-25;boxY=y-boxHeight+plotTop+10;if(boxX<7){boxX=7;boxY-=30}if(boxY<plotTop+5){boxY=plotTop+5}else if(boxY+boxHeight>chartHeight){boxY=chartHeight-boxHeight-5}move(mathRound(boxX-boxOffLeft),mathRound(boxY-boxOffLeft))}if(crosshairsOptions){crosshairsOptions=splat(crosshairsOptions);var path,i=crosshairsOptions.length,attribs,axis;while(i--){axis=point.series[i?'yAxis':'xAxis'];if(crosshairsOptions[i]&&axis){path=axis.getPlotLinePath(point[i?'y':'x'],1);if(crosshairs[i]){crosshairs[i].attr({d:path,visibility:VISIBLE})}else{attribs={'stroke-width':crosshairsOptions[i].width||1,stroke:crosshairsOptions[i].color||'#C0C0C0',zIndex:2};if(crosshairsOptions[i].dashStyle){attribs.dashstyle=crosshairsOptions[i].dashStyle}crosshairs[i]=renderer.path(path).attr(attribs).add()}}}}}return{shared:shared,refresh:refresh,hide:hide}}function MouseTracker(chart,options){var mouseDownX,mouseDownY,hasDragged,selectionMarker,zoomType=optionsChart.zoomType,zoomX=/x/.test(zoomType),zoomY=/y/.test(zoomType),zoomHor=(zoomX&&!inverted)||(zoomY&&inverted),zoomVert=(zoomY&&!inverted)||(zoomX&&inverted);function normalizeMouseEvent(e){var ePos,pageZoomFix=isWebKit&&doc.width/doc.documentElement.clientWidth-1,chartPosLeft,chartPosTop,chartX,chartY;e=e||win.event;if(!e.target){e.target=e.srcElement}if(e.originalEvent){e=e.originalEvent}ePos=e.touches?e.touches.item(0):e;if(e.type!=='mousemove'||win.opera||pageZoomFix){chartPosition=getPosition(container);chartPosLeft=chartPosition.left;chartPosTop=chartPosition.top}if(isIE){chartX=e.x;chartY=e.y}else{if(ePos.layerX===UNDEFINED){chartX=ePos.pageX-chartPosLeft;chartY=ePos.pageY-chartPosTop}else{chartX=e.layerX;chartY=e.layerY}}if(pageZoomFix){chartX+=mathRound((pageZoomFix+1)*chartPosLeft-chartPosLeft);chartY+=mathRound((pageZoomFix+1)*chartPosTop-chartPosTop)}return extend(e,{chartX:chartX,chartY:chartY})}function getMouseCoordinates(e){var coordinates={xAxis:[],yAxis:[]};each(axes,function(axis,i){var translate=axis.translate,isXAxis=axis.isXAxis,isHorizontal=inverted?!isXAxis:isXAxis;coordinates[isXAxis?'xAxis':'yAxis'].push({axis:axis,value:translate(isHorizontal?e.chartX-plotLeft:plotHeight-e.chartY+plotTop,true)})});return coordinates}function onmousemove(e){var point,points,hoverPoint=chart.hoverPoint,hoverSeries=chart.hoverSeries,i,j,distance=chartWidth,index=inverted?e.chartY:e.chartX-plotLeft;if(tooltip&&options.shared&&!(hoverSeries&&hoverSeries.noSharedTooltip)){points=[];i=series.length;for(j=0;j<i;j++){if(series[j].visible&&series[j].tooltipPoints.length&&series[j].options.enableMouseTracking!==false&&!series[j].noSharedTooltip){point=series[j].tooltipPoints[index];point._dist=mathAbs(index-point.plotX);distance=mathMin(distance,point._dist);points.push(point)}}i=points.length;while(i--){if(points[i]._dist>distance){points.splice(i,1)}}if(points.length&&(points[0].plotX!==hoverX)){tooltip.refresh(points);hoverX=points[0].plotX}}if(hoverSeries&&hoverSeries.tracker){point=hoverSeries.tooltipPoints[index];if(point&&point!==hoverPoint){point.onMouseOver()}}}function resetTracker(){var hoverSeries=chart.hoverSeries,hoverPoint=chart.hoverPoint;if(hoverPoint){hoverPoint.onMouseOut()}if(hoverSeries){hoverSeries.onMouseOut()}if(tooltip){tooltip.hide()}hoverX=null}function drop(){if(selectionMarker){var selectionData={xAxis:[],yAxis:[]},selectionBox=selectionMarker.getBBox(),selectionLeft=selectionBox.x-plotLeft,selectionTop=selectionBox.y-plotTop;if(hasDragged){each(axes,function(axis,i){if(axis.options.zoomEnabled!==false){var translate=axis.translate,isXAxis=axis.isXAxis,isHorizontal=inverted?!isXAxis:isXAxis,selectionMin=translate(isHorizontal?selectionLeft:plotHeight-selectionTop-selectionBox.height,true,0,0,1),selectionMax=translate(isHorizontal?selectionLeft+selectionBox.width:plotHeight-selectionTop,true,0,0,1);selectionData[isXAxis?'xAxis':'yAxis'].push({axis:axis,min:mathMin(selectionMin,selectionMax),max:mathMax(selectionMin,selectionMax)})}});fireEvent(chart,'selection',selectionData,zoom)}selectionMarker=selectionMarker.destroy()}css(container,{cursor:'auto'});chart.mouseIsDown=mouseIsDown=hasDragged=false;removeEvent(doc,hasTouch?'touchend':'mouseup',drop)}function setDOMEvents(){var lastWasOutsidePlot=true;container.onmousedown=function(e){e=normalizeMouseEvent(e);chart.mouseIsDown=mouseIsDown=true;mouseDownX=e.chartX;mouseDownY=e.chartY;addEvent(doc,hasTouch?'touchend':'mouseup',drop)};var mouseMove=function(e){if(e&&e.touches&&e.touches.length>1){return}e=normalizeMouseEvent(e);if(!hasTouch){e.returnValue=false}var chartX=e.chartX,chartY=e.chartY,isOutsidePlot=!isInsidePlot(chartX-plotLeft,chartY-plotTop);if(hasTouch&&e.type==='touchstart'){if(attr(e.target,'isTracker')){if(!chart.runTrackerClick){e.preventDefault()}}else if(!runChartClick&&!isOutsidePlot){e.preventDefault()}}if(isOutsidePlot){if(!lastWasOutsidePlot){resetTracker()}if(chartX<plotLeft){chartX=plotLeft}else if(chartX>plotLeft+plotWidth){chartX=plotLeft+plotWidth}if(chartY<plotTop){chartY=plotTop}else if(chartY>plotTop+plotHeight){chartY=plotTop+plotHeight}}if(mouseIsDown&&e.type!=='touchstart'){hasDragged=Math.sqrt(Math.pow(mouseDownX-chartX,2)+Math.pow(mouseDownY-chartY,2));if(hasDragged>10){var clickedInside=isInsidePlot(mouseDownX-plotLeft,mouseDownY-plotTop);if(hasCartesianSeries&&(zoomX||zoomY)&&clickedInside){if(!selectionMarker){selectionMarker=renderer.rect(plotLeft,plotTop,zoomHor?1:plotWidth,zoomVert?1:plotHeight,0).attr({fill:'rgba(69,114,167,0.25)',zIndex:7}).add()}}if(selectionMarker&&zoomHor){var xSize=chartX-mouseDownX;selectionMarker.attr({width:mathAbs(xSize),x:(xSize>0?0:xSize)+mouseDownX})}if(selectionMarker&&zoomVert){var ySize=chartY-mouseDownY;selectionMarker.attr({height:mathAbs(ySize),y:(ySize>0?0:ySize)+mouseDownY})}if(clickedInside&&!selectionMarker&&optionsChart.panning){var xAxis=chart.xAxis[0],extremes=xAxis.getExtremes(),dataMin=extremes.dataMin,dataMax=extremes.dataMax,newMin=xAxis.translate(mouseDownX-chartX,true),newMax=xAxis.translate(mouseDownX+plotWidth-chartX,true);if(newMin>dataMin&&newMax<dataMax){xAxis.setExtremes(newMin,newMax,true,false)}mouseDownX=chartX;css(container,{cursor:'move'})}}}else if(!isOutsidePlot){onmousemove(e)}lastWasOutsidePlot=isOutsidePlot;return isOutsidePlot||!hasCartesianSeries};container.onmousemove=mouseMove;addEvent(container,'mouseleave',resetTracker);container.ontouchstart=function(e){if(zoomX||zoomY){container.onmousedown(e)}mouseMove(e)};container.ontouchmove=mouseMove;container.ontouchend=function(){if(hasDragged){resetTracker()}};container.onclick=function(e){var hoverPoint=chart.hoverPoint;e=normalizeMouseEvent(e);e.cancelBubble=true;if(!hasDragged){if(hoverPoint&&attr(e.target,'isTracker')){var plotX=hoverPoint.plotX,plotY=hoverPoint.plotY;extend(hoverPoint,{pageX:chartPosition.left+plotLeft+(inverted?plotWidth-plotY:plotX),pageY:chartPosition.top+plotTop+(inverted?plotHeight-plotX:plotY)});fireEvent(hoverPoint.series,'click',extend(e,{point:hoverPoint}));hoverPoint.firePointEvent('click',e)}else{extend(e,getMouseCoordinates(e));if(isInsidePlot(e.chartX-plotLeft,e.chartY-plotTop)){fireEvent(chart,'click',e)}}}hasDragged=false}}placeTrackerGroup=function(){if(!trackerGroup){chart.trackerGroup=trackerGroup=renderer.g('tracker').attr({zIndex:9}).add()}else{trackerGroup.translate(plotLeft,plotTop);if(inverted){trackerGroup.attr({width:chart.plotWidth,height:chart.plotHeight}).invert()}}};placeTrackerGroup();if(options.enabled){chart.tooltip=tooltip=Tooltip(options)}setDOMEvents();tooltipInterval=setInterval(function(){if(tooltipTick){tooltipTick()}},32);extend(this,{zoomX:zoomX,zoomY:zoomY,resetTracker:resetTracker,normalizeMouseEvent:normalizeMouseEvent})}var Legend=function(chart){var options=chart.options.legend;if(!options.enabled){return}var horizontal=options.layout==='horizontal',symbolWidth=options.symbolWidth,symbolPadding=options.symbolPadding,allItems,style=options.style,itemStyle=options.itemStyle,itemHoverStyle=options.itemHoverStyle,itemHiddenStyle=options.itemHiddenStyle,padding=pInt(style.padding),rightPadding=20,y=18,initialItemX=4+padding+symbolWidth+symbolPadding,itemX,itemY,lastItemY,itemHeight=0,box,legendBorderWidth=options.borderWidth,legendBackgroundColor=options.backgroundColor,legendGroup,offsetWidth,widthOption=options.width,series=chart.series,reversedLegend=options.reversed;function colorizeItem(item,visible){var legendItem=item.legendItem,legendLine=item.legendLine,legendSymbol=item.legendSymbol,hiddenColor=itemHiddenStyle.color,textColor=visible?options.itemStyle.color:hiddenColor,symbolColor=visible?item.color:hiddenColor;if(legendItem){legendItem.css({fill:textColor})}if(legendLine){legendLine.attr({stroke:symbolColor})}if(legendSymbol){legendSymbol.attr({stroke:symbolColor,fill:symbolColor})}}function positionItem(item,itemX,itemY){var legendItem=item.legendItem,legendLine=item.legendLine,legendSymbol=item.legendSymbol,checkbox=item.checkbox;if(legendItem){legendItem.attr({x:itemX,y:itemY})}if(legendLine){legendLine.translate(itemX,itemY-4)}if(legendSymbol){legendSymbol.attr({x:itemX+legendSymbol.xOff,y:itemY+legendSymbol.yOff})}if(checkbox){checkbox.x=itemX;checkbox.y=itemY}}function destroyItem(item){var checkbox=item.checkbox;each(['legendItem','legendLine','legendSymbol'],function(key){if(item[key]){item[key].destroy()}});if(checkbox){discardElement(item.checkbox)}}function positionCheckboxes(){each(allItems,function(item){var checkbox=item.checkbox,alignAttr=legendGroup.alignAttr;if(checkbox){css(checkbox,{left:(alignAttr.translateX+item.legendItemWidth+checkbox.x-40)+PX,top:(alignAttr.translateY+checkbox.y-11)+PX})}})}function renderItem(item){var bBox,itemWidth,legendSymbol,symbolX,symbolY,attribs,simpleSymbol,radius,li=item.legendItem,series=item.series||item,i=allItems.length,itemOptions=series.options,strokeWidth=(itemOptions&&itemOptions.borderWidth)||0;if(!li){simpleSymbol=/^(bar|pie|area|column)$/.test(series.type);item.legendItem=li=renderer.text(options.labelFormatter.call(item),0,0).css(item.visible?itemStyle:itemHiddenStyle).on('mouseover',function(){item.setState(HOVER_STATE);li.css(itemHoverStyle)}).on('mouseout',function(){li.css(item.visible?itemStyle:itemHiddenStyle);item.setState()}).on('click',function(event){var strLegendItemClick='legendItemClick',fnLegendItemClick=function(){item.setVisible()};if(item.firePointEvent){item.firePointEvent(strLegendItemClick,null,fnLegendItemClick)}else{fireEvent(item,strLegendItemClick,null,fnLegendItemClick)}}).attr({zIndex:2}).add(legendGroup);if(!simpleSymbol&&itemOptions&&itemOptions.lineWidth){var attrs={'stroke-width':itemOptions.lineWidth,zIndex:2};if(itemOptions.dashStyle){attrs.dashstyle=itemOptions.dashStyle}item.legendLine=renderer.path([M,-symbolWidth-symbolPadding,0,L,-symbolPadding,0]).attr(attrs).add(legendGroup)}if(simpleSymbol){legendSymbol=renderer.rect((symbolX=-symbolWidth-symbolPadding),(symbolY=-11),symbolWidth,12,2).attr({zIndex:3}).add(legendGroup)}else if(itemOptions&&itemOptions.marker&&itemOptions.marker.enabled){radius=itemOptions.marker.radius;legendSymbol=renderer.symbol(item.symbol,(symbolX=-symbolWidth/2-symbolPadding-radius),(symbolY=-4-radius),2*radius,2*radius).attr(item.pointAttr[NORMAL_STATE]).attr({zIndex:3}).add(legendGroup)}if(legendSymbol){legendSymbol.xOff=symbolX+(strokeWidth%2/2);legendSymbol.yOff=symbolY+(strokeWidth%2/2)}item.legendSymbol=legendSymbol;colorizeItem(item,item.visible);if(itemOptions&&itemOptions.showCheckbox){item.checkbox=createElement('input',{type:'checkbox',checked:item.selected,defaultChecked:item.selected},options.itemCheckboxStyle,container);addEvent(item.checkbox,'click',function(event){var target=event.target;fireEvent(item,'checkboxClick',{checked:target.checked},function(){item.select()})})}}bBox=li.getBBox();itemWidth=item.legendItemWidth=options.itemWidth||symbolWidth+symbolPadding+bBox.width+rightPadding;itemHeight=bBox.height;if(horizontal&&itemX-initialItemX+itemWidth>(widthOption||(chartWidth-2*padding-initialItemX))){itemX=initialItemX;itemY+=itemHeight}lastItemY=itemY;positionItem(item,itemX,itemY);if(horizontal){itemX+=itemWidth}else{itemY+=itemHeight}offsetWidth=widthOption||mathMax(horizontal?itemX-initialItemX:itemWidth,offsetWidth)}function renderLegend(){itemX=initialItemX;itemY=y;offsetWidth=0;lastItemY=0;if(!legendGroup){legendGroup=renderer.g('legend').attr({zIndex:7}).add()}allItems=[];each(series,function(serie){var seriesOptions=serie.options;if(!seriesOptions.showInLegend){return}allItems=allItems.concat(seriesOptions.legendType==='point'?serie.data:serie)});allItems.sort(function(a,b){return(a.options.legendIndex||0)-(b.options.legendIndex||0)});if(reversedLegend){allItems.reverse()}each(allItems,renderItem);legendWidth=widthOption||offsetWidth;legendHeight=lastItemY-y+itemHeight;if(legendBorderWidth||legendBackgroundColor){legendWidth+=2*padding;legendHeight+=2*padding;if(!box){box=renderer.rect(0,0,legendWidth,legendHeight,options.borderRadius,legendBorderWidth||0).attr({stroke:options.borderColor,'stroke-width':legendBorderWidth||0,fill:legendBackgroundColor||NONE}).add(legendGroup).shadow(options.shadow)}else if(legendWidth>0&&legendHeight>0){box.animate(box.crisp(null,null,null,legendWidth,legendHeight))}box[allItems.length?'show':'hide']()}var props=['left','right','top','bottom'],prop,i=4;while(i--){prop=props[i];if(style[prop]&&style[prop]!=='auto'){options[i<2?'align':'verticalAlign']=prop;options[i<2?'x':'y']=pInt(style[prop])*(i%2?-1:1)}}legendGroup.align(extend(options,{width:legendWidth,height:legendHeight}),true,spacingBox);if(!isResizing){positionCheckboxes()}}renderLegend();addEvent(chart,'endResize',positionCheckboxes);return{colorizeItem:colorizeItem,destroyItem:destroyItem,renderLegend:renderLegend}};function initSeries(options){var type=options.type||optionsChart.type||optionsChart.defaultSeriesType,typeClass=seriesTypes[type],serie,hasRendered=chart.hasRendered;if(hasRendered){if(inverted&&type==='column'){typeClass=seriesTypes.bar}else if(!inverted&&type==='bar'){typeClass=seriesTypes.column}}serie=new typeClass();serie.init(chart,options);if(!hasRendered&&serie.inverted){inverted=true}if(serie.isCartesian){hasCartesianSeries=serie.isCartesian}series.push(serie);return serie}function addSeries(options,redraw,animation){var series;if(options){setAnimation(animation,chart);redraw=pick(redraw,true);fireEvent(chart,'addSeries',{options:options},function(){series=initSeries(options);series.isDirty=true;chart.isDirtyLegend=true;if(redraw){chart.redraw()}})}return series}isInsidePlot=function(x,y){return x>=0&&x<=plotWidth&&y>=0&&y<=plotHeight};function adjustTickAmounts(){if(optionsChart.alignTicks!==false){each(axes,function(axis){axis.adjustTickAmount()})}maxTicks=null}function redraw(animation){var redrawLegend=chart.isDirtyLegend,hasStackedSeries,isDirtyBox=chart.isDirtyBox,seriesLength=series.length,i=seriesLength,clipRect=chart.clipRect,serie;setAnimation(animation,chart);while(i--){serie=series[i];if(serie.isDirty&&serie.options.stacking){hasStackedSeries=true;break}}if(hasStackedSeries){i=seriesLength;while(i--){serie=series[i];if(serie.options.stacking){serie.isDirty=true}}}each(series,function(serie){if(serie.isDirty){if(serie.options.legendType==='point'){redrawLegend=true}}});if(redrawLegend&&legend.renderLegend){legend.renderLegend();chart.isDirtyLegend=false}if(hasCartesianSeries){if(!isResizing){maxTicks=null;each(axes,function(axis){axis.leastDistance=UNDEFINED;axis.setScale()})}adjustTickAmounts();getMargins();each(axes,function(axis){if(axis.isDirty||isDirtyBox){axis.redraw();isDirtyBox=true}})}if(isDirtyBox){drawChartBox();placeTrackerGroup();if(clipRect){stop(clipRect);clipRect.animate({width:chart.plotSizeX,height:chart.plotSizeY})}}each(series,function(serie){if(serie.isDirty&&serie.visible&&(!serie.isCartesian||serie.xAxis)){serie.redraw()}});if(tracker&&tracker.resetTracker){tracker.resetTracker()}fireEvent(chart,'redraw')}function showLoading(str){var loadingOptions=options.loading;if(!loadingDiv){loadingDiv=createElement(DIV,{className:'highcharts-loading'},extend(loadingOptions.style,{left:plotLeft+PX,top:plotTop+PX,width:plotWidth+PX,height:plotHeight+PX,zIndex:10,display:NONE}),container);loadingSpan=createElement('span',null,loadingOptions.labelStyle,loadingDiv)}loadingSpan.innerHTML=str||options.lang.loading;if(!loadingShown){css(loadingDiv,{opacity:0,display:''});animate(loadingDiv,{opacity:loadingOptions.style.opacity},{duration:loadingOptions.showDuration});loadingShown=true}}function hideLoading(){animate(loadingDiv,{opacity:0},{duration:options.loading.hideDuration,complete:function(){css(loadingDiv,{display:NONE})}});loadingShown=false}function get(id){var i,j,points;for(i=0;i<axes.length;i++){if(axes[i].options.id===id){return axes[i]}}for(i=0;i<series.length;i++){if(series[i].options.id===id){return series[i]}}for(i=0;i<series.length;i++){points=series[i].points;for(j=0;j<points.length;j++){if(points[j].id===id){return points[j]}}}return null}function getAxes(){var xAxisOptions=options.xAxis||{},yAxisOptions=options.yAxis||{},optionsArray,axis;xAxisOptions=splat(xAxisOptions);each(xAxisOptions,function(axis,i){axis.index=i;axis.isX=true});yAxisOptions=splat(yAxisOptions);each(yAxisOptions,function(axis,i){axis.index=i});optionsArray=xAxisOptions.concat(yAxisOptions);each(optionsArray,function(axisOptions){axis=new Axis(axisOptions)});adjustTickAmounts()}function getSelectedPoints(){var points=[];each(series,function(serie){points=points.concat(grep(serie.points,function(point){return point.selected}))});return points}function getSelectedSeries(){return grep(series,function(serie){return serie.selected})}zoomOut=function(){fireEvent(chart,'selection',{resetSelection:true},zoom);chart.toolbar.remove('zoom')};zoom=function(event){var lang=defaultOptions.lang,animate=chart.pointCount<100;if(chart.resetZoomEnabled!==false){chart.toolbar.add('zoom',lang.resetZoom,lang.resetZoomTitle,zoomOut)}if(!event||event.resetSelection){each(axes,function(axis){if(axis.options.zoomEnabled!==false){axis.setExtremes(null,null,false,animate)}})}else{each(event.xAxis.concat(event.yAxis),function(axisData){var axis=axisData.axis;if(chart.tracker[axis.isXAxis?'zoomX':'zoomY']){axis.setExtremes(axisData.min,axisData.max,false,animate)}})}redraw()};function setTitle(titleOptions,subtitleOptions){chartTitleOptions=merge(options.title,titleOptions);chartSubtitleOptions=merge(options.subtitle,subtitleOptions);each([['title',titleOptions,chartTitleOptions],['subtitle',subtitleOptions,chartSubtitleOptions]],function(arr){var name=arr[0],title=chart[name],titleOptions=arr[1],chartTitleOptions=arr[2];if(title&&titleOptions){title.destroy();title=null}if(chartTitleOptions&&chartTitleOptions.text&&!title){chart[name]=renderer.text(chartTitleOptions.text,0,0).attr({align:chartTitleOptions.align,'class':'highcharts-'+name,zIndex:1}).css(chartTitleOptions.style).add().align(chartTitleOptions,false,spacingBox)}})}function getChartSize(){containerWidth=(renderToClone||renderTo).offsetWidth;containerHeight=(renderToClone||renderTo).offsetHeight;chart.chartWidth=chartWidth=optionsChart.width||containerWidth||600;chart.chartHeight=chartHeight=optionsChart.height||(containerHeight>19?containerHeight:400)}function getContainer(){renderTo=optionsChart.renderTo;containerId=PREFIX+idCounter++;if(isString(renderTo)){renderTo=doc.getElementById(renderTo)}renderTo.innerHTML='';if(!renderTo.offsetWidth){renderToClone=renderTo.cloneNode(0);css(renderToClone,{position:ABSOLUTE,top:'-9999px',display:''});doc.body.appendChild(renderToClone)}getChartSize();chart.container=container=createElement(DIV,{className:'highcharts-container'+(optionsChart.className?' '+optionsChart.className:''),id:containerId},extend({position:RELATIVE,overflow:HIDDEN,width:chartWidth+PX,height:chartHeight+PX,textAlign:'left'},optionsChart.style),renderToClone||renderTo);chart.renderer=renderer=optionsChart.forExport?new SVGRenderer(container,chartWidth,chartHeight,true):new Renderer(container,chartWidth,chartHeight);var subPixelFix,rect;if(isFirefox&&container.getBoundingClientRect){subPixelFix=function(){css(container,{left:0,top:0});rect=container.getBoundingClientRect();css(container,{left:(-(rect.left-pInt(rect.left)))+PX,top:(-(rect.top-pInt(rect.top)))+PX})};subPixelFix();addEvent(win,'resize',subPixelFix);addEvent(chart,'destroy',function(){removeEvent(win,'resize',subPixelFix)})}}getMargins=function(){var legendOptions=options.legend,legendMargin=pick(legendOptions.margin,10),legendX=legendOptions.x,legendY=legendOptions.y,align=legendOptions.align,verticalAlign=legendOptions.verticalAlign,titleOffset;resetMargins();if((chart.title||chart.subtitle)&&!defined(optionsMarginTop)){titleOffset=mathMax((chart.title&&!chartTitleOptions.floating&&!chartTitleOptions.verticalAlign&&chartTitleOptions.y)||0,(chart.subtitle&&!chartSubtitleOptions.floating&&!chartSubtitleOptions.verticalAlign&&chartSubtitleOptions.y)||0);if(titleOffset){plotTop=mathMax(plotTop,titleOffset+pick(chartTitleOptions.margin,15)+spacingTop)}}if(legendOptions.enabled&&!legendOptions.floating){if(align==='right'){if(!defined(optionsMarginRight)){marginRight=mathMax(marginRight,legendWidth-legendX+legendMargin+spacingRight)}}else if(align==='left'){if(!defined(optionsMarginLeft)){plotLeft=mathMax(plotLeft,legendWidth+legendX+legendMargin+spacingLeft)}}else if(verticalAlign==='top'){if(!defined(optionsMarginTop)){plotTop=mathMax(plotTop,legendHeight+legendY+legendMargin+spacingTop)}}else if(verticalAlign==='bottom'){if(!defined(optionsMarginBottom)){marginBottom=mathMax(marginBottom,legendHeight-legendY+legendMargin+spacingBottom)}}}if(chart.extraBottomMargin){marginBottom+=chart.extraBottomMargin}if(chart.extraTopMargin){plotTop+=chart.extraTopMargin}if(hasCartesianSeries){each(axes,function(axis){axis.getOffset()})}if(!defined(optionsMarginLeft)){plotLeft+=axisOffset[3]}if(!defined(optionsMarginTop)){plotTop+=axisOffset[0]}if(!defined(optionsMarginBottom)){marginBottom+=axisOffset[2]}if(!defined(optionsMarginRight)){marginRight+=axisOffset[1]}setChartSize()};function initReflow(){var reflowTimeout;function reflow(){var width=optionsChart.width||renderTo.offsetWidth,height=optionsChart.height||renderTo.offsetHeight;if(width&&height){if(width!==containerWidth||height!==containerHeight){clearTimeout(reflowTimeout);reflowTimeout=setTimeout(function(){resize(width,height,false)},100)}containerWidth=width;containerHeight=height}}addEvent(win,'resize',reflow);addEvent(chart,'destroy',function(){removeEvent(win,'resize',reflow)})}resize=function(width,height,animation){var chartTitle=chart.title,chartSubtitle=chart.subtitle;isResizing+=1;setAnimation(animation,chart);oldChartHeight=chartHeight;oldChartWidth=chartWidth;if(defined(width)){chart.chartWidth=chartWidth=mathRound(width)}if(defined(height)){chart.chartHeight=chartHeight=mathRound(height)}css(container,{width:chartWidth+PX,height:chartHeight+PX});renderer.setSize(chartWidth,chartHeight,animation);plotWidth=chartWidth-plotLeft-marginRight;plotHeight=chartHeight-plotTop-marginBottom;maxTicks=null;each(axes,function(axis){axis.isDirty=true;axis.setScale()});each(series,function(serie){serie.isDirty=true});chart.isDirtyLegend=true;chart.isDirtyBox=true;getMargins();if(chartTitle){chartTitle.align(null,null,spacingBox)}if(chartSubtitle){chartSubtitle.align(null,null,spacingBox)}redraw(animation);oldChartHeight=null;fireEvent(chart,'resize');setTimeout(function(){fireEvent(chart,'endResize',null,function(){isResizing-=1})},(globalAnimation&&globalAnimation.duration)||500)};setChartSize=function(){chart.plotLeft=plotLeft=mathRound(plotLeft);chart.plotTop=plotTop=mathRound(plotTop);chart.plotWidth=plotWidth=mathRound(chartWidth-plotLeft-marginRight);chart.plotHeight=plotHeight=mathRound(chartHeight-plotTop-marginBottom);chart.plotSizeX=inverted?plotHeight:plotWidth;chart.plotSizeY=inverted?plotWidth:plotHeight;spacingBox={x:spacingLeft,y:spacingTop,width:chartWidth-spacingLeft-spacingRight,height:chartHeight-spacingTop-spacingBottom};each(axes,function(axis){axis.setAxisSize()})};resetMargins=function(){plotTop=pick(optionsMarginTop,spacingTop);marginRight=pick(optionsMarginRight,spacingRight);marginBottom=pick(optionsMarginBottom,spacingBottom);plotLeft=pick(optionsMarginLeft,spacingLeft);axisOffset=[0,0,0,0]};drawChartBox=function(){var chartBorderWidth=optionsChart.borderWidth||0,chartBackgroundColor=optionsChart.backgroundColor,plotBackgroundColor=optionsChart.plotBackgroundColor,plotBackgroundImage=optionsChart.plotBackgroundImage,mgn,plotSize={x:plotLeft,y:plotTop,width:plotWidth,height:plotHeight};mgn=chartBorderWidth+(optionsChart.shadow?8:0);if(chartBorderWidth||chartBackgroundColor){if(!chartBackground){chartBackground=renderer.rect(mgn/2,mgn/2,chartWidth-mgn,chartHeight-mgn,optionsChart.borderRadius,chartBorderWidth).attr({stroke:optionsChart.borderColor,'stroke-width':chartBorderWidth,fill:chartBackgroundColor||NONE}).add().shadow(optionsChart.shadow)}else{chartBackground.animate(chartBackground.crisp(null,null,null,chartWidth-mgn,chartHeight-mgn))}}if(plotBackgroundColor){if(!plotBackground){plotBackground=renderer.rect(plotLeft,plotTop,plotWidth,plotHeight,0).attr({fill:plotBackgroundColor}).add().shadow(optionsChart.plotShadow)}else{plotBackground.animate(plotSize)}}if(plotBackgroundImage){if(!plotBGImage){plotBGImage=renderer.image(plotBackgroundImage,plotLeft,plotTop,plotWidth,plotHeight).add()}else{plotBGImage.animate(plotSize)}}if(optionsChart.plotBorderWidth){if(!plotBorder){plotBorder=renderer.rect(plotLeft,plotTop,plotWidth,plotHeight,0,optionsChart.plotBorderWidth).attr({stroke:optionsChart.plotBorderColor,'stroke-width':optionsChart.plotBorderWidth,zIndex:4}).add()}else{plotBorder.animate(plotBorder.crisp(null,plotLeft,plotTop,plotWidth,plotHeight))}}chart.isDirtyBox=false};function render(){var labels=options.labels,credits=options.credits,creditsHref;setTitle();legend=chart.legend=new Legend(chart);getMargins();each(axes,function(axis){axis.setTickPositions(true)});adjustTickAmounts();getMargins();drawChartBox();if(hasCartesianSeries){each(axes,function(axis){axis.render()})}if(!chart.seriesGroup){chart.seriesGroup=renderer.g('series-group').attr({zIndex:3}).add()}each(series,function(serie){serie.translate();serie.setTooltipPoints();serie.render()});if(labels.items){each(labels.items,function(){var style=extend(labels.style,this.style),x=pInt(style.left)+plotLeft,y=pInt(style.top)+plotTop+12;delete style.left;delete style.top;renderer.text(this.html,x,y).attr({zIndex:2}).css(style).add()})}if(!chart.toolbar){chart.toolbar=Toolbar(chart)}if(credits.enabled&&!chart.credits){creditsHref=credits.href;renderer.text(credits.text,0,0).on('click',function(){if(creditsHref){location.href=creditsHref}}).attr({align:credits.position.align,zIndex:8}).css(credits.style).add().align(credits.position)}placeTrackerGroup();chart.hasRendered=true;if(renderToClone){renderTo.appendChild(container);discardElement(renderToClone)}}function destroy(){var start=+new Date();var i=series.length,parentNode=container&&container.parentNode;fireEvent(chart,'destroy');removeEvent(win,'unload',destroy);removeEvent(chart);each(axes,function(axis){removeEvent(axis)});while(i--){series[i].destroy()}if(container){container.innerHTML='';removeEvent(container);if(parentNode){parentNode.removeChild(container)}container=null}if(renderer){renderer.alignedObjects=null}clearInterval(tooltipInterval);for(i in chart){delete chart[i]}}function firstRender(){var ONREADYSTATECHANGE='onreadystatechange',COMPLETE='complete';if(!hasSVG&&win==win.top&&doc.readyState!==COMPLETE){doc.attachEvent(ONREADYSTATECHANGE,function(){doc.detachEvent(ONREADYSTATECHANGE,firstRender);if(doc.readyState===COMPLETE){firstRender()}});return}getContainer();fireEvent(chart,'init');if(RangeSelector&&options.rangeSelector.enabled){chart.rangeSelector=new RangeSelector(chart)}resetMargins();setChartSize();each(options.series||[],function(serieOptions){initSeries(serieOptions)});chart.inverted=inverted=pick(inverted,options.chart.inverted);getAxes();if(Scroller&&options.navigator.enabled||options.scrollbar.enabled){chart.scroller=new Scroller(chart)}chart.render=render;chart.tracker=tracker=new MouseTracker(chart,options.tooltip);render();if(callback){callback.apply(chart,[chart])}each(chart.callbacks,function(fn){fn.apply(chart,[chart])});fireEvent(chart,'load')}addEvent(win,'unload',destroy);if(optionsChart.reflow!==false){addEvent(chart,'load',initReflow)}if(chartEvents){for(eventType in chartEvents){addEvent(chart,eventType,chartEvents[eventType])}}chart.options=options;chart.series=series;chart.xAxis=[];chart.yAxis=[];chart.addSeries=addSeries;chart.animation=pick(optionsChart.animation,true);chart.Axis=Axis;chart.destroy=destroy;chart.get=get;chart.getSelectedPoints=getSelectedPoints;chart.getSelectedSeries=getSelectedSeries;chart.hideLoading=hideLoading;chart.initSeries=initSeries;chart.isInsidePlot=isInsidePlot;chart.redraw=redraw;chart.setSize=resize;chart.setTitle=setTitle;chart.showLoading=showLoading;chart.pointCount=0;chart.counters=new ChartCounters();firstRender()}Chart.prototype.callbacks=[];var Point=function(){};Point.prototype={init:function(series,options,x){var point=this,counters=series.chart.counters,defaultColors;point.series=series;point.applyOptions(options,x);point.pointAttr={};if(series.options.colorByPoint){defaultColors=series.chart.options.colors;if(!point.options){point.options={}}point.color=point.options.color=point.color||defaultColors[counters.color++];counters.wrapColor(defaultColors.length)}series.chart.pointCount++;return point},applyOptions:function(options,x){var point=this,series=point.series,optionsType=typeof options;point.config=options;if(optionsType==='number'||options===null){point.y=options}else if(typeof options[0]==='number'){point.x=options[0];point.y=options[1]}else if(optionsType==='object'&&typeof options.length!=='number'){extend(point,options);point.options=options}else if(typeof options[0]==='string'){point.name=options[0];point.y=options[1]}if(point.x===UNDEFINED){point.x=x===UNDEFINED?series.autoIncrement():x}},destroy:function(){var point=this,series=point.series,prop;series.chart.pointCount--;if(point===series.chart.hoverPoint){point.onMouseOut()}series.chart.hoverPoints=null;if(point.graphic){removeEvent(point);point.destroyElements()}if(point.legendItem){point.series.chart.legend.destroyItem(point)}for(prop in point){point[prop]=null}},destroyElements:function(){var point=this,props=['graphic','tracker','dataLabel','group','connector'],prop,i=5;while(i--){prop=props[i];if(point[prop]){point[prop]=point[prop].destroy()}}},getLabelConfig:function(){var point=this;return{x:point.category,y:point.y,series:point.series,point:point,percentage:point.percentage,total:point.total||point.stackTotal}},select:function(selected,accumulate){var point=this,series=point.series,chart=series.chart;point.selected=selected=pick(selected,!point.selected);point.firePointEvent(selected?'select':'unselect');point.setState(selected&&SELECT_STATE);if(!accumulate){each(chart.getSelectedPoints(),function(loopPoint){if(loopPoint.selected&&loopPoint!==point){loopPoint.selected=false;loopPoint.setState(NORMAL_STATE);loopPoint.firePointEvent('unselect')}})}},onMouseOver:function(){var point=this,series=point.series,chart=series.chart,tooltip=chart.tooltip,hoverPoint=chart.hoverPoint;if(hoverPoint&&hoverPoint!==point){hoverPoint.onMouseOut()}point.firePointEvent('mouseOver');if(tooltip&&(!tooltip.shared||series.noSharedTooltip)){tooltip.refresh(point)}point.setState(HOVER_STATE);chart.hoverPoint=point},onMouseOut:function(){var point=this;point.firePointEvent('mouseOut');point.setState();point.series.chart.hoverPoint=null},tooltipFormatter:function(useHeader){var point=this,series=point.series;return['<span style="color:'+series.color+'">',(point.name||series.name),'</span>: ',(!useHeader?('<b>x = '+(point.name||point.x)+',</b> '):''),'<b>',(!useHeader?'y = ':''),point.y,'</b>'].join('')},update:function(options,redraw,animation){var point=this,series=point.series,dataLabel=point.dataLabel,graphic=point.graphic,i,data=series.data,dataLength=data.length,chart=series.chart;redraw=pick(redraw,true);point.firePointEvent('update',{options:options},function(){point.applyOptions(options);if(isObject(options)){series.getAttribs();if(graphic){graphic.attr(point.pointAttr[series.state])}}for(i=0;i<dataLength;i++){if(data[i]===point){series.xData[i]=point.x;series.yData[i]=point.y;series.options.data[i]=options;break}}series.isDirty=true;series.isDirtyData=true;if(redraw){chart.redraw(animation)}})},remove:function(redraw,animation){var point=this,series=point.series,chart=series.chart,i,data=series.data,dataLength=data.length;setAnimation(animation,chart);redraw=pick(redraw,true);point.firePointEvent('remove',null,function(){for(i=0;i<dataLength;i++){if(data[i]===point){data.splice(i,1);series.options.data.splice(i,1);series.xData.splice(i,1);series.yData.splice(i,1);break}}point.destroy();series.isDirty=true;series.isDirtyData=true;if(redraw){chart.redraw()}})},firePointEvent:function(eventType,eventArgs,defaultFunction){var point=this,series=this.series,seriesOptions=series.options;if(seriesOptions.point.events[eventType]||(point.options&&point.options.events&&point.options.events[eventType])){this.importEvents()}if(eventType==='click'&&seriesOptions.allowPointSelect){defaultFunction=function(event){point.select(null,event.ctrlKey||event.metaKey||event.shiftKey)}}fireEvent(this,eventType,eventArgs,defaultFunction)},importEvents:function(){if(!this.hasImportedEvents){var point=this,options=merge(point.series.options.point,point.options),events=options.events,eventType;point.events=events;for(eventType in events){addEvent(point,eventType,events[eventType])}this.hasImportedEvents=true}},setState:function(state){var point=this,series=point.series,stateOptions=series.options.states,markerOptions=defaultPlotOptions[series.type].marker&&series.options.marker,normalDisabled=markerOptions&&!markerOptions.enabled,markerStateOptions=markerOptions&&markerOptions.states[state],stateDisabled=markerStateOptions&&markerStateOptions.enabled===false,stateMarkerGraphic=series.stateMarkerGraphic,chart=series.chart,radius,pointAttr=point.pointAttr;state=state||NORMAL_STATE;if(state===point.state||(point.selected&&state!==SELECT_STATE)||(stateOptions[state]&&stateOptions[state].enabled===false)||(state&&(stateDisabled||(normalDisabled&&!markerStateOptions.enabled)))){return}if(point.graphic){point.graphic.attr(pointAttr[state])}else{if(state){if(!stateMarkerGraphic){radius=markerOptions.radius;series.stateMarkerGraphic=stateMarkerGraphic=chart.renderer.symbol(series.symbol,-radius,-radius,2*radius,2*radius).attr(pointAttr[state]).add(series.group)}stateMarkerGraphic.translate(point.plotX,point.plotY)}if(stateMarkerGraphic){stateMarkerGraphic[state?'show':'hide']()}}point.state=state}};var Series=function(){};Series.prototype={isCartesian:true,type:'line',pointClass:Point,pointAttrToOptions:{stroke:'lineColor','stroke-width':'lineWidth',fill:'fillColor',r:'radius'},init:function(chart,options){var series=this,eventType,events,index=chart.series.length;series.chart=chart;options=series.setOptions(options);extend(series,{index:index,options:options,name:options.name||'Series '+(index+1),state:NORMAL_STATE,pointAttr:{},visible:options.visible!==false,selected:options.selected===true});events=options.events;for(eventType in events){addEvent(series,eventType,events[eventType])}if((events&&events.click)||(options.point&&options.point.events&&options.point.events.click)||options.allowPointSelect){chart.runTrackerClick=true}series.getColor();series.getSymbol();series.setData(options.data,false)},autoIncrement:function(){var series=this,options=series.options,xIncrement=series.xIncrement;xIncrement=pick(xIncrement,options.pointStart,0);series.pointInterval=pick(series.pointInterval,options.pointInterval,1);series.xIncrement=xIncrement+series.pointInterval;return xIncrement},getSegments:function(){var lastNull=-1,segments=[],points=this.points;var start=+new Date();each(points,function(point,i){if(point.y===null){if(i>lastNull+1){segments.push(points.slice(lastNull+1,i))}lastNull=i}else if(i===points.length-1){segments.push(points.slice(lastNull+1,i+1))}});this.segments=segments},setOptions:function(itemOptions){var plotOptions=this.chart.options.plotOptions,data=itemOptions.data,options;itemOptions.data=null;options=merge(plotOptions[this.type],plotOptions.series,itemOptions);options.data=data;return options},getColor:function(){var defaultColors=this.chart.options.colors,counters=this.chart.counters;this.color=this.options.color||defaultColors[counters.color++]||'#0000ff';counters.wrapColor(defaultColors.length)},getSymbol:function(){var defaultSymbols=this.chart.options.symbols,counters=this.chart.counters;this.symbol=this.options.marker.symbol||defaultSymbols[counters.symbol++];counters.wrapSymbol(defaultSymbols.length)},addPoint:function(options,redraw,shift,animation){var series=this,data=series.data,graph=series.graph,area=series.area,chart=series.chart,xData=series.xData,yData=series.yData,currentShift=graph.shift||0,dataOptions=series.options.data,point;setAnimation(animation,chart);if(graph&&shift){graph.shift=currentShift+1}if(area){area.shift=currentShift+1;area.isArea=true}redraw=pick(redraw,true);point={series:series};series.pointClass.prototype.applyOptions.apply(point,[options]);xData.push(point.x);yData.push(point.y);dataOptions.push(options);if(shift){if(data[0]){data[0].remove(false)}else{data.shift();xData.shift();yData.shift();dataOptions.shift()}}series.getAttribs();series.isDirty=true;series.isDirtyData=true;if(redraw){chart.redraw()}},setData:function(data,redraw){var series=this,oldData=series.points,options=series.options,initialColor=series.initialColor,chart=series.chart,i;series.xIncrement=null;if(defined(initialColor)){chart.counters.color=initialColor}var xData=[],yData=[],dataLength=data.length,turboThreshold=options.turboThreshold||1000,pt;if(dataLength>turboThreshold){if(isNumber(data[0])){var x=pick(options.pointStart,0),pointInterval=pick(options.pointInterval,1);for(i=0;i<dataLength;i++){xData[i]=x;yData[i]=data[i];x+=pointInterval}series.xIncrement=x}else if(data[0].constructor===Array){if(series.valueCount===4){for(i=0;i<dataLength;i++){pt=data[i];xData[i]=pt[0];yData[i]=pt.slice(1,5)}}else{for(i=0;i<dataLength;i++){pt=data[i];xData[i]=pt[0];yData[i]=pt[1]}}}}else{for(i=0;i<dataLength;i++){pt={series:series};series.pointClass.prototype.applyOptions.apply(pt,[data[i]]);xData[i]=pt.x;yData[i]=pt.y}}series.data=null;series.options.data=data;series.xData=xData;series.yData=yData;i=(oldData&&oldData.length)||0;while(i--){oldData[i].destroy()}series.isDirty=series.isDirtyData=chart.isDirtyBox=true;if(pick(redraw,true)){chart.redraw(false)}},remove:function(redraw,animation){var series=this,chart=series.chart;redraw=pick(redraw,true);if(!series.isRemoving){series.isRemoving=true;fireEvent(series,'remove',null,function(){series.destroy();chart.isDirtyLegend=chart.isDirtyBox=true;if(redraw){chart.redraw(animation)}})}series.isRemoving=false},processData:function(){var series=this,processedXData=series.xData,processedYData=series.yData,dataLength=processedXData.length,cropStart=0,i,cropThreshold=series.options.cropThreshold;if(!cropThreshold||dataLength>cropThreshold){var extremes=series.xAxis.getExtremes(),min=extremes.min,max=extremes.max,cropEnd=dataLength-1,point;if(processedXData[0]<min||processedXData[cropEnd]>max){for(i=0;i<dataLength;i++){if(processedXData[i]>=min){cropStart=mathMax(0,i-1);break}}for(i;i<dataLength;i++){if(processedXData[i]>max){cropEnd=i+1;break}}processedXData=processedXData.slice(cropStart,cropEnd);processedYData=processedYData.slice(cropStart,cropEnd)}}series.cropStart=cropStart;series.processedXData=processedXData;series.processedYData=processedYData},generatePoints:function(){var series=this,options=series.options,dataOptions=options.data,hasProcessedData=series.prosessedXData!==series.xData,data=series.data,dataLength,processedXData=series.processedXData,processedYData=series.processedYData,pointClass=series.pointClass,processedDataLength=processedXData.length,cropStart=series.cropStart||0,cursor,hasGroupedData=series.hasGroupedData,point,points=[],i;if(!data&&!hasGroupedData){var arr=[];arr.length=dataOptions.length;data=series.data=arr}for(i=0;i<processedDataLength;i++){cursor=cropStart+i;if(!hasGroupedData){if(data[cursor]){point=data[cursor]}else{data[cursor]=point=(new pointClass()).init(series,dataOptions[cursor],processedXData[i])}points[i]=point}else{points[i]=(new pointClass()).init(series,[processedXData[i]].concat(splat(processedYData[i])))}}if(data&&processedDataLength!==(dataLength=data.length)){for(i=0;i<dataLength;i++){if(i===cropStart&&!hasGroupedData){i+=processedDataLength}if(data[i]){data[i].destroyElements()}}}series.data=data;series.points=points},translate:function(){if(!this.processedXData){this.processData()}this.generatePoints();var series=this,chart=series.chart,options=series.options,stacking=options.stacking,xAxis=series.xAxis,categories=xAxis.categories,yAxis=series.yAxis,points=series.points,dataLength=points.length,leastDistance=xAxis.leastDistance,interval,i,cropI=-1;for(i=0;i<dataLength;i++){var point=points[i],xValue=point.x,yValue=point.y,yBottom=point.low,stack=yAxis.stacks[(yValue<0?'-':'')+series.stackKey],pointStack,distance,pointStackTotal;point.plotX=series.xAxis.translate(xValue);if(stacking&&series.visible&&stack&&stack[xValue]){pointStack=stack[xValue];pointStackTotal=pointStack.total;pointStack.cum=yBottom=pointStack.cum-yValue;yValue=yBottom+yValue;if(stacking==='percent'){yBottom=pointStackTotal?yBottom*100/pointStackTotal:0;yValue=pointStackTotal?yValue*100/pointStackTotal:0}point.percentage=pointStackTotal?point.y*100/pointStackTotal:0;point.stackTotal=pointStackTotal}if(defined(yBottom)){point.yBottom=yAxis.translate(yBottom,0,1,0,1)}if(yValue!==null){point.plotY=yAxis.translate(yValue,0,1,0,1)}point.clientX=chart.inverted?chart.plotHeight-point.plotX:point.plotX;point.category=categories&&categories[point.x]!==UNDEFINED?categories[point.x]:point.x;if(series.getDistance&&i){distance=mathAbs(point.plotX-points[i-1].plotX);leastDistance=leastDistance===UNDEFINED?distance:mathMin(distance,leastDistance)}}xAxis.leastDistance=leastDistance;series.getSegments()},setTooltipPoints:function(renew){var series=this,chart=series.chart,inverted=chart.inverted,points=[],pointsLength,plotSize=mathRound((inverted?chart.plotTop:chart.plotLeft)+chart.plotSizeX),low,high,xAxis=series.xAxis,point,i,tooltipPoints=[];if(renew){series.tooltipPoints=null}each(series.segments||series.points,function(segment){points=points.concat(segment)});if(xAxis&&xAxis.reversed){points=points.reverse()}pointsLength=points.length;for(i=0;i<pointsLength;i++){point=points[i];low=points[i-1]?points[i-1]._high+1:0;high=point._high=points[i+1]?(mathFloor((point.plotX+(points[i+1]?points[i+1].plotX:plotSize))/2)):plotSize;while(low<=high){tooltipPoints[inverted?plotSize-low++:low++]=point}}series.tooltipPoints=tooltipPoints},onMouseOver:function(){var series=this,chart=series.chart,hoverSeries=chart.hoverSeries;if(!hasTouch&&chart.mouseIsDown){return}if(hoverSeries&&hoverSeries!==series){hoverSeries.onMouseOut()}if(series.options.events.mouseOver){fireEvent(series,'mouseOver')}series.setState(HOVER_STATE);chart.hoverSeries=series},onMouseOut:function(){var series=this,options=series.options,chart=series.chart,tooltip=chart.tooltip,hoverPoint=chart.hoverPoint;if(hoverPoint){hoverPoint.onMouseOut()}if(series&&options.events.mouseOut){fireEvent(series,'mouseOut')}if(tooltip&&!options.stickyTracking){tooltip.hide()}series.setState();chart.hoverSeries=null},animate:function(init){var series=this,chart=series.chart,clipRect=series.clipRect,animation=series.options.animation;if(animation&&!isObject(animation)){animation={}}if(init){if(!clipRect.isAnimating){clipRect.attr('width',0);clipRect.isAnimating=true}}else{clipRect.animate({width:chart.plotSizeX},animation);this.animate=null}},drawPoints:function(){var series=this,pointAttr,points=series.points,chart=series.chart,plotX,plotY,i,point,radius,graphic;if(series.options.marker.enabled){i=points.length;while(i--){point=points[i];plotX=point.plotX;plotY=point.plotY;graphic=point.graphic;if(plotY!==UNDEFINED&&!isNaN(plotY)){pointAttr=point.pointAttr[point.selected?SELECT_STATE:NORMAL_STATE];radius=pointAttr.r;if(graphic){graphic.animate({x:plotX-radius,y:plotY-radius,width:2*radius,height:2*radius})}else{point.graphic=chart.renderer.symbol(pick(point.marker&&point.marker.symbol,series.symbol),plotX-radius,plotY-radius,2*radius,2*radius).attr(pointAttr).add(series.group)}}}}},convertAttribs:function(options,base1,base2,base3){var conversion=this.pointAttrToOptions,attr,option,obj={};options=options||{};base1=base1||{};base2=base2||{};base3=base3||{};for(attr in conversion){option=conversion[attr];obj[attr]=pick(options[option],base1[attr],base2[attr],base3[attr])}return obj},getAttribs:function(){var series=this,normalOptions=defaultPlotOptions[series.type].marker?series.options.marker:series.options,stateOptions=normalOptions.states,stateOptionsHover=stateOptions[HOVER_STATE],pointStateOptionsHover,seriesColor=series.color,normalDefaults={stroke:seriesColor,fill:seriesColor},points=series.points,i,point,seriesPointAttr=[],pointAttr,pointAttrToOptions=series.pointAttrToOptions,hasPointSpecificOptions,key;if(series.options.marker){stateOptionsHover.radius=stateOptionsHover.radius||normalOptions.radius+2;stateOptionsHover.lineWidth=stateOptionsHover.lineWidth||normalOptions.lineWidth+1}else{stateOptionsHover.color=stateOptionsHover.color||Color(stateOptionsHover.color||seriesColor).brighten(stateOptionsHover.brightness).get()}seriesPointAttr[NORMAL_STATE]=series.convertAttribs(normalOptions,normalDefaults);each([HOVER_STATE,SELECT_STATE],function(state){seriesPointAttr[state]=series.convertAttribs(stateOptions[state],seriesPointAttr[NORMAL_STATE])});series.pointAttr=seriesPointAttr;i=points.length;while(i--){point=points[i];normalOptions=(point.options&&point.options.marker)||point.options;if(normalOptions&&normalOptions.enabled===false){normalOptions.radius=0}hasPointSpecificOptions=false;if(point.options){for(key in pointAttrToOptions){if(defined(normalOptions[pointAttrToOptions[key]])){hasPointSpecificOptions=true}}}if(hasPointSpecificOptions){pointAttr=[];stateOptions=normalOptions.states||{};pointStateOptionsHover=stateOptions[HOVER_STATE]=stateOptions[HOVER_STATE]||{};if(!series.options.marker){pointStateOptionsHover.color=Color(pointStateOptionsHover.color||point.options.color).brighten(pointStateOptionsHover.brightness||stateOptionsHover.brightness).get()}pointAttr[NORMAL_STATE]=series.convertAttribs(normalOptions,seriesPointAttr[NORMAL_STATE]);pointAttr[HOVER_STATE]=series.convertAttribs(stateOptions[HOVER_STATE],seriesPointAttr[HOVER_STATE],pointAttr[NORMAL_STATE]);pointAttr[SELECT_STATE]=series.convertAttribs(stateOptions[SELECT_STATE],seriesPointAttr[SELECT_STATE],pointAttr[NORMAL_STATE])}else{pointAttr=seriesPointAttr}point.pointAttr=pointAttr}},destroy:function(){var series=this,chart=series.chart,clipRect=series.clipRect,issue134=/\/5[0-9\.]+ (Safari|Mobile)\//.test(userAgent),destroy,i,data=series.data||[],point,prop;removeEvent(series);if(series.legendItem){series.chart.legend.destroyItem(series)}i=data.length;while(i--){point=data[i];if(point&&point.destroy){point.destroy()}}series.points=null;each(['area','graph','dataLabelsGroup','group','tracker'],function(prop){if(series[prop]){destroy=issue134&&prop==='group'?'hide':'destroy';series[prop][destroy]()}});if(chart.hoverSeries===series){chart.hoverSeries=null}erase(chart.series,series);for(prop in series){delete series[prop]}},drawDataLabels:function(){if(this.options.dataLabels.enabled){var series=this,x,y,points=series.points,options=series.options.dataLabels,str,dataLabelsGroup=series.dataLabelsGroup,chart=series.chart,inverted=chart.inverted,seriesType=series.type,color,stacking=series.options.stacking,isBarLike=seriesType==='column'||seriesType==='bar',vAlignIsNull=options.verticalAlign===null,yIsNull=options.y===null;if(isBarLike){if(stacking){if(vAlignIsNull){options=merge(options,{verticalAlign:'middle'})}if(yIsNull){options=merge(options,{y:{top:14,middle:4,bottom:-6}[options.verticalAlign]})}}else{if(vAlignIsNull){options=merge(options,{verticalAlign:'top'})}if(yIsNull){options=merge(options,{y:-6})}}}if(!dataLabelsGroup){dataLabelsGroup=series.dataLabelsGroup=chart.renderer.g('data-labels').attr({visibility:series.visible?VISIBLE:HIDDEN,zIndex:6}).translate(chart.plotLeft,chart.plotTop).add()}color=options.color;if(color==='auto'){color=null}options.style.color=pick(color,series.color);each(points,function(point,i){var barX=point.barX,plotX=(barX&&barX+point.barW/2)||point.plotX||-999,plotY=pick(point.plotY,-999),dataLabel=point.dataLabel,align=options.align,individualYDelta=yIsNull?(point.y>0?-6:12):options.y;str=options.formatter.call(point.getLabelConfig());x=(inverted?chart.plotWidth-plotY:plotX)+options.x;y=(inverted?chart.plotHeight-plotX:plotY)+individualYDelta;if(seriesType==='column'){x+={left:-1,right:1}[align]*point.barW/2||0}if(dataLabel){if(inverted&&!options.y){y=y+pInt(dataLabel.styles.lineHeight)*0.9-dataLabel.getBBox().height/2}dataLabel.attr({text:str}).animate({x:x,y:y})}else if(defined(str)){dataLabel=point.dataLabel=chart.renderer.text(str,x,y).attr({align:align,rotation:options.rotation,zIndex:1}).css(options.style).add(dataLabelsGroup);if(inverted&&!options.y){dataLabel.attr({y:y+pInt(dataLabel.styles.lineHeight)*0.9-dataLabel.getBBox().height/2})}}if(isBarLike&&series.options.stacking){var barY=point.barY,barW=point.barW,barH=point.barH;dataLabel.align(options,null,{x:inverted?chart.plotWidth-barY-barH:barX,y:inverted?chart.plotHeight-barX-barW:barY,width:inverted?barH:barW,height:inverted?barW:barH})}})}},drawGraph:function(state){var series=this,options=series.options,chart=series.chart,plotLeft=chart.plotLeft,plotRight=plotLeft+chart.plotWidth,graph=series.graph,graphPath=[],fillColor,area=series.area,group=series.group,color=options.lineColor||series.color,lineWidth=options.lineWidth,dashStyle=options.dashStyle,segmentPath,renderer=chart.renderer,translatedThreshold=series.yAxis.getThreshold(options.threshold),useArea=/^area/.test(series.type),singlePoints=[],areaPath=[],attribs;each(series.segments,function(segment){segmentPath=[];each(segment,function(point,i){if(series.getPointSpline){segmentPath.push.apply(segmentPath,series.getPointSpline(segment,point,i))}else{segmentPath.push(i?L:M);if(i&&options.step){var lastPoint=segment[i-1];segmentPath.push(point.plotX,lastPoint.plotY)}segmentPath.push(point.plotX,point.plotY)}});if(segment.length>1){graphPath=graphPath.concat(segmentPath)}else{singlePoints.push(segment[0])}if(useArea){var areaSegmentPath=[],i,segLength=segmentPath.length;for(i=0;i<segLength;i++){areaSegmentPath.push(segmentPath[i])}if(segLength===3){areaSegmentPath.push(L,segmentPath[1],segmentPath[2])}if(options.stacking&&series.type!=='areaspline'){for(i=segment.length-1;i>=0;i--){areaSegmentPath.push(segment[i].plotX,segment[i].yBottom)}}else{areaSegmentPath.push(L,segment[segment.length-1].plotX,translatedThreshold,L,segment[0].plotX,translatedThreshold)}areaPath=areaPath.concat(areaSegmentPath)}});series.graphPath=graphPath;series.singlePoints=singlePoints;if(useArea){fillColor=pick(options.fillColor,Color(series.color).setOpacity(options.fillOpacity||0.75).get());if(area){area.animate({d:areaPath})}else{series.area=series.chart.renderer.path(areaPath).attr({fill:fillColor}).add(group)}}if(graph){graph.animate({d:graphPath})}else{if(lineWidth){attribs={'stroke':color,'stroke-width':lineWidth};if(dashStyle){attribs.dashstyle=dashStyle}series.graph=renderer.path(graphPath).attr(attribs).add(group).shadow(options.shadow)}}},render:function(){var series=this,chart=series.chart,group,setInvert,options=series.options,doClip=options.clip!==false,animation=options.animation,doAnimation=animation&&series.animate,duration=doAnimation?(animation&&animation.duration)||500:0,clipRect=series.clipRect,renderer=chart.renderer;if(!clipRect){clipRect=series.clipRect=!chart.hasRendered&&chart.clipRect?chart.clipRect:renderer.clipRect(0,0,chart.plotSizeX,chart.plotSizeY);if(!chart.clipRect){chart.clipRect=clipRect}}if(!series.group){group=series.group=renderer.g('series');if(chart.inverted){setInvert=function(){group.attr({width:chart.plotWidth,height:chart.plotHeight}).invert()};setInvert();addEvent(chart,'resize',setInvert)}if(doClip){group.clip(series.clipRect)}group.attr({visibility:series.visible?VISIBLE:HIDDEN,zIndex:options.zIndex}).translate(series.xAxis.left,series.yAxis.top).add(chart.seriesGroup)}series.drawDataLabels();if(doAnimation){series.animate(true)}series.getAttribs();if(series.drawGraph){series.drawGraph()}series.drawPoints();if(series.options.enableMouseTracking!==false){series.drawTracker()}if(doAnimation){series.animate()}setTimeout(function(){clipRect.isAnimating=false;group=series.group;if(group&&clipRect!==chart.clipRect&&clipRect.renderer){if(doClip){group.clip((series.clipRect=chart.clipRect))}clipRect.destroy()}},duration);series.isDirty=series.isDirtyData=false},redraw:function(){var series=this,chart=series.chart,clipRect=series.clipRect,group=series.group;if(group){if(chart.inverted){group.attr({width:chart.plotWidth,height:chart.plotHeight})}group.animate({translateX:series.xAxis.left,translateY:series.yAxis.top})}series.translate();series.setTooltipPoints(true);if(series.isDirtyData){fireEvent(series,'updatedData')}series.render()},setState:function(state){var series=this,options=series.options,graph=series.graph,stateOptions=options.states,lineWidth=options.lineWidth;state=state||NORMAL_STATE;if(series.state!==state){series.state=state;if(stateOptions[state]&&stateOptions[state].enabled===false){return}if(state){lineWidth=stateOptions[state].lineWidth||lineWidth+1}if(graph&&!graph.dashstyle){graph.attr({'stroke-width':lineWidth},state?0:500)}}},setVisible:function(vis,redraw){var series=this,chart=series.chart,legendItem=series.legendItem,seriesGroup=series.group,seriesTracker=series.tracker,dataLabelsGroup=series.dataLabelsGroup,showOrHide,i,points=series.points,point,ignoreHiddenSeries=chart.options.chart.ignoreHiddenSeries,oldVisibility=series.visible;series.visible=vis=vis===UNDEFINED?!oldVisibility:vis;showOrHide=vis?'show':'hide';if(seriesGroup){seriesGroup[showOrHide]()}if(seriesTracker){seriesTracker[showOrHide]()}else{i=points.length;while(i--){point=points[i];if(point.tracker){point.tracker[showOrHide]()}}}if(dataLabelsGroup){dataLabelsGroup[showOrHide]()}if(legendItem){chart.legend.colorizeItem(series,vis)}series.isDirty=true;if(series.options.stacking){each(chart.series,function(otherSeries){if(otherSeries.options.stacking&&otherSeries.visible){otherSeries.isDirty=true}})}if(ignoreHiddenSeries){chart.isDirtyBox=true}if(redraw!==false){chart.redraw()}fireEvent(series,showOrHide)},show:function(){this.setVisible(true)},hide:function(){this.setVisible(false)},select:function(selected){var series=this;series.selected=selected=(selected===UNDEFINED)?!series.selected:selected;if(series.checkbox){series.checkbox.checked=selected}fireEvent(series,selected?'select':'unselect')},drawTracker:function(){var series=this,options=series.options,trackerPath=[].concat(series.graphPath),trackerPathLength=trackerPath.length,chart=series.chart,snap=chart.options.tooltip.snap,tracker=series.tracker,cursor=options.cursor,css=cursor&&{cursor:cursor},singlePoints=series.singlePoints,singlePoint,i;if(trackerPathLength){i=trackerPathLength+1;while(i--){if(trackerPath[i]===M){trackerPath.splice(i+1,0,trackerPath[i+1]-snap,trackerPath[i+2],L)}if((i&&trackerPath[i]===M)||i===trackerPathLength){trackerPath.splice(i,0,L,trackerPath[i-2]+snap,trackerPath[i-1])}}}for(i=0;i<singlePoints.length;i++){singlePoint=singlePoints[i];trackerPath.push(M,singlePoint.plotX-snap,singlePoint.plotY,L,singlePoint.plotX+snap,singlePoint.plotY)}if(tracker){tracker.attr({d:trackerPath})}else{series.tracker=chart.renderer.path(trackerPath).attr({isTracker:true,stroke:TRACKER_FILL,fill:NONE,'stroke-width':options.lineWidth+2*snap,visibility:series.visible?VISIBLE:HIDDEN,zIndex:1}).on(hasTouch?'touchstart':'mouseover',function(){if(chart.hoverSeries!==series){series.onMouseOver()}}).on('mouseout',function(){if(!options.stickyTracking){series.onMouseOut()}}).css(css).add(chart.trackerGroup)}}};var LineSeries=extendClass(Series);seriesTypes.line=LineSeries;var AreaSeries=extendClass(Series,{type:'area',useThreshold:true});seriesTypes.area=AreaSeries;var SplineSeries=extendClass(Series,{type:'spline',getPointSpline:function(segment,point,i){var smoothing=1.5,denom=smoothing+1,plotX=point.plotX,plotY=point.plotY,lastPoint=segment[i-1],nextPoint=segment[i+1],leftContX,leftContY,rightContX,rightContY,ret;if(i&&i<segment.length-1){var lastX=lastPoint.plotX,lastY=lastPoint.plotY,nextX=nextPoint.plotX,nextY=nextPoint.plotY,correction;leftContX=(smoothing*plotX+lastX)/denom;leftContY=(smoothing*plotY+lastY)/denom;rightContX=(smoothing*plotX+nextX)/denom;rightContY=(smoothing*plotY+nextY)/denom;correction=((rightContY-leftContY)*(rightContX-plotX))/(rightContX-leftContX)+plotY-rightContY;leftContY+=correction;rightContY+=correction;if(leftContY>lastY&&leftContY>plotY){leftContY=mathMax(lastY,plotY);rightContY=2*plotY-leftContY}else if(leftContY<lastY&&leftContY<plotY){leftContY=mathMin(lastY,plotY);rightContY=2*plotY-leftContY}if(rightContY>nextY&&rightContY>plotY){rightContY=mathMax(nextY,plotY);leftContY=2*plotY-rightContY}else if(rightContY<nextY&&rightContY<plotY){rightContY=mathMin(nextY,plotY);leftContY=2*plotY-rightContY}point.rightContX=rightContX;point.rightContY=rightContY}if(!i){ret=[M,plotX,plotY]}else{ret=['C',lastPoint.rightContX||lastPoint.plotX,lastPoint.rightContY||lastPoint.plotY,leftContX||plotX,leftContY||plotY,plotX,plotY];lastPoint.rightContX=lastPoint.rightContY=null}return ret}});seriesTypes.spline=SplineSeries;var AreaSplineSeries=extendClass(SplineSeries,{type:'areaspline',useThreshold:true});seriesTypes.areaspline=AreaSplineSeries;var ColumnSeries=extendClass(Series,{type:'column',useThreshold:true,getDistance:true,pointAttrToOptions:{stroke:'borderColor','stroke-width':'borderWidth',fill:'color',r:'borderRadius'},init:function(){Series.prototype.init.apply(this,arguments);var series=this,chart=series.chart;if(chart.hasRendered){each(chart.series,function(otherSeries){if(otherSeries.type===series.type){otherSeries.isDirty=true}})}},translate:function(){var series=this,chart=series.chart,options=series.options,stacking=options.stacking,borderWidth=options.borderWidth,columnCount=0,xAxis=series.xAxis,reversedXAxis=xAxis.reversed,categories=xAxis.categories,stackGroups={},stackKey,columnIndex;Series.prototype.translate.apply(series);each(chart.series,function(otherSeries){if(otherSeries.type===series.type&&otherSeries.visible&&series.options.group===otherSeries.options.group){if(otherSeries.options.stacking){stackKey=otherSeries.stackKey;if(stackGroups[stackKey]===UNDEFINED){stackGroups[stackKey]=columnCount++}columnIndex=stackGroups[stackKey]}else{columnIndex=columnCount++}otherSeries.columnIndex=columnIndex}});var points=series.points,categoryWidth=mathAbs(pick(xAxis.leastDistance,chart.plotSizeX/((categories&&categories.length)||1))),groupPadding=categoryWidth*options.groupPadding,groupWidth=categoryWidth-2*groupPadding,pointOffsetWidth=groupWidth/columnCount,optionPointWidth=options.pointWidth,pointPadding=defined(optionPointWidth)?(pointOffsetWidth-optionPointWidth)/2:pointOffsetWidth*options.pointPadding,pointWidth=mathCeil(mathMax(pick(optionPointWidth,pointOffsetWidth-2*pointPadding),1)),colIndex=(reversedXAxis?columnCount-series.columnIndex:series.columnIndex)||0,pointXOffset=pointPadding+(groupPadding+colIndex*pointOffsetWidth-(categoryWidth/2))*(reversedXAxis?-1:1),threshold=options.threshold,translatedThreshold=series.yAxis.getThreshold(threshold),minPointLength=pick(options.minPointLength,5);each(points,function(point,i){var plotY=point.plotY,yBottom=point.yBottom||translatedThreshold,barX=point.plotX+pointXOffset,barY=mathCeil(mathMin(plotY,yBottom)),barH=mathCeil(mathMax(plotY,yBottom)-barY),stack=series.yAxis.stacks[(point.y<0?'-':'')+series.stackKey],trackerY,shapeArgs;if(stacking&&series.visible&&stack&&stack[point.x]){stack[point.x].setOffset(pointXOffset,pointWidth)}if(mathAbs(barH)<minPointLength){if(minPointLength){barH=minPointLength;barY=mathAbs(barY-translatedThreshold)>minPointLength?yBottom-minPointLength:translatedThreshold-(plotY<=translatedThreshold?minPointLength:0)}trackerY=barY-3}extend(point,{barX:barX,barY:barY,barW:pointWidth,barH:barH});point.shapeType='rect';shapeArgs=extend(chart.renderer.Element.prototype.crisp.apply({},[borderWidth,barX,barY,pointWidth,barH]),{r:options.borderRadius});if(borderWidth%2){shapeArgs.y-=1;shapeArgs.height+=1}point.shapeArgs=shapeArgs;point.trackerArgs=defined(trackerY)&&merge(point.shapeArgs,{height:mathMax(6,barH+3),y:trackerY})})},getSymbol:function(){},drawGraph:function(){},drawPoints:function(){var series=this,options=series.options,renderer=series.chart.renderer,graphic,shapeArgs;each(series.points,function(point){var plotY=point.plotY;if(plotY!==UNDEFINED&&!isNaN(plotY)&&point.y!==null){graphic=point.graphic;shapeArgs=point.shapeArgs;if(graphic){stop(graphic);graphic.animate(shapeArgs)}else{point.graphic=graphic=renderer[point.shapeType](shapeArgs).attr(point.pointAttr[point.selected?SELECT_STATE:NORMAL_STATE]).add(series.group).shadow(options.shadow)}}})},drawTracker:function(){var series=this,chart=series.chart,renderer=chart.renderer,shapeArgs,tracker,trackerLabel=+new Date(),cursor=series.options.cursor,css=cursor&&{cursor:cursor},rel;each(series.points,function(point){tracker=point.tracker;shapeArgs=point.trackerArgs||point.shapeArgs;delete shapeArgs.strokeWidth;if(point.y!==null){if(tracker){tracker.attr(shapeArgs)}else{point.tracker=renderer[point.shapeType](shapeArgs).attr({isTracker:trackerLabel,fill:TRACKER_FILL,visibility:series.visible?VISIBLE:HIDDEN,zIndex:1}).on(hasTouch?'touchstart':'mouseover',function(event){rel=event.relatedTarget||event.fromElement;if(chart.hoverSeries!==series&&attr(rel,'isTracker')!==trackerLabel){series.onMouseOver()}point.onMouseOver()}).on('mouseout',function(event){if(!series.options.stickyTracking){rel=event.relatedTarget||event.toElement;if(attr(rel,'isTracker')!==trackerLabel){series.onMouseOut()}}}).css(css).add(point.group||chart.trackerGroup)}}})},animate:function(init){var series=this,points=series.points;if(!init){each(points,function(point){var graphic=point.graphic,shapeArgs=point.shapeArgs;if(graphic){graphic.attr({height:0,y:series.yAxis.translate(0,0,1)});graphic.animate({height:shapeArgs.height,y:shapeArgs.y},series.options.animation)}});series.animate=null}},remove:function(){var series=this,chart=series.chart;if(chart.hasRendered){each(chart.series,function(otherSeries){if(otherSeries.type===series.type){otherSeries.isDirty=true}})}Series.prototype.remove.apply(series,arguments)}});seriesTypes.column=ColumnSeries;var BarSeries=extendClass(ColumnSeries,{type:'bar',init:function(chart){chart.inverted=this.inverted=true;ColumnSeries.prototype.init.apply(this,arguments)}});seriesTypes.bar=BarSeries;var ScatterSeries=extendClass(Series,{type:'scatter',translate:function(){var series=this;Series.prototype.translate.apply(series);each(series.points,function(point){point.shapeType='circle';point.shapeArgs={x:point.plotX,y:point.plotY,r:series.chart.options.tooltip.snap}})},drawTracker:function(){var series=this,cursor=series.options.cursor,css=cursor&&{cursor:cursor},graphic;each(series.points,function(point){graphic=point.graphic;if(graphic){graphic.attr({isTracker:true}).on('mouseover',function(event){series.onMouseOver();point.onMouseOver()}).on('mouseout',function(event){if(!series.options.stickyTracking){series.onMouseOut()}}).css(css)}})}});seriesTypes.scatter=ScatterSeries;var PiePoint=extendClass(Point,{init:function(){Point.prototype.init.apply(this,arguments);var point=this,toggleSlice;extend(point,{visible:point.visible!==false,name:pick(point.name,'Slice')});toggleSlice=function(){point.slice()};addEvent(point,'select',toggleSlice);addEvent(point,'unselect',toggleSlice);return point},setVisible:function(vis){var point=this,chart=point.series.chart,tracker=point.tracker,dataLabel=point.dataLabel,connector=point.connector,method;point.visible=vis=vis===UNDEFINED?!point.visible:vis;method=vis?'show':'hide';point.group[method]();if(tracker){tracker[method]()}if(dataLabel){dataLabel[method]()}if(connector){connector[method]()}if(point.legendItem){chart.legend.colorizeItem(point,vis)}},slice:function(sliced,redraw,animation){var point=this,series=point.series,chart=series.chart,slicedTranslation=point.slicedTranslation,translation;setAnimation(animation,chart);redraw=pick(redraw,true);sliced=point.sliced=defined(sliced)?sliced:!point.sliced;translation={translateX:(sliced?slicedTranslation[0]:chart.plotLeft),translateY:(sliced?slicedTranslation[1]:chart.plotTop)};point.group.animate(translation);if(point.shadowGroup){point.shadowGroup.animate(translation)}}});var PieSeries=extendClass(Series,{type:'pie',isCartesian:false,pointClass:PiePoint,pointAttrToOptions:{stroke:'borderColor','stroke-width':'borderWidth',fill:'color'},getColor:function(){this.initialColor=this.chart.counters.color},animate:function(init){var series=this,points=series.points;each(points,function(point){var graphic=point.graphic,args=point.shapeArgs,up=-mathPI/2;if(graphic){graphic.attr({r:0,start:up,end:up});graphic.animate({r:args.r,start:args.start,end:args.end},series.options.animation)}});series.animate=null},setData:function(){Series.prototype.setData.apply(this,arguments);this.processData();this.generatePoints()},translate:function(){var total=0,series=this,cumulative=-0.25,precision=1000,options=series.options,slicedOffset=options.slicedOffset,connectorOffset=slicedOffset+options.borderWidth,positions=options.center.concat([options.size,options.innerSize||0]),chart=series.chart,plotWidth=chart.plotWidth,plotHeight=chart.plotHeight,start,end,angle,points=series.points,circ=2*mathPI,fraction,smallestSize=mathMin(plotWidth,plotHeight),isPercent,radiusX,radiusY,labelDistance=options.dataLabels.distance;positions=map(positions,function(length,i){isPercent=/%$/.test(length);return isPercent?[plotWidth,plotHeight,smallestSize,smallestSize][i]*pInt(length)/100:length});series.getX=function(y,left){angle=math.asin((y-positions[1])/(positions[2]/2+labelDistance));return positions[0]+(left?-1:1)*(mathCos(angle)*(positions[2]/2+labelDistance))};series.center=positions;each(points,function(point){total+=point.y});each(points,function(point){fraction=total?point.y/total:0;start=mathRound(cumulative*circ*precision)/precision;cumulative+=fraction;end=mathRound(cumulative*circ*precision)/precision;point.shapeType='arc';point.shapeArgs={x:positions[0],y:positions[1],r:positions[2]/2,innerR:positions[3]/2,start:start,end:end};angle=(end+start)/2;point.slicedTranslation=map([mathCos(angle)*slicedOffset+chart.plotLeft,mathSin(angle)*slicedOffset+chart.plotTop],mathRound);radiusX=mathCos(angle)*positions[2]/2;radiusY=mathSin(angle)*positions[2]/2;point.tooltipPos=[positions[0]+radiusX*0.7,positions[1]+radiusY*0.7];point.labelPos=[positions[0]+radiusX+mathCos(angle)*labelDistance,positions[1]+radiusY+mathSin(angle)*labelDistance,positions[0]+radiusX+mathCos(angle)*connectorOffset,positions[1]+radiusY+mathSin(angle)*connectorOffset,positions[0]+radiusX,positions[1]+radiusY,labelDistance<0?'center':angle<circ/4?'left':'right', angle];point.percentage=fraction*100;point.total=total});this.setTooltipPoints()},render:function(){var series=this;series.getAttribs();this.drawPoints();if(series.options.enableMouseTracking!==false){series.drawTracker()}this.drawDataLabels();if(series.options.animation&&series.animate){series.animate()}series.isDirty=series.isDirtyData=false},drawPoints:function(){var series=this,chart=series.chart,renderer=chart.renderer,groupTranslation,graphic,group,shadow=series.options.shadow,shadowGroup,shapeArgs;each(series.points,function(point){graphic=point.graphic;shapeArgs=point.shapeArgs;group=point.group;shadowGroup=point.shadowGroup;if(shadow&&!shadowGroup){shadowGroup=point.shadowGroup=renderer.g('shadow').attr({zIndex:4}).add()}if(!group){group=point.group=renderer.g('point').attr({zIndex:5}).add()}groupTranslation=point.sliced?point.slicedTranslation:[chart.plotLeft,chart.plotTop];group.translate(groupTranslation[0],groupTranslation[1]);if(shadowGroup){shadowGroup.translate(groupTranslation[0],groupTranslation[1])}if(graphic){graphic.animate(shapeArgs)}else{point.graphic=renderer.arc(shapeArgs).attr(extend(point.pointAttr[NORMAL_STATE],{'stroke-linejoin':'round'})).add(point.group).shadow(shadow,shadowGroup)}if(point.visible===false){point.setVisible(false)}})},drawDataLabels:function(){var series=this,points=series.points,point,chart=series.chart,options=series.options.dataLabels,connectorPadding=pick(options.connectorPadding,10),connectorWidth=pick(options.connectorWidth,1),connector,connectorPath,outside=options.distance>0,dataLabel,labelPos,labelHeight,lastY,centerY=series.center[1],quarters=[[],[],[],[]],x,y,visibility,overlapping,rankArr,secondPass,sign,lowerHalf,sort,i=4,j;Series.prototype.drawDataLabels.apply(series);each(points,function(point){var angle=point.labelPos[7],quarter;if(angle<0){quarter=0}else if(angle<mathPI/2){quarter=1}else if(angle<mathPI){quarter=2}else{quarter=3}quarters[quarter].push(point)});quarters[1].reverse();quarters[3].reverse();sort=function(a,b){return a.y>b.y};while(i--){overlapping=0;rankArr=[].concat(quarters[i]);rankArr.sort(sort);j=rankArr.length;while(j--){rankArr[j].rank=j}for(secondPass=0;secondPass<2;secondPass++){lowerHalf=i%3;lastY=lowerHalf?9999:-9999;sign=lowerHalf?-1:1;for(j=0;j<quarters[i].length;j++){point=quarters[i][j];dataLabel=point.dataLabel;if(dataLabel){labelPos=point.labelPos;visibility=VISIBLE;x=labelPos[0];y=labelPos[1];if(!labelHeight){labelHeight=dataLabel&&dataLabel.getBBox().height}if(outside){if(secondPass&&point.rank<overlapping){visibility=HIDDEN}else if((!lowerHalf&&y<lastY+labelHeight)||(lowerHalf&&y>lastY-labelHeight)){y=lastY+sign*labelHeight;x=series.getX(y,i>1);if((!lowerHalf&&y+labelHeight>centerY)||(lowerHalf&&y-labelHeight<centerY)){if(secondPass){visibility=HIDDEN}else{overlapping++}}}}if(point.visible===false){visibility=HIDDEN}if(visibility===VISIBLE){lastY=y}if(secondPass){dataLabel.attr({visibility:visibility,align:labelPos[6]})[dataLabel.moved?'animate':'attr']({x:x+options.x+({left:connectorPadding,right:-connectorPadding}[labelPos[6]]||0),y:y+options.y});dataLabel.moved=true;if(outside&&connectorWidth){connector=point.connector;connectorPath=[M,x+(labelPos[6]==='left'?5:-5),y,L,x,y,L,labelPos[2],labelPos[3],L,labelPos[4],labelPos[5]];if(connector){connector.animate({d:connectorPath});connector.attr('visibility',visibility)}else{point.connector=connector=series.chart.renderer.path(connectorPath).attr({'stroke-width':connectorWidth,stroke:options.connectorColor||'#606060',visibility:visibility,zIndex:3}).translate(chart.plotLeft,chart.plotTop).add()}}}}}}}},drawTracker:ColumnSeries.prototype.drawTracker,getSymbol:function(){}});seriesTypes.pie=PieSeries;var DATA_GROUPING='dataGrouping',seriesProto=Series.prototype,baseProcessData=seriesProto.processData,baseGeneratePoints=seriesProto.generatePoints,baseDestroy=seriesProto.destroy;seriesProto.processData=function(){var series=this,options=series.options,dataGroupingOptions=options[DATA_GROUPING];baseProcessData.apply(this);if(!dataGroupingOptions||dataGroupingOptions.enabled===false){return}var i,processedXData=series.processedXData,processedYData=series.processedYData,data=series.data,dataOptions=options.data,plotSizeX=series.chart.plotSizeX,groupPixelWidth=dataGroupingOptions.groupPixelWidth,maxPoints=plotSizeX/groupPixelWidth,approximation=dataGroupingOptions.approximation,summarize=approximation==='average'||approximation==='sum',dataLength=processedXData.length,ohlcData=series.valueCount===4,groupedData=series.groupedData,groupedXData=[],groupedYData=[];each(groupedData||[],function(point,i){if(point){groupedData[i]=point.destroy()}});series.hasGroupedData=false;if(dataLength>maxPoints){series.hasGroupedData=true;series.points=null;var xMin=processedXData[0],xMax=processedXData[dataLength-1],interval=groupPixelWidth*(xMax-xMin)/plotSizeX,groupPositions=getTimeTicks(interval,xMin,xMax,null,dataGroupingOptions.units),pointX,pointY,value=UNDEFINED,open=null,high=null,low=null,close=null,count=0;for(i=0;i<dataLength;i++){while(groupPositions[1]!==UNDEFINED&&processedXData[i]>=groupPositions[1]){if(approximation==='average'&&value!==UNDEFINED&&value!==null){value/=count}pointX=groupPositions.shift();if(value!==UNDEFINED||ohlcData){groupedXData.push(pointX);if(ohlcData){groupedYData.push([open,high,low,close]);open=high=low=close=null}else{groupedYData.push(value)}}value=UNDEFINED;count=0}pointY=processedYData[i];if(summarize&&!ohlcData){value=value===UNDEFINED||value===null?pointY:value+pointY}else if(ohlcData){var index=series.cropStart+i,point=(data&&data[index])||series.pointClass.prototype.applyOptions.apply({},[dataOptions[index]]);if(open===null){open=point.open}high=high===null?point.high:mathMax(high,point.high);low=low===null?point.low:mathMin(low,point.low);close=point.close}else if(approximation==='open'&&value===UNDEFINED){value=pointY}else if(approximation==='high'){value=value===UNDEFINED?pointY:mathMax(value,pointY)}else if(approximation==='low'){value=value===UNDEFINED?pointY:mathMin(value,pointY)}else if(approximation==='close'){value=pointY}count++}if(dataGroupingOptions.smoothed){i=groupedXData.length-1;groupedXData[i]=xMax;while(i--&&i){groupedXData[i]+=interval/2}groupedXData[0]=xMin}series.tooltipHeaderFormat=dataGroupingOptions.dateTimeLabelFormats[groupPositions.unit[0]];series.unit=groupPositions.unit}else{groupedXData=processedXData;groupedYData=processedYData;series.tooltipHeaderFormat=null;series.unit=null}series.processedXData=groupedXData;series.processedYData=groupedYData};seriesProto.generatePoints=function(){var series=this;baseGeneratePoints.apply(series);series.groupedData=series.hasGroupedData?series.points:null};seriesProto.destroy=function(){var series=this,groupedData=series.groupedData||[],i=groupedData.length;while(i--){if(groupedData[i]){groupedData[i].destroy()}}baseDestroy.apply(series)};var dateTimeLabelFormats={second:'%A, %b %e, %H:%M:%S',minute:'%A, %b %e, %H:%M',hour:'%A, %b %e, %H:%M',day:'%A, %b %e, %Y',week:'Week from %A, %b %e, %Y',month:'%B %Y',year:'%Y'};defaultPlotOptions.line[DATA_GROUPING]=defaultPlotOptions.spline[DATA_GROUPING]=defaultPlotOptions.area[DATA_GROUPING]=defaultPlotOptions.areaspline[DATA_GROUPING]={approximation:'average',groupPixelWidth:2,dateTimeLabelFormats:dateTimeLabelFormats,units:[['millisecond',[1,2,5,10,20,25,50,100,200,500]],['second',[1,2,5,10,15,30]],['minute',[1,2,5,10,15,30]],['hour',[1,2,3,4,6,8,12]],['day',[1]],['week',[1]],['month',[1,3,6]],['year',null]]};defaultPlotOptions.column[DATA_GROUPING]={approximation:'sum',groupPixelWidth:10,dateTimeLabelFormats:dateTimeLabelFormats};defaultPlotOptions.ohlc=merge(defaultPlotOptions.column,{lineWidth:1,dataGrouping:{groupPixelWidth:5},states:{hover:{lineWidth:3}}});var OHLCPoint=extendClass(Point,{applyOptions:function(options){var point=this,series=point.series,i=0;if(typeof options==='object'&&typeof options.length!=='number'){extend(point,options);point.options=options}else if(options.length){if(options.length>=5){if(typeof options[0]==='string'){point.name=options[0]}else if(typeof options[0]==='number'){point.x=options[0]}i++}point.open=options[i++];point.high=options[i++];point.low=options[i++];point.close=options[i++];point.mean=options[i++];point.median=options[i++];point.start=options[i++];point.end=options[i++];point.requestsPerSecond=options[i++];point.stress=options[i++]}point.y=point.high;if(point.x===UNDEFINED&&series){point.x=series.autoIncrement()}return point},tooltipFormatter:function(){var point=this,series=point.series;return['<span style="color:'+series.color+';font-weight:bold">',(point.name||series.name),'</span>','<br/>','Start: ',point.start,'<br/>','End: ',point.end,'<br/>','Req/Sec: ',point.requestsPerSecond,'<br/>','Stress: ',point.stress+'%','<br/>','<br/>','Max: ',point.high,'<br/>','Upper Quartile: ',point.close,'<br/>','Lower Quartile: ',point.open,'<br/>','Min: ',point.low,'<br/>','<br/>','Mean: ',point.mean,'<br/>','Median: ',point.median,'<br/>'].join('')}});var OHLCSeries=extendClass(seriesTypes.column,{type:'ohlc',valueCount:4,pointClass:OHLCPoint,useThreshold:false,pointAttrToOptions:{stroke:'color','stroke-width':'lineWidth'},translate:function(){var series=this,yAxis=series.yAxis;seriesTypes.column.prototype.translate.apply(series);each(series.points,function(point){if(point.open!==null){point.plotOpen=yAxis.translate(point.open,0,1)}if(point.close!==null){point.plotClose=yAxis.translate(point.close,0,1)}})},drawPoints:function(){var series=this,points=series.points,chart=series.chart,pointAttr,plotOpen,plotClose,crispCorr,halfWidth,path,graphic,crispX;each(points,function(point){if(point.plotY!==UNDEFINED){graphic=point.graphic;pointAttr=point.pointAttr[point.selected?'selected':''];crispCorr=(pointAttr['stroke-width']%2)/2;crispX=mathRound(point.plotX)+crispCorr;halfWidth=mathRound(point.barW/2);path=['M',crispX,mathRound(point.yBottom),'L',crispX,mathRound(point.plotY)];if(point.open!==null){plotOpen=mathRound(point.plotOpen)+crispCorr;path.push('M',crispX,plotOpen,'L',crispX-halfWidth,plotOpen)}if(point.close!==null){plotClose=mathRound(point.plotClose)+crispCorr;path.push('M',crispX,plotClose,'L',crispX+halfWidth,plotClose)}if(graphic){graphic.animate({d:path})}else{point.graphic=chart.renderer.path(path).attr(pointAttr).add(series.group)}}})},animate:null});seriesTypes.ohlc=OHLCSeries;defaultPlotOptions.candlestick=merge(defaultPlotOptions.column,{lineColor:'black',lineWidth:1,upColor:'white',states:{hover:{lineWidth:2}}});var CandlestickSeries=extendClass(OHLCSeries,{type:'candlestick',pointAttrToOptions:{fill:'color',stroke:'lineColor','stroke-width':'lineWidth'},getAttribs:function(){OHLCSeries.prototype.getAttribs.apply(this,arguments);var series=this,options=series.options,stateOptions=options.states,upColor=options.upColor,seriesDownPointAttr=merge(series.pointAttr);seriesDownPointAttr[''].fill=upColor;seriesDownPointAttr.hover.fill=stateOptions.hover.upColor||upColor;seriesDownPointAttr.select.fill=stateOptions.select.upColor||upColor;each(series.points,function(point){if(point.open<point.close){point.pointAttr=seriesDownPointAttr}})},drawPoints:function(){var series=this,points=series.points,chart=series.chart,pointAttr,plotOpen,plotClose,topBox,bottomBox,crispCorr,crispX,graphic,path,halfWidth;each(points,function(point){graphic=point.graphic;if(point.plotY!==UNDEFINED){pointAttr=point.pointAttr[point.selected?'selected':''];crispCorr=(pointAttr['stroke-width']%2)/2;crispX=mathRound(point.plotX)+crispCorr;plotOpen=mathRound(point.plotOpen)+crispCorr;plotClose=mathRound(point.plotClose)+crispCorr;topBox=math.min(plotOpen,plotClose);bottomBox=math.max(plotOpen,plotClose);halfWidth=mathRound(point.barW/2);path=['M',crispX-halfWidth,bottomBox,'L',crispX-halfWidth,topBox,'L',crispX+halfWidth,topBox,'L',crispX+halfWidth,bottomBox,'L',crispX-halfWidth,bottomBox,'M',crispX,bottomBox,'L',crispX,mathRound(point.yBottom),'M',crispX,topBox,'L',crispX,mathRound(point.plotY),'Z'];if(graphic){graphic.animate({d:path})}else{point.graphic=chart.renderer.path(path).attr(pointAttr).add(series.group)}}})}});seriesTypes.candlestick=CandlestickSeries;var symbols=Renderer.prototype.symbols;defaultPlotOptions.flags=merge(defaultPlotOptions.column,{fillColor:'white',lineWidth:1,shape:'flag',stackDistance:7,states:{hover:{lineColor:'black',fillColor:'#FCFFC5'}},style:{fontSize:'11px',fontWeight:'bold',textAlign:'center'},y:-30});seriesTypes.flags=extendClass(seriesTypes.column,{type:'flags',noSharedTooltip:true,useThreshold:false,init:Series.prototype.init,pointAttrToOptions:{fill:'fillColor',stroke:'color','stroke-width':'lineWidth',r:'radius'},translate:function(){seriesTypes.column.prototype.translate.apply(this);var series=this,options=series.options,chart=series.chart,points=series.points,cursor=points.length-1,i,point,lastPoint,optionsOnSeries=options.onSeries,onSeries=optionsOnSeries&&chart.get(optionsOnSeries),onData,onPoint;if(onSeries){onData=onSeries.points;i=onData.length;points.sort(function(a,b){return(a.x-b.x)});while(i--&&points[cursor]){point=points[cursor];onPoint=onData[i];if(onPoint.x<=point.x){point.plotY=onPoint.plotY;cursor--;i++;if(cursor<0){break}}}}each(points,function(point,i){if(!onSeries){point.plotY=chart.plotHeight}lastPoint=points[i-1];if(lastPoint&&lastPoint.plotX===point.plotX){if(lastPoint.stackIndex===UNDEFINED){lastPoint.stackIndex=0}point.stackIndex=lastPoint.stackIndex+1}})},drawPoints:function(){var series=this,pointAttr,points=series.points,chart=series.chart,renderer=chart.renderer,plotX,plotY,options=series.options,optionsY=options.y,shape=options.shape,box,bBox,i,point,graphic,connector,stackIndex,crisp=(options.lineWidth%2/2),anchorX,anchorY;i=points.length;while(i--){point=points[i];plotX=point.plotX+crisp;stackIndex=point.stackIndex;plotY=point.plotY+optionsY+crisp-(stackIndex!==UNDEFINED&&stackIndex*options.stackDistance);if(isNaN(plotY)){plotY=0}anchorX=stackIndex?UNDEFINED:point.plotX+crisp;anchorY=stackIndex?UNDEFINED:point.plotY;graphic=point.graphic;connector=point.connector;if(plotY!==UNDEFINED){pointAttr=point.pointAttr[point.selected?'select':''];if(graphic){graphic.attr({x:plotX,y:plotY,r:pointAttr.r})}else{graphic=point.graphic=renderer.label(point.options.title||options.title||'A',plotX,plotY,shape,anchorX,anchorY).css(merge(options.style,point.style)).attr(pointAttr).attr({align:shape==='flag'?'left':'center',width:options.width,height:options.height}).add(series.group)}box=graphic.box;bBox=box.getBBox();point.shapeArgs=extend(bBox,{x:plotX-(shape==='flag'?0:box.attr('width')/2), y:plotY})}}},drawTracker:function(){var series=this;seriesTypes.column.prototype.drawTracker.apply(series);each(series.points,function(point){addEvent(point.tracker.element,'mouseover',function(){point.graphic.toFront()})})},tooltipFormatter:function(item){return item.point.text},animate:function(){}});symbols.flag=function(x,y,w,h,options){var anchorX=(options&&options.anchorX)||x,anchorY=(options&&options.anchorY)||y;return['M',anchorX,anchorY,'L',x,y+h,x,y,x+w,y,x+w,y+h,x,y+h,'M',anchorX,anchorY,'Z']};each(['circle','square'],function(shape){symbols[shape+'pin']=function(x,y,w,h,options){var anchorX=options&&options.anchorX,anchorY=options&&options.anchorY,path=symbols[shape](x,y,w,h);if(anchorX&&anchorY){path.push('M',x+w/2,y+h,'L',anchorX,anchorY)}return path}});var MOUSEDOWN=hasTouch?'touchstart':'mousedown',MOUSEMOVE=hasTouch?'touchmove':'mousemove',MOUSEUP=hasTouch?'touchend':'mouseup';var buttonGradient={linearGradient:[0,0,0,14],stops:[[0,'#FFF'],[1,'#CCC']]},units=[].concat(defaultPlotOptions.line.dataGrouping.units);units[4][1]=[1,2,3,4];units[5][1]=[1,2,3];extend(defaultOptions,{navigator:{handles:{backgroundColor:'#FFF',borderColor:'#666'},height:40,margin:10,maskFill:'rgba(255, 255, 255, 0.75)',outlineColor:'#444',outlineWidth:1,series:{type:'areaspline',color:'#4572A7',fillOpacity:0.4,dataGrouping:{smoothed:true,units:units},lineWidth:1,marker:{enabled:false},shadow:false},xAxis:{tickWidth:0,lineWidth:0,gridLineWidth:1,tickPixelInterval:200,labels:{align:'left',x:3,y:-4}},yAxis:{gridLineWidth:0,startOnTick:false,endOnTick:false,minPadding:0.1,maxPadding:0.1,labels:{enabled:false},title:{text:null},tickWidth:0}},scrollbar:{height:hasTouch?20:14,barBackgroundColor:buttonGradient,barBorderRadius:2,barBorderWidth:1,barBorderColor:'#666',buttonArrowColor:'#666',buttonBackgroundColor:buttonGradient,buttonBorderColor:'#666',buttonBorderRadius:2,buttonBorderWidth:1,rifleColor:'#666',trackBackgroundColor:{linearGradient:[0,0,0,10],stops:[[0,'#EEE'],[1,'#FFF']]},trackBorderColor:'#CCC',trackBorderWidth:1}});function Scroller(chart){var renderer=chart.renderer,chartOptions=chart.options,navigatorOptions=chartOptions.navigator,navigatorEnabled=navigatorOptions.enabled,navigatorLeft,navigatorSeries,scrollbarOptions=chartOptions.scrollbar,scrollbarEnabled=scrollbarOptions.enabled,grabbedLeft,grabbedRight,grabbedCenter,otherHandlePos,dragOffset,hasDragged,xAxis,yAxis,zoomedMin,zoomedMax,range,bodyStyle=document.body.style,defaultBodyCursor,handlesOptions=navigatorOptions.handles,height=navigatorEnabled?navigatorOptions.height:0,outlineWidth=navigatorOptions.outlineWidth,scrollbarHeight=scrollbarEnabled?scrollbarOptions.height:0,outlineHeight=height+scrollbarHeight,barBorderRadius=scrollbarOptions.barBorderRadius,top=navigatorOptions.top||chart.chartHeight-height-scrollbarHeight-chartOptions.chart.spacingBottom,halfOutline=outlineWidth/2,outlineTop,plotLeft,plotWidth,rendered,baseSeriesOption=navigatorOptions.baseSeries,baseSeries=chart.series[baseSeriesOption]||(typeof baseSeriesOption==='string'&&chart.get(baseSeriesOption))||chart.series[0],leftShade,rightShade,outline,handles=[],scrollbarGroup,scrollbarTrack,scrollbar,scrollbarRifles,scrollbarButtons=[];chart.resetZoomEnabled=false;function drawHandle(x,index){var attr={fill:handlesOptions.backgroundColor,stroke:handlesOptions.borderColor,'stroke-width':1};if(!rendered){handles[index]=renderer.g().css({cursor:'e-resize'}).attr({zIndex:3}).add();renderer.rect(-4.5,0,9,16,3,1).attr(attr).add(handles[index]);renderer.path(['M',-1.5,4,'L',-1.5,12,'M',0.5,4,'L',0.5,12]).attr(attr).add(handles[index])}handles[index].translate(plotLeft+scrollbarHeight+parseInt(x,10),top+height/2-8)}function drawScrollbarButton(index){if(!rendered){scrollbarButtons[index]=renderer.g().add(scrollbarGroup);renderer.rect(-0.5,-0.5,scrollbarHeight+1,scrollbarHeight+1,scrollbarOptions.buttonBorderRadius,scrollbarOptions.buttonBorderWidth).attr({stroke:scrollbarOptions.buttonBorderColor,'stroke-width':scrollbarOptions.buttonBorderWidth,fill:scrollbarOptions.buttonBackgroundColor}).add(scrollbarButtons[index]);renderer.path(['M',scrollbarHeight/2+(index?-1:1),scrollbarHeight/2-3,'L',scrollbarHeight/2+(index?-1:1),scrollbarHeight/2+3,scrollbarHeight/2+(index?2:-2),scrollbarHeight/2]).attr({fill:scrollbarOptions.buttonArrowColor}).add(scrollbarButtons[index])}if(index){scrollbarButtons[index].attr({translateX:plotWidth-scrollbarHeight})}}function render(min,max,pxMin,pxMax){var strokeWidth,scrollbarStrokeWidth=scrollbarOptions.barBorderWidth,centerBarX;outlineTop=top+halfOutline;plotLeft=chart.plotLeft;plotWidth=chart.plotWidth;navigatorLeft=plotLeft+scrollbarHeight;pxMin=pick(pxMin,xAxis.translate(min));pxMax=pick(pxMax,xAxis.translate(max));if(rendered&&xAxis.getExtremes){var newExtremes=chart.xAxis[0].getExtremes(),oldExtremes=xAxis.getExtremes();if(newExtremes.dataMin!==oldExtremes.min||newExtremes.dataMax!==oldExtremes.max){xAxis.setExtremes(newExtremes.dataMin,newExtremes.dataMax)}}zoomedMin=parseInt(mathMin(pxMin,pxMax),10);zoomedMax=parseInt(mathMax(pxMin,pxMax),10);range=zoomedMax-zoomedMin;if(!rendered){if(navigatorEnabled){leftShade=renderer.rect().attr({fill:navigatorOptions.maskFill,zIndex:3}).add();rightShade=renderer.rect().attr({fill:navigatorOptions.maskFill,zIndex:3}).add();outline=renderer.path().attr({'stroke-width':outlineWidth,stroke:navigatorOptions.outlineColor,zIndex:3}).add()}if(scrollbarEnabled){scrollbarGroup=renderer.g().add();strokeWidth=scrollbarOptions.trackBorderWidth;scrollbarTrack=renderer.rect().attr({y:-strokeWidth%2/2,fill:scrollbarOptions.trackBackgroundColor,stroke:scrollbarOptions.trackBorderColor,'stroke-width':strokeWidth,r:scrollbarOptions.trackBorderRadius||0,height:scrollbarHeight}).add(scrollbarGroup);scrollbar=renderer.rect().attr({y:-scrollbarStrokeWidth%2/2,height:scrollbarHeight,fill:scrollbarOptions.barBackgroundColor,stroke:scrollbarOptions.barBorderColor,'stroke-width':scrollbarStrokeWidth,rx:barBorderRadius,ry:barBorderRadius}).add(scrollbarGroup);scrollbarRifles=renderer.path().attr({stroke:scrollbarOptions.rifleColor,'stroke-width':1}).add(scrollbarGroup)}}if(navigatorEnabled){leftShade.attr({x:navigatorLeft,y:top,width:zoomedMin,height:height});rightShade.attr({x:navigatorLeft+zoomedMax,y:top,width:plotWidth-zoomedMax-2*scrollbarHeight,height:height});outline.attr({d:['M',plotLeft,outlineTop,'L',navigatorLeft+zoomedMin-halfOutline,outlineTop,navigatorLeft+zoomedMin-halfOutline,outlineTop+outlineHeight,navigatorLeft+zoomedMax+halfOutline,outlineTop+outlineHeight,navigatorLeft+zoomedMax+halfOutline,outlineTop,plotLeft+plotWidth,outlineTop]});drawHandle(zoomedMin-halfOutline,0);drawHandle(zoomedMax+halfOutline,1)}if(scrollbarEnabled){drawScrollbarButton(0);drawScrollbarButton(1);scrollbarGroup.translate(plotLeft,mathRound(outlineTop+height));scrollbarTrack.attr({width:plotWidth});scrollbar.attr({x:mathRound(scrollbarHeight+zoomedMin)+(scrollbarStrokeWidth%2/2),width:range});centerBarX=scrollbarHeight+zoomedMin+range/2-0.5;scrollbarRifles.attr({d:[M,centerBarX-3,scrollbarHeight/4,L,centerBarX-3,2*scrollbarHeight/3,M,centerBarX,scrollbarHeight/4,L,centerBarX,2*scrollbarHeight/3,M,centerBarX+3,scrollbarHeight/4,L,centerBarX+3,2*scrollbarHeight/3],visibility:range>12?VISIBLE:HIDDEN})}rendered=true}function addEvents(){addEvent(chart.container,MOUSEDOWN,function(e){e=chart.tracker.normalizeMouseEvent(e);var chartX=e.chartX,chartY=e.chartY,handleSensitivity=hasTouch?10:7,left,isOnNavigator;if(chartY>top&&chartY<top+height+scrollbarHeight){isOnNavigator=!scrollbarEnabled||chartY<top+height;if(isOnNavigator&&math.abs(chartX-zoomedMin-navigatorLeft)<handleSensitivity){grabbedLeft=true;otherHandlePos=zoomedMax}else if(isOnNavigator&&math.abs(chartX-zoomedMax-navigatorLeft)<handleSensitivity){grabbedRight=true;otherHandlePos=zoomedMin}else if(chartX>navigatorLeft+zoomedMin&&chartX<navigatorLeft+zoomedMax){grabbedCenter=chartX;defaultBodyCursor=bodyStyle.cursor;bodyStyle.cursor='ew-resize';dragOffset=chartX-zoomedMin}else if(chartX>plotLeft&&chartX<plotLeft+plotWidth){if(isOnNavigator){left=chartX-navigatorLeft-range/2}else{if(chartX<navigatorLeft){left=zoomedMin-mathMin(10,range)}else if(chartX>plotLeft+plotWidth-scrollbarHeight){left=zoomedMin+mathMin(10,range)}else{left=chartX<navigatorLeft+zoomedMin?zoomedMin-range:zoomedMax}}if(left<0){left=0}else if(left+range>plotWidth-2*scrollbarHeight){left=plotWidth-range-2*scrollbarHeight}chart.xAxis[0].setExtremes(xAxis.translate(left,true),xAxis.translate(left+range,true),true,false)}}if(e.preventDefault){e.preventDefault()}});addEvent(chart.container,MOUSEMOVE,function(e){e=chart.tracker.normalizeMouseEvent(e);var chartX=e.chartX;if(chartX<navigatorLeft){chartX=navigatorLeft}else if(chartX>plotLeft+plotWidth-scrollbarHeight){chartX=plotLeft+plotWidth-scrollbarHeight}if(grabbedLeft){hasDragged=true;render(0,0,chartX-navigatorLeft,otherHandlePos)}else if(grabbedRight){hasDragged=true;render(0,0,otherHandlePos,chartX-navigatorLeft)}else if(grabbedCenter){hasDragged=true;if(chartX<dragOffset){chartX=dragOffset}else if(chartX>plotWidth+dragOffset-range-2*scrollbarHeight){chartX=plotWidth+dragOffset-range-2*scrollbarHeight}render(0,0,chartX-dragOffset,chartX-dragOffset+range)}});addEvent(document,MOUSEUP,function(){if(hasDragged){chart.xAxis[0].setExtremes(xAxis.translate(zoomedMin,true),xAxis.translate(zoomedMax,true),true,false)}grabbedLeft=grabbedRight=grabbedCenter=hasDragged=dragOffset=null;bodyStyle.cursor=defaultBodyCursor})}function init(){var xAxisIndex=chart.xAxis.length,yAxisIndex=chart.yAxis.length;chart.extraBottomMargin=outlineHeight+navigatorOptions.margin;if(navigatorEnabled){var baseOptions=baseSeries.options,navigatorSeriesOptions,data=baseOptions.data;baseOptions.data=null;navigatorSeriesOptions=merge(baseSeries.options,navigatorOptions.series,{threshold:null,clip:false,enableMouseTracking:false,group:'nav',padXAxis:false,xAxis:xAxisIndex,yAxis:yAxisIndex,name:'Navigator',showInLegend:false});baseOptions.data=navigatorSeriesOptions.data=data;navigatorSeries=chart.initSeries(navigatorSeriesOptions);addEvent(baseSeries,'updatedData',function(){var baseExtremes=baseSeries.xAxis.getExtremes(),range=baseExtremes.max-baseExtremes.min,stickToMax=baseExtremes.max>=navigatorSeries.xData[navigatorSeries.xData.length-1],stickToMin=baseExtremes.min-range<=navigatorSeries.xData[0],newMax,newMin;navigatorSeries.options.pointStart=baseSeries.xData[0];navigatorSeries.setData(baseSeries.options.data);if(stickToMax){newMax=baseExtremes.dataMax;baseSeries.xAxis.setExtremes(newMax-range,newMax)}else if(stickToMin){newMin=baseExtremes.dataMin;baseSeries.xAxis.setExtremes(newMin,newMin+range)}else{render(mathMax(baseExtremes.min,baseExtremes.dataMin),mathMin(baseExtremes.max,baseExtremes.dataMax))}});xAxis=new chart.Axis(merge(navigatorOptions.xAxis,{isX:true,type:'datetime',index:xAxisIndex,height:height,top:top,offset:0,offsetLeft:scrollbarHeight,offsetRight:-scrollbarHeight,startOnTick:false,endOnTick:false,minPadding:0,maxPadding:0,zoomEnabled:false}));yAxis=new chart.Axis(merge(navigatorOptions.yAxis,{alignTicks:false,height:height,top:top,offset:0,index:yAxisIndex,zoomEnabled:false}))}else{xAxis={translate:function(value,reverse){var ext=baseSeries.xAxis.getExtremes(),scrollTrackWidth=chart.plotWidth-2*scrollbarHeight,dataMin=ext.dataMin,valueRange=ext.dataMax-dataMin;return reverse?(value*valueRange/scrollTrackWidth)+dataMin:scrollTrackWidth*(value-dataMin)/valueRange}}}addEvents()}init();return{render:render}}extend(defaultOptions,{rangeSelector:{}});defaultOptions.lang=merge(defaultOptions.lang,{rangeSelectorZoom:'Zoom',rangeSelectorFrom:'From:',rangeSelectorTo:'To:'});function RangeSelector(chart){var renderer=chart.renderer,rendered,container=chart.container,lang=defaultOptions.lang,div,leftBox,rightBox,selected,buttons=[],buttonOptions,options,defaultButtons=[{type:'day',count:1,text:'1d'},{type:'week',count:1,text:'1w'},{type:'month',count:1,text:'1m'},{type:'all',text:'All'}];chart.resetZoomEnabled=false;function clickButton(i,rangeOptions,redraw){var baseAxis=chart.xAxis[0],extremes=baseAxis&&baseAxis.getExtremes(),now,dataMin=extremes&&extremes.dataMin,dataMax=extremes&&extremes.dataMax,newMin,newMax=baseAxis&&mathMin(extremes.max,dataMax),date=new Date(newMax),type=rangeOptions.type,count=rangeOptions.count,range,rangeMin,year,fixedTimes={millisecond:1,second:1000,minute:60*1000,hour:3600*1000,day:24*3600*1000,week:7*24*3600*1000};if(dataMin===null||dataMax===null){return}if(fixedTimes[type]){range=fixedTimes[type]*count;newMin=mathMax(newMax-range,dataMin)}else if(type==='month'){date.setMonth(date.getMonth()-count);newMin=mathMax(date.getTime(),dataMin);range=30*24*3600*1000*count}else if(type==='ytd'){date=new Date(0);now=new Date();year=now.getFullYear();date.setFullYear(year);if(String(year)!==dateFormat('%Y',date)){date.setFullYear(year-1)}newMin=rangeMin=mathMax(dataMin||0,date.getTime());now=now.getTime();newMax=mathMin(dataMax||now,now)}else if(type==='year'){date.setFullYear(date.getFullYear()-count);newMin=mathMax(dataMin,date.getTime());range=365*24*3600*1000*count}else if(type==='all'&&baseAxis){newMin=dataMin;newMax=dataMax}if(buttons[i]){buttons[i].setState(2)}if(!baseAxis){chart.options.xAxis=merge(chart.options.xAxis,{range:range,min:rangeMin});selected=i}else{setTimeout(function(){baseAxis.setExtremes(newMin,newMax,pick(redraw,1),0);selected=i},1)}}function init(){chart.extraTopMargin=25;options=chart.options.rangeSelector;buttonOptions=options.buttons||defaultButtons;selected=options.selected;addEvent(container,MOUSEDOWN,function(){if(leftBox){leftBox.blur()}if(rightBox){rightBox.blur()}});if(selected!==UNDEFINED&&buttonOptions[selected]){clickButton(selected,buttonOptions[selected],false)}addEvent(chart,'load',function(){addEvent(chart.xAxis[0],'setExtremes',function(){if(buttons[selected]){buttons[selected].setState(0)}})})}function setInputValue(input,time){var format=input.hasFocus?'%Y-%m-%d':'%b %e, %Y';if(time){input.HCTime=time}input.value=dateFormat(format,input.HCTime)}function drawInput(name){var isMin=name==='min',input;createElement('span',{innerHTML:lang[isMin?'rangeSelectorFrom':'rangeSelectorTo']},options.labelStyle,div);input=createElement('input',{name:name,className:'highcharts-range-selector',type:'text'},extend({width:'80px',height:'16px',border:'1px solid silver',marginLeft:'5px',marginRight:isMin?'5px':'0',textAlign:'center'},options.inputStyle),div);input.onfocus=input.onblur=function(e){e=e||window.event;input.hasFocus=e.type==='focus';setInputValue(input)};input.onchange=function(){var inputValue=input.value,value=Date.parse(inputValue),extremes=chart.xAxis[0].getExtremes();if(isNaN(value)){value=inputValue.split('-');value=Date.UTC(pInt(value[0]),pInt(value[1])-1,pInt(value[2]))}if(!isNaN(value)&&((isMin&&(value>extremes.dataMin&&value<rightBox.HCTime))||(!isMin&&(value<extremes.dataMax&&value>leftBox.HCTime)))){chart.xAxis[0].setExtremes(isMin?value:extremes.min,isMin?extremes.max:value)}};return input}function render(min,max){var chartStyle=chart.options.chart.style,buttonTheme=options.buttonTheme,inputEnabled=options.inputEnabled!==false,states=buttonTheme&&buttonTheme.states;if(!rendered){renderer.text(lang.rangeSelectorZoom,chart.plotLeft,chart.plotTop-10).css(options.labelStyle).add();each(buttonOptions,function(rangeOptions,i){buttons[i]=renderer.button(rangeOptions.text,chart.plotLeft+50+i*30,chart.plotTop-25,function(){clickButton(i,rangeOptions);this.isActive=true},extend(buttonTheme,{padding:1,r:0}),states&&states.hover,states&&states.select).attr({width:28,height:16}).css({textAlign:'center'}).add();if(selected===i){buttons[i].setState(2)}});if(inputEnabled){div=createElement('div',null,{position:'relative',height:0,fontFamily:chartStyle.fontFamily,fontSize:chartStyle.fontSize},container.parentNode);div=createElement('div',null,extend({position:'absolute',top:(-chart.chartHeight+chart.plotTop-25)+'px',right:(chart.chartWidth-chart.plotLeft-chart.plotWidth)+'px'},options.inputBoxStyle),div);leftBox=drawInput('min');rightBox=drawInput('max')}}if(inputEnabled){setInputValue(leftBox,min);setInputValue(rightBox,max)}rendered=true}init();return{render:render}}Chart.prototype.callbacks.push(function(chart){var extremes,scroller=chart.scroller,rangeSelector=chart.rangeSelector;function renderScroller(){extremes=chart.xAxis[0].getExtremes();scroller.render(mathMax(extremes.min,extremes.dataMin),mathMin(extremes.max,extremes.dataMax))}function renderRangeSelector(){extremes=chart.xAxis[0].getExtremes();rangeSelector.render(extremes.min,extremes.max)}if(scroller){addEvent(chart.xAxis[0],'setExtremes',function(e){scroller.render(e.min,e.max)});addEvent(chart,'resize',renderScroller);renderScroller()}if(rangeSelector){addEvent(chart.xAxis[0],'setExtremes',function(e){rangeSelector.render(e.min,e.max)});addEvent(chart,'resize',renderRangeSelector);renderRangeSelector()}});Highcharts.StockChart=function(options,callback){var seriesOptions=options.series,lineOptions={marker:{enabled:false,states:{hover:{enabled:true,radius:5}}},shadow:false,states:{hover:{lineWidth:2}}};options.yAxis=map(splat(options.yAxis||{}),function(yAxisOptions){return merge({labels:{align:'left',x:2,y:-2},showLastLabel:false,title:{text:null}},yAxisOptions)});options.series=null;options=merge({chart:{panning:true},navigator:{enabled:true},scrollbar:{enabled:true},rangeSelector:{enabled:true},title:{text:null},tooltip:{shared:true,crosshairs:true},legend:{enabled:false},xAxis:{title:{text:null},showLastLabel:true},plotOptions:{line:lineOptions,spline:lineOptions,area:lineOptions,areaspline:lineOptions,column:{shadow:false,borderWidth:0}}},options,{chart:{inverted:false},xAxis:{type:'datetime',categories:null}});options.series=seriesOptions;return new Chart(options,callback)};extend(Highcharts,{Chart:Chart,dateFormat:dateFormat,pathAnim:pathAnim,getOptions:getOptions,numberFormat:numberFormat,Point:Point,Color:Color,Renderer:Renderer,seriesTypes:seriesTypes,setOptions:setOptions,Series:Series,addEvent:addEvent,removeEvent:removeEvent,createElement:createElement,discardElement:discardElement,css:css,each:each,extend:extend,map:map,merge:merge,pick:pick,splat:splat,extendClass:extendClass,version:''})}());